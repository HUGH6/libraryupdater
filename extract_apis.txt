{"java_doc": "", "method_name": "toString", "return_type": "String", "signature": "toString()", "body_content": "{\r\n    if (parent == null) {\r\n        return \"$\";\r\n    } else {\r\n        if (fieldName instanceof Integer) {\r\n            return parent.toString() + \"[\" + fieldName + \"]\";\r\n        } else {\r\n            return parent.toString() + \".\" + fieldName;\r\n        }\r\n    }\r\n}", "class_name": "SerialContext", "qualified_method_name": "com.alibaba.fastjson.serializer.SerialContext.toString", "qualified_signature": "com.alibaba.fastjson.serializer.SerialContext.toString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "visitEnd", "return_type": "void", "signature": "visitEnd()", "body_content": "{\r\n}", "class_name": "FieldWriter", "qualified_method_name": "com.alibaba.fastjson.asm.FieldWriter.visitEnd", "qualified_signature": "com.alibaba.fastjson.asm.FieldWriter.visitEnd()", "qualified_return_type": "void"}
{"java_doc": "Returns the size of this field.\r\n\r\n@return the size of this field.\r\n", "method_name": "getSize", "return_type": "int", "signature": "getSize()", "body_content": "{\r\n    return 8;\r\n}", "class_name": "FieldWriter", "qualified_method_name": "com.alibaba.fastjson.asm.FieldWriter.getSize", "qualified_signature": "com.alibaba.fastjson.asm.FieldWriter.getSize()", "qualified_return_type": "int"}
{"java_doc": "Puts the content of this field into the given byte vector.\r\n\r\n@param out where the content of this field must be put.\r\n", "method_name": "put", "return_type": "void", "signature": "put(ByteVector)", "body_content": "{\r\n    // Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / (ClassWriter.ACC_SYNTHETIC_ATTRIBUTE / Opcodes.ACC_SYNTHETIC));\r\n    final int mask = 393216;\r\n    out.putShort(access & ~mask).putShort(name).putShort(desc);\r\n    int attributeCount = 0;\r\n    out.putShort(attributeCount);\r\n}", "class_name": "FieldWriter", "qualified_method_name": "com.alibaba.fastjson.asm.FieldWriter.put", "qualified_signature": "com.alibaba.fastjson.asm.FieldWriter.put(com.alibaba.fastjson.asm.ByteVector)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "valueOf", "return_type": "Enum<?>", "signature": "valueOf(int)", "body_content": "{\r\n    return values[ordinal];\r\n}", "class_name": "EnumDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.EnumDeserializer.valueOf", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.EnumDeserializer.valueOf(int)", "qualified_return_type": "java.lang.Enum<?>"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    try {\r\n        Object value;\r\n        final JSONLexer lexer = parser.lexer;\r\n        final int token = lexer.token();\r\n        if (token == JSONToken.LITERAL_INT) {\r\n            int intValue = lexer.intValue();\r\n            lexer.nextToken(JSONToken.COMMA);\r\n            if (intValue < 0 || intValue > values.length) {\r\n                throw new JSONException(\"parse enum \" + enumClass.getName() + \" error, value : \" + intValue);\r\n            }\r\n            return (T) values[intValue];\r\n        } else if (token == JSONToken.LITERAL_STRING) {\r\n            String strVal = lexer.stringVal();\r\n            lexer.nextToken(JSONToken.COMMA);\r\n            if (strVal.length() == 0) {\r\n                return (T) null;\r\n            }\r\n            return (T) Enum.valueOf((Class<Enum>) enumClass, strVal);\r\n        } else if (token == JSONToken.NULL) {\r\n            value = null;\r\n            lexer.nextToken(JSONToken.COMMA);\r\n            return null;\r\n        } else {\r\n            value = parser.parse();\r\n        }\r\n        throw new JSONException(\"parse enum \" + enumClass.getName() + \" error, value : \" + value);\r\n    } catch (JSONException e) {\r\n        throw e;\r\n    } catch (Exception e) {\r\n        throw new JSONException(e.getMessage(), e);\r\n    }\r\n}", "class_name": "EnumDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.EnumDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.EnumDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_INT;\r\n}", "class_name": "EnumDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.EnumDeserializer.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.EnumDeserializer.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "writePrefix", "return_type": "void", "signature": "writePrefix(JSONSerializer)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (out.quoteFieldNames) {\r\n        if (out.useSingleQuotes) {\r\n            if (single_quoted_fieldPrefix == null) {\r\n                single_quoted_fieldPrefix = '\\'' + fieldInfo.name + \"\\':\";\r\n            }\r\n            out.write(single_quoted_fieldPrefix);\r\n        } else {\r\n            out.write(double_quoted_fieldPrefix);\r\n        }\r\n    } else {\r\n        if (un_quoted_fieldPrefix == null) {\r\n            this.un_quoted_fieldPrefix = fieldInfo.name + \":\";\r\n        }\r\n        out.write(un_quoted_fieldPrefix);\r\n    }\r\n}", "class_name": "FieldSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.FieldSerializer.writePrefix", "qualified_signature": "com.alibaba.fastjson.serializer.FieldSerializer.writePrefix(com.alibaba.fastjson.serializer.JSONSerializer)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getPropertyValue", "return_type": "Object", "signature": "getPropertyValue(Object)", "body_content": "{\r\n    return fieldInfo.get(object);\r\n}", "class_name": "FieldSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.FieldSerializer.getPropertyValue", "qualified_signature": "com.alibaba.fastjson.serializer.FieldSerializer.getPropertyValue(java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "compareTo", "return_type": "int", "signature": "compareTo(FieldSerializer)", "body_content": "{\r\n    return this.fieldInfo.compareTo(o.fieldInfo);\r\n}", "class_name": "FieldSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.FieldSerializer.compareTo", "qualified_signature": "com.alibaba.fastjson.serializer.FieldSerializer.compareTo(com.alibaba.fastjson.serializer.FieldSerializer)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "writeValue", "return_type": "void", "signature": "writeValue(JSONSerializer, Object)", "body_content": "{\r\n    if (runtimeInfo == null) {\r\n        Class<?> runtimeFieldClass;\r\n        if (propertyValue == null) {\r\n            runtimeFieldClass = this.fieldInfo.fieldClass;\r\n        } else {\r\n            runtimeFieldClass = propertyValue.getClass();\r\n        }\r\n        ObjectSerializer fieldSerializer;\r\n        JSONField fieldAnnotation = fieldInfo.getAnnotation();\r\n        if (fieldAnnotation != null && fieldAnnotation.serializeUsing() != Void.class) {\r\n            fieldSerializer = (ObjectSerializer) fieldAnnotation.serializeUsing().newInstance();\r\n        } else {\r\n            fieldSerializer = serializer.getObjectWriter(runtimeFieldClass);\r\n        }\r\n        runtimeInfo = new RuntimeSerializerInfo(fieldSerializer, runtimeFieldClass);\r\n    }\r\n    final RuntimeSerializerInfo runtimeInfo = this.runtimeInfo;\r\n    final int fieldFeatures = fieldInfo.serialzeFeatures;\r\n    if (propertyValue == null) {\r\n        Class<?> runtimeFieldClass = runtimeInfo.runtimeFieldClass;\r\n        SerializeWriter out = serializer.out;\r\n        if (Number.class.isAssignableFrom(runtimeFieldClass)) {\r\n            out.writeNull(features, SerializerFeature.WriteNullNumberAsZero.mask);\r\n            return;\r\n        } else if (String.class == runtimeFieldClass) {\r\n            out.writeNull(features, SerializerFeature.WriteNullStringAsEmpty.mask);\r\n            return;\r\n        } else if (Boolean.class == runtimeFieldClass) {\r\n            out.writeNull(features, SerializerFeature.WriteNullBooleanAsFalse.mask);\r\n            return;\r\n        } else if (Collection.class.isAssignableFrom(runtimeFieldClass)) {\r\n            out.writeNull(features, SerializerFeature.WriteNullListAsEmpty.mask);\r\n            return;\r\n        }\r\n        ObjectSerializer fieldSerializer = runtimeInfo.fieldSerializer;\r\n        if ((out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)) && fieldSerializer instanceof JavaBeanSerializer) {\r\n            out.writeNull();\r\n            return;\r\n        }\r\n        fieldSerializer.write(serializer, null, fieldInfo.name, fieldInfo.fieldType, fieldFeatures);\r\n        return;\r\n    }\r\n    if (fieldInfo.isEnum) {\r\n        if (writeEnumUsingName) {\r\n            serializer.out.writeString(((Enum<?>) propertyValue).name());\r\n            return;\r\n        }\r\n        if (writeEnumUsingToString) {\r\n            serializer.out.writeString(((Enum<?>) propertyValue).toString());\r\n            return;\r\n        }\r\n    }\r\n    Class<?> valueClass = propertyValue.getClass();\r\n    ObjectSerializer valueSerializer;\r\n    if (valueClass == runtimeInfo.runtimeFieldClass) {\r\n        valueSerializer = runtimeInfo.fieldSerializer;\r\n    } else {\r\n        valueSerializer = serializer.getObjectWriter(valueClass);\r\n    }\r\n    if (format != null) {\r\n        if (valueSerializer instanceof ContextObjectSerializer) {\r\n            ((ContextObjectSerializer) valueSerializer).write(serializer, propertyValue, this.fieldContext);\r\n        } else {\r\n            serializer.writeWithFormat(propertyValue, format);\r\n        }\r\n    } else {\r\n        valueSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures);\r\n    }\r\n}", "class_name": "FieldSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.FieldSerializer.writeValue", "qualified_signature": "com.alibaba.fastjson.serializer.FieldSerializer.writeValue(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "write to json\r\n\r\n@param serializer json seriliazer\r\n@param fieldName field name\r\n@param fieldType field type\r\n@param features field features\r\n@throws IOException\r\n", "method_name": "// \r\nwrite", "return_type": "// \r\nvoid", "signature": "write(JSONSerializer, Object, Type, int)", "body_content": "", "class_name": "JSONSerializable", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializable.write", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializable.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "\r\n@return the fastJsonConfig.\r\n@since 1.2.11\r\n", "method_name": "getFastJsonConfig", "return_type": "FastJsonConfig", "signature": "getFastJsonConfig()", "body_content": "{\r\n    return fastJsonConfig;\r\n}", "class_name": "FastJsonHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4.getFastJsonConfig", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4.getFastJsonConfig()", "qualified_return_type": "com.alibaba.fastjson.support.config.FastJsonConfig"}
{"java_doc": "\r\n@param fastJsonConfig the fastJsonConfig to set.\r\n@since 1.2.11\r\n", "method_name": "setFastJsonConfig", "return_type": "void", "signature": "setFastJsonConfig(FastJsonConfig)", "body_content": "{\r\n    this.fastJsonConfig = fastJsonConfig;\r\n}", "class_name": "FastJsonHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4.setFastJsonConfig", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4.setFastJsonConfig(com.alibaba.fastjson.support.config.FastJsonConfig)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "supports", "return_type": "boolean", "signature": "supports(Class)", "body_content": "{\r\n    return true;\r\n}", "class_name": "FastJsonHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4.supports", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4.supports(java.lang.Class<?>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "// \r\nread", "return_type": "// \r\nObject", "signature": "read(Type, Class, HttpInputMessage)", "body_content": "{\r\n    InputStream in = inputMessage.getBody();\r\n    return JSON.parseObject(in, fastJsonConfig.getCharset(), type, fastJsonConfig.getFeatures());\r\n}", "class_name": "FastJsonHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4.read", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4.read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "// \r\nwriteInternal", "return_type": "// \r\nvoid", "signature": "writeInternal(Object, Type, HttpOutputMessage)", "body_content": "{\r\n    HttpHeaders headers = outputMessage.getHeaders();\r\n    ByteArrayOutputStream outnew = new ByteArrayOutputStream();\r\n    int len = // \r\n    JSON.// \r\n    writeJSONString(// \r\n    outnew, // \r\n    fastJsonConfig.getCharset(), // \r\n    obj, // \r\n    fastJsonConfig.getSerializeConfig(), // \r\n    fastJsonConfig.getSerializeFilters(), // \r\n    fastJsonConfig.getDateFormat(), // \r\n    JSON.DEFAULT_GENERATE_FEATURE, fastJsonConfig.getSerializerFeatures());\r\n    headers.setContentLength(len);\r\n    OutputStream out = outputMessage.getBody();\r\n    outnew.writeTo(out);\r\n    outnew.close();\r\n}", "class_name": "FastJsonHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4.writeInternal", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4.writeInternal(java.lang.Object, java.lang.reflect.Type, org.springframework.http.HttpOutputMessage)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "// \r\nreadInternal", "return_type": "// \r\nObject", "signature": "readInternal(Class, HttpInputMessage)", "body_content": "{\r\n    InputStream in = inputMessage.getBody();\r\n    return JSON.parseObject(in, fastJsonConfig.getCharset(), clazz, fastJsonConfig.getFeatures());\r\n}", "class_name": "FastJsonHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4.readInternal", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4.readInternal(java.lang.Class<? extends java.lang.Object>, org.springframework.http.HttpInputMessage)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "// \r\nwrite", "return_type": "// \r\nvoid", "signature": "write(JSONSerializer, Object, BeanContext)", "body_content": "", "class_name": "ContextObjectSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.ContextObjectSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.ContextObjectSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, com.alibaba.fastjson.serializer.BeanContext)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "support", "return_type": "boolean", "signature": "support(Class)", "body_content": "{\r\n    return // \r\n    clazz == Point.class || // \r\n    clazz == Rectangle.class || // \r\n    clazz == Font.class || // \r\n    clazz == Color.class;\r\n}", "class_name": "AwtCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.AwtCodec.support", "qualified_signature": "com.alibaba.fastjson.serializer.AwtCodec.support(java.lang.Class<?>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull();\r\n        return;\r\n    }\r\n    char sep = '{';\r\n    if (object instanceof Point) {\r\n        Point font = (Point) object;\r\n        sep = writeClassName(out, Point.class, sep);\r\n        out.writeFieldValue(sep, \"x\", font.x);\r\n        out.writeFieldValue(',', \"y\", font.y);\r\n    } else if (object instanceof Font) {\r\n        Font font = (Font) object;\r\n        sep = writeClassName(out, Font.class, sep);\r\n        out.writeFieldValue(sep, \"name\", font.getName());\r\n        out.writeFieldValue(',', \"style\", font.getStyle());\r\n        out.writeFieldValue(',', \"size\", font.getSize());\r\n    } else if (object instanceof Rectangle) {\r\n        Rectangle rectangle = (Rectangle) object;\r\n        sep = writeClassName(out, Rectangle.class, sep);\r\n        out.writeFieldValue(sep, \"x\", rectangle.x);\r\n        out.writeFieldValue(',', \"y\", rectangle.y);\r\n        out.writeFieldValue(',', \"width\", rectangle.width);\r\n        out.writeFieldValue(',', \"height\", rectangle.height);\r\n    } else if (object instanceof Color) {\r\n        Color color = (Color) object;\r\n        sep = writeClassName(out, Color.class, sep);\r\n        out.writeFieldValue(sep, \"r\", color.getRed());\r\n        out.writeFieldValue(',', \"g\", color.getGreen());\r\n        out.writeFieldValue(',', \"b\", color.getBlue());\r\n        if (color.getAlpha() > 0) {\r\n            out.writeFieldValue(',', \"alpha\", color.getAlpha());\r\n        }\r\n    } else {\r\n        throw new JSONException(\"not support awt class : \" + object.getClass().getName());\r\n    }\r\n    out.write('}');\r\n}", "class_name": "AwtCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.AwtCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.AwtCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeClassName", "return_type": "char", "signature": "writeClassName(SerializeWriter, Class, char)", "body_content": "{\r\n    if (out.isEnabled(SerializerFeature.WriteClassName)) {\r\n        out.write('{');\r\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\r\n        out.writeString(clazz.getName());\r\n        sep = ',';\r\n    }\r\n    return sep;\r\n}", "class_name": "AwtCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.AwtCodec.writeClassName", "qualified_signature": "com.alibaba.fastjson.serializer.AwtCodec.writeClassName(com.alibaba.fastjson.serializer.SerializeWriter, java.lang.Class<?>, char)", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.NULL) {\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return null;\r\n    }\r\n    if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\r\n        throw new JSONException(\"syntax error\");\r\n    }\r\n    lexer.nextToken();\r\n    T obj;\r\n    if (type == Point.class) {\r\n        obj = (T) parsePoint(parser, fieldName);\r\n    } else if (type == Rectangle.class) {\r\n        obj = (T) parseRectangle(parser);\r\n    } else if (type == Color.class) {\r\n        obj = (T) parseColor(parser);\r\n    } else if (type == Font.class) {\r\n        obj = (T) parseFont(parser);\r\n    } else {\r\n        throw new JSONException(\"not support awt class : \" + type);\r\n    }\r\n    ParseContext context = parser.getContext();\r\n    parser.setContext(obj, fieldName);\r\n    parser.setContext(context);\r\n    return obj;\r\n}", "class_name": "AwtCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.AwtCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.AwtCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseFont", "return_type": "Font", "signature": "parseFont(DefaultJSONParser)", "body_content": "{\r\n    JSONLexer lexer = parser.lexer;\r\n    int size = 0, style = 0;\r\n    String name = null;\r\n    for (; ; ) {\r\n        if (lexer.token() == JSONToken.RBRACE) {\r\n            lexer.nextToken();\r\n            break;\r\n        }\r\n        String key;\r\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n            key = lexer.stringVal();\r\n            lexer.nextTokenWithColon(JSONToken.LITERAL_INT);\r\n        } else {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        if (key.equalsIgnoreCase(\"name\")) {\r\n            if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                name = lexer.stringVal();\r\n                lexer.nextToken();\r\n            } else {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n        } else if (key.equalsIgnoreCase(\"style\")) {\r\n            if (lexer.token() == JSONToken.LITERAL_INT) {\r\n                style = lexer.intValue();\r\n                lexer.nextToken();\r\n            } else {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n        } else if (key.equalsIgnoreCase(\"size\")) {\r\n            if (lexer.token() == JSONToken.LITERAL_INT) {\r\n                size = lexer.intValue();\r\n                lexer.nextToken();\r\n            } else {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n        } else {\r\n            throw new JSONException(\"syntax error, \" + key);\r\n        }\r\n        if (lexer.token() == JSONToken.COMMA) {\r\n            lexer.nextToken(JSONToken.LITERAL_STRING);\r\n        }\r\n    }\r\n    return new Font(name, style, size);\r\n}", "class_name": "AwtCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.AwtCodec.parseFont", "qualified_signature": "com.alibaba.fastjson.serializer.AwtCodec.parseFont(com.alibaba.fastjson.parser.DefaultJSONParser)", "qualified_return_type": "java.awt.Font"}
{"java_doc": "", "method_name": "parseColor", "return_type": "Color", "signature": "parseColor(DefaultJSONParser)", "body_content": "{\r\n    JSONLexer lexer = parser.lexer;\r\n    int r = 0, g = 0, b = 0, alpha = 0;\r\n    for (; ; ) {\r\n        if (lexer.token() == JSONToken.RBRACE) {\r\n            lexer.nextToken();\r\n            break;\r\n        }\r\n        String key;\r\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n            key = lexer.stringVal();\r\n            lexer.nextTokenWithColon(JSONToken.LITERAL_INT);\r\n        } else {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        int val;\r\n        if (lexer.token() == JSONToken.LITERAL_INT) {\r\n            val = lexer.intValue();\r\n            lexer.nextToken();\r\n        } else {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        if (key.equalsIgnoreCase(\"r\")) {\r\n            r = val;\r\n        } else if (key.equalsIgnoreCase(\"g\")) {\r\n            g = val;\r\n        } else if (key.equalsIgnoreCase(\"b\")) {\r\n            b = val;\r\n        } else if (key.equalsIgnoreCase(\"alpha\")) {\r\n            alpha = val;\r\n        } else {\r\n            throw new JSONException(\"syntax error, \" + key);\r\n        }\r\n        if (lexer.token() == JSONToken.COMMA) {\r\n            lexer.nextToken(JSONToken.LITERAL_STRING);\r\n        }\r\n    }\r\n    return new Color(r, g, b, alpha);\r\n}", "class_name": "AwtCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.AwtCodec.parseColor", "qualified_signature": "com.alibaba.fastjson.serializer.AwtCodec.parseColor(com.alibaba.fastjson.parser.DefaultJSONParser)", "qualified_return_type": "java.awt.Color"}
{"java_doc": "", "method_name": "parseRectangle", "return_type": "Rectangle", "signature": "parseRectangle(DefaultJSONParser)", "body_content": "{\r\n    JSONLexer lexer = parser.lexer;\r\n    int x = 0, y = 0, width = 0, height = 0;\r\n    for (; ; ) {\r\n        if (lexer.token() == JSONToken.RBRACE) {\r\n            lexer.nextToken();\r\n            break;\r\n        }\r\n        String key;\r\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n            key = lexer.stringVal();\r\n            lexer.nextTokenWithColon(JSONToken.LITERAL_INT);\r\n        } else {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        int val;\r\n        int token = lexer.token();\r\n        if (token == JSONToken.LITERAL_INT) {\r\n            val = lexer.intValue();\r\n            lexer.nextToken();\r\n        } else if (token == JSONToken.LITERAL_FLOAT) {\r\n            val = (int) lexer.floatValue();\r\n            lexer.nextToken();\r\n        } else {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        if (key.equalsIgnoreCase(\"x\")) {\r\n            x = val;\r\n        } else if (key.equalsIgnoreCase(\"y\")) {\r\n            y = val;\r\n        } else if (key.equalsIgnoreCase(\"width\")) {\r\n            width = val;\r\n        } else if (key.equalsIgnoreCase(\"height\")) {\r\n            height = val;\r\n        } else {\r\n            throw new JSONException(\"syntax error, \" + key);\r\n        }\r\n        if (lexer.token() == JSONToken.COMMA) {\r\n            lexer.nextToken(JSONToken.LITERAL_STRING);\r\n        }\r\n    }\r\n    return new Rectangle(x, y, width, height);\r\n}", "class_name": "AwtCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.AwtCodec.parseRectangle", "qualified_signature": "com.alibaba.fastjson.serializer.AwtCodec.parseRectangle(com.alibaba.fastjson.parser.DefaultJSONParser)", "qualified_return_type": "java.awt.Rectangle"}
{"java_doc": "", "method_name": "parsePoint", "return_type": "Point", "signature": "parsePoint(DefaultJSONParser, Object)", "body_content": "{\r\n    JSONLexer lexer = parser.lexer;\r\n    int x = 0, y = 0;\r\n    for (; ; ) {\r\n        if (lexer.token() == JSONToken.RBRACE) {\r\n            lexer.nextToken();\r\n            break;\r\n        }\r\n        String key;\r\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n            key = lexer.stringVal();\r\n            if (JSON.DEFAULT_TYPE_KEY.equals(key)) {\r\n                parser.acceptType(\"java.awt.Point\");\r\n                continue;\r\n            }\r\n            if (\"$ref\".equals(key)) {\r\n                return (Point) parseRef(parser, fieldName);\r\n            }\r\n            lexer.nextTokenWithColon(JSONToken.LITERAL_INT);\r\n        } else {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        int token = lexer.token();\r\n        int val;\r\n        if (token == JSONToken.LITERAL_INT) {\r\n            val = lexer.intValue();\r\n            lexer.nextToken();\r\n        } else if (token == JSONToken.LITERAL_FLOAT) {\r\n            val = (int) lexer.floatValue();\r\n            lexer.nextToken();\r\n        } else {\r\n            throw new JSONException(\"syntax error : \" + lexer.tokenName());\r\n        }\r\n        if (key.equalsIgnoreCase(\"x\")) {\r\n            x = val;\r\n        } else if (key.equalsIgnoreCase(\"y\")) {\r\n            y = val;\r\n        } else {\r\n            throw new JSONException(\"syntax error, \" + key);\r\n        }\r\n        if (lexer.token() == JSONToken.COMMA) {\r\n            lexer.nextToken(JSONToken.LITERAL_STRING);\r\n        }\r\n    }\r\n    return new Point(x, y);\r\n}", "class_name": "AwtCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.AwtCodec.parsePoint", "qualified_signature": "com.alibaba.fastjson.serializer.AwtCodec.parsePoint(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.Object)", "qualified_return_type": "java.awt.Point"}
{"java_doc": "", "method_name": "parseRef", "return_type": "Object", "signature": "parseRef(DefaultJSONParser, Object)", "body_content": "{\r\n    JSONLexer lexer = parser.getLexer();\r\n    lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);\r\n    String ref = lexer.stringVal();\r\n    parser.setContext(parser.getContext(), fieldName);\r\n    parser.addResolveTask(new DefaultJSONParser.ResolveTask(parser.getContext(), ref));\r\n    parser.popContext();\r\n    parser.setResolveStatus(DefaultJSONParser.NeedToResolve);\r\n    lexer.nextToken(JSONToken.RBRACE);\r\n    parser.accept(JSONToken.RBRACE);\r\n    return null;\r\n}", "class_name": "AwtCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.AwtCodec.parseRef", "qualified_signature": "com.alibaba.fastjson.serializer.AwtCodec.parseRef(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LBRACE;\r\n}", "class_name": "AwtCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.AwtCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.AwtCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "charAt", "return_type": "char", "signature": "charAt(int)", "body_content": "{\r\n    if (index >= len) {\r\n        return EOI;\r\n    }\r\n    return text.charAt(index);\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.charAt", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.charAt(int)", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "next", "return_type": "char", "signature": "next()", "body_content": "{\r\n    int index = ++bp;\r\n    return ch = (// \r\n    index >= this.len ? // \r\n    EOI : text.charAt(index));\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.next", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.next()", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "copyTo", "return_type": "void", "signature": "copyTo(int, int, char[])", "body_content": "{\r\n    text.getChars(offset, offset + count, dest, 0);\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.copyTo", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.copyTo(int, int, char[])", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "charArrayCompare", "return_type": "boolean", "signature": "charArrayCompare(String, int, char[])", "body_content": "{\r\n    final int destLen = dest.length;\r\n    if (destLen + offset > src.length()) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < destLen; ++i) {\r\n        if (dest[i] != src.charAt(offset + i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.charArrayCompare", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.charArrayCompare(java.lang.String, int, char[])", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "charArrayCompare", "return_type": "boolean", "signature": "charArrayCompare(char[])", "body_content": "{\r\n    return charArrayCompare(text, bp, chars);\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.charArrayCompare", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.charArrayCompare(char[])", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "indexOf", "return_type": "int", "signature": "indexOf(char, int)", "body_content": "{\r\n    return text.indexOf(ch, startIndex);\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.indexOf", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.indexOf(char, int)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "addSymbol", "return_type": "String", "signature": "addSymbol(int, int, int, SymbolTable)", "body_content": "{\r\n    return symbolTable.addSymbol(text, offset, len, hash);\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.addSymbol", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.addSymbol(int, int, int, com.alibaba.fastjson.parser.SymbolTable)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "bytesValue", "return_type": "byte[]", "signature": "bytesValue()", "body_content": "{\r\n    return IOUtils.decodeBase64(text, np + 1, sp);\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.bytesValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.bytesValue()", "qualified_return_type": "byte[]"}
{"java_doc": "The value of a literal token, recorded as a string. For integers, leading 0x and 'l' suffixes are suppressed.\r\n", "method_name": "stringVal", "return_type": "String", "signature": "stringVal()", "body_content": "{\r\n    if (!hasSpecial) {\r\n        // return text.substring(np + 1, np + 1 + sp);\r\n        return this.subString(np + 1, sp);\r\n    } else {\r\n        return new String(sbuf, 0, sp);\r\n    }\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.stringVal", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.stringVal()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "subString", "return_type": "String", "signature": "subString(int, int)", "body_content": "{\r\n    if (ASMUtils.IS_ANDROID) {\r\n        if (count < sbuf.length) {\r\n            text.getChars(offset, offset + count, sbuf, 0);\r\n            return new String(sbuf, 0, count);\r\n        } else {\r\n            char[] chars = new char[count];\r\n            text.getChars(offset, offset + count, chars, 0);\r\n            return new String(chars);\r\n        }\r\n    } else {\r\n        return text.substring(offset, offset + count);\r\n    }\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.subString", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.subString(int, int)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "sub_chars", "return_type": "char[]", "signature": "sub_chars(int, int)", "body_content": "{\r\n    if (ASMUtils.IS_ANDROID && count < sbuf.length) {\r\n        text.getChars(offset, offset + count, sbuf, 0);\r\n        return sbuf;\r\n    } else {\r\n        char[] chars = new char[count];\r\n        text.getChars(offset, offset + count, chars, 0);\r\n        return chars;\r\n    }\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.sub_chars", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.sub_chars(int, int)", "qualified_return_type": "char[]"}
{"java_doc": "", "method_name": "numberString", "return_type": "String", "signature": "numberString()", "body_content": "{\r\n    char chLocal = charAt(np + sp - 1);\r\n    int sp = this.sp;\r\n    if (chLocal == 'L' || chLocal == 'S' || chLocal == 'B' || chLocal == 'F' || chLocal == 'D') {\r\n        sp--;\r\n    }\r\n    // return text.substring(np, np + sp);\r\n    return this.subString(np, sp);\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.numberString", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.numberString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "scanISO8601DateIfMatch", "return_type": "boolean", "signature": "scanISO8601DateIfMatch()", "body_content": "{\r\n    return scanISO8601DateIfMatch(true);\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.scanISO8601DateIfMatch", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.scanISO8601DateIfMatch()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "scanISO8601DateIfMatch", "return_type": "boolean", "signature": "scanISO8601DateIfMatch(boolean)", "body_content": "{\r\n    int rest = len - bp;\r\n    if ((!strict) && rest > 13) {\r\n        char c0 = charAt(bp);\r\n        char c1 = charAt(bp + 1);\r\n        char c2 = charAt(bp + 2);\r\n        char c3 = charAt(bp + 3);\r\n        char c4 = charAt(bp + 4);\r\n        char c5 = charAt(bp + 5);\r\n        char c_r0 = charAt(bp + rest - 1);\r\n        char c_r1 = charAt(bp + rest - 2);\r\n        if (c0 == '/' && c1 == 'D' && c2 == 'a' && c3 == 't' && c4 == 'e' && c5 == '(' && c_r0 == '/' && c_r1 == ')') {\r\n            int plusIndex = -1;\r\n            for (int i = 6; i < rest; ++i) {\r\n                char c = charAt(bp + i);\r\n                if (c == '+') {\r\n                    plusIndex = i;\r\n                } else if (c < '0' || c > '9') {\r\n                    break;\r\n                }\r\n            }\r\n            if (plusIndex == -1) {\r\n                return false;\r\n            }\r\n            int offset = bp + 6;\r\n            String numberText = this.subString(offset, plusIndex - offset);\r\n            long millis = Long.parseLong(numberText);\r\n            calendar = Calendar.getInstance(timeZone, locale);\r\n            calendar.setTimeInMillis(millis);\r\n            token = JSONToken.LITERAL_ISO8601_DATE;\r\n            return true;\r\n        }\r\n    }\r\n    if (rest == 8 || rest == 14 || rest == 17) {\r\n        if (strict) {\r\n            return false;\r\n        }\r\n        char y0 = charAt(bp);\r\n        char y1 = charAt(bp + 1);\r\n        char y2 = charAt(bp + 2);\r\n        char y3 = charAt(bp + 3);\r\n        char M0 = charAt(bp + 4);\r\n        char M1 = charAt(bp + 5);\r\n        char d0 = charAt(bp + 6);\r\n        char d1 = charAt(bp + 7);\r\n        if (!checkDate(y0, y1, y2, y3, M0, M1, d0, d1)) {\r\n            return false;\r\n        }\r\n        setCalendar(y0, y1, y2, y3, M0, M1, d0, d1);\r\n        int hour, minute, seconds, millis;\r\n        if (rest != 8) {\r\n            char h0 = charAt(bp + 8);\r\n            char h1 = charAt(bp + 9);\r\n            char m0 = charAt(bp + 10);\r\n            char m1 = charAt(bp + 11);\r\n            char s0 = charAt(bp + 12);\r\n            char s1 = charAt(bp + 13);\r\n            if (!checkTime(h0, h1, m0, m1, s0, s1)) {\r\n                return false;\r\n            }\r\n            if (rest == 17) {\r\n                char S0 = charAt(bp + 14);\r\n                char S1 = charAt(bp + 15);\r\n                char S2 = charAt(bp + 16);\r\n                if (S0 < '0' || S0 > '9') {\r\n                    return false;\r\n                }\r\n                if (S1 < '0' || S1 > '9') {\r\n                    return false;\r\n                }\r\n                if (S2 < '0' || S2 > '9') {\r\n                    return false;\r\n                }\r\n                millis = (S0 - '0') * 100 + (S1 - '0') * 10 + (S2 - '0');\r\n            } else {\r\n                millis = 0;\r\n            }\r\n            hour = (h0 - '0') * 10 + (h1 - '0');\r\n            minute = (m0 - '0') * 10 + (m1 - '0');\r\n            seconds = (s0 - '0') * 10 + (s1 - '0');\r\n        } else {\r\n            hour = 0;\r\n            minute = 0;\r\n            seconds = 0;\r\n            millis = 0;\r\n        }\r\n        calendar.set(Calendar.HOUR_OF_DAY, hour);\r\n        calendar.set(Calendar.MINUTE, minute);\r\n        calendar.set(Calendar.SECOND, seconds);\r\n        calendar.set(Calendar.MILLISECOND, millis);\r\n        token = JSONToken.LITERAL_ISO8601_DATE;\r\n        return true;\r\n    }\r\n    if (rest < 9) {\r\n        return false;\r\n    }\r\n    char c0 = charAt(bp);\r\n    char c1 = charAt(bp + 1);\r\n    char c2 = charAt(bp + 2);\r\n    char c3 = charAt(bp + 3);\r\n    char c4 = charAt(bp + 4);\r\n    char c5 = charAt(bp + 5);\r\n    char c6 = charAt(bp + 6);\r\n    char c7 = charAt(bp + 7);\r\n    char c8 = charAt(bp + 8);\r\n    char c9 = charAt(bp + 9);\r\n    char y0, y1, y2, y3, M0, M1, d0, d1;\r\n    if (// cn\r\n    (c4 == '-' && c7 == '-') || // tw yyyy/mm/dd\r\n    (c4 == '/' && c7 == '/')) {\r\n        y0 = c0;\r\n        y1 = c1;\r\n        y2 = c2;\r\n        y3 = c3;\r\n        M0 = c5;\r\n        M1 = c6;\r\n        d0 = c8;\r\n        d1 = c9;\r\n    } else if (// de dd.mm.yyyy\r\n    (c2 == '.' && c5 == '.') || // in dd-mm-yyyy\r\n    (c2 == '-' && c5 == '-')) {\r\n        d0 = c0;\r\n        d1 = c1;\r\n        M0 = c3;\r\n        M1 = c4;\r\n        y0 = c6;\r\n        y1 = c7;\r\n        y2 = c8;\r\n        y3 = c9;\r\n    } else {\r\n        if (c4 == '年' || c4 == '년') {\r\n            y0 = c0;\r\n            y1 = c1;\r\n            y2 = c2;\r\n            y3 = c3;\r\n            if (c7 == '月' || c7 == '월') {\r\n                M0 = c5;\r\n                M1 = c6;\r\n                if (c9 == '日' || c9 == '일') {\r\n                    d0 = '0';\r\n                    d1 = c8;\r\n                } else if (charAt(bp + 10) == '日' || charAt(bp + 10) == '일') {\r\n                    d0 = c8;\r\n                    d1 = c9;\r\n                } else {\r\n                    return false;\r\n                }\r\n            } else if (c6 == '月' || c6 == '월') {\r\n                M0 = '0';\r\n                M1 = c5;\r\n                if (c8 == '日' || c8 == '일') {\r\n                    d0 = '0';\r\n                    d1 = c7;\r\n                } else if (c9 == '日' || c9 == '일') {\r\n                    d0 = c7;\r\n                    d1 = c8;\r\n                } else {\r\n                    return false;\r\n                }\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    if (!checkDate(y0, y1, y2, y3, M0, M1, d0, d1)) {\r\n        return false;\r\n    }\r\n    setCalendar(y0, y1, y2, y3, M0, M1, d0, d1);\r\n    char t = charAt(bp + 10);\r\n    if (t == 'T' || (t == ' ' && !strict)) {\r\n        if (rest < ISO8601_LEN_1) {\r\n            return false;\r\n        }\r\n    } else if (t == '\"' || t == EOI || t == '日' || t == '일') {\r\n        calendar.set(Calendar.HOUR_OF_DAY, 0);\r\n        calendar.set(Calendar.MINUTE, 0);\r\n        calendar.set(Calendar.SECOND, 0);\r\n        calendar.set(Calendar.MILLISECOND, 0);\r\n        ch = charAt(bp += 10);\r\n        token = JSONToken.LITERAL_ISO8601_DATE;\r\n        return true;\r\n    } else if (t == '+' || t == '-') {\r\n        if (len == 16) {\r\n            if (// \r\n            charAt(bp + 13) != ':' || // \r\n            charAt(bp + 14) != '0' || charAt(bp + 15) != '0') {\r\n                return false;\r\n            }\r\n            setTime('0', '0', '0', '0', '0', '0');\r\n            calendar.set(Calendar.MILLISECOND, 0);\r\n            setTimeZone(t, charAt(bp + 11), charAt(bp + 12));\r\n            return true;\r\n        }\r\n        return false;\r\n    } else {\r\n        return false;\r\n    }\r\n    if (charAt(bp + 13) != ':') {\r\n        return false;\r\n    }\r\n    if (charAt(bp + 16) != ':') {\r\n        return false;\r\n    }\r\n    char h0 = charAt(bp + 11);\r\n    char h1 = charAt(bp + 12);\r\n    char m0 = charAt(bp + 14);\r\n    char m1 = charAt(bp + 15);\r\n    char s0 = charAt(bp + 17);\r\n    char s1 = charAt(bp + 18);\r\n    if (!checkTime(h0, h1, m0, m1, s0, s1)) {\r\n        return false;\r\n    }\r\n    setTime(h0, h1, m0, m1, s0, s1);\r\n    char dot = charAt(bp + 19);\r\n    if (dot == '.') {\r\n        if (rest < ISO8601_LEN_2) {\r\n            return false;\r\n        }\r\n    } else {\r\n        calendar.set(Calendar.MILLISECOND, 0);\r\n        ch = charAt(bp += 19);\r\n        token = JSONToken.LITERAL_ISO8601_DATE;\r\n        if (dot == 'Z') {\r\n            // UTC\r\n            // bugfix https://github.com/alibaba/fastjson/issues/376\r\n            if (calendar.getTimeZone().getRawOffset() != 0) {\r\n                // 没有+ 和 - 默认相对0\r\n                String[] timeZoneIDs = TimeZone.getAvailableIDs(0);\r\n                if (timeZoneIDs.length > 0) {\r\n                    TimeZone timeZone = TimeZone.getTimeZone(timeZoneIDs[0]);\r\n                    calendar.setTimeZone(timeZone);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    char S0 = charAt(bp + 20);\r\n    if (S0 < '0' || S0 > '9') {\r\n        return false;\r\n    }\r\n    int millis = S0 - '0';\r\n    int millisLen = 1;\r\n    {\r\n        char S1 = charAt(bp + 21);\r\n        if (S1 >= '0' && S1 <= '9') {\r\n            millis = millis * 10 + (S1 - '0');\r\n            millisLen = 2;\r\n        }\r\n    }\r\n    if (millisLen == 2) {\r\n        char S2 = charAt(bp + 22);\r\n        if (S2 >= '0' && S2 <= '9') {\r\n            millis = millis * 10 + (S2 - '0');\r\n            millisLen = 3;\r\n        }\r\n    }\r\n    calendar.set(Calendar.MILLISECOND, millis);\r\n    int timzeZoneLength = 0;\r\n    char timeZoneFlag = charAt(bp + 20 + millisLen);\r\n    if (timeZoneFlag == '+' || timeZoneFlag == '-') {\r\n        char t0 = charAt(bp + 20 + millisLen + 1);\r\n        if (t0 < '0' || t0 > '1') {\r\n            return false;\r\n        }\r\n        char t1 = charAt(bp + 20 + millisLen + 2);\r\n        if (t1 < '0' || t1 > '9') {\r\n            return false;\r\n        }\r\n        char t2 = charAt(bp + 20 + millisLen + 3);\r\n        if (t2 == ':') {\r\n            // ThreeLetterISO8601TimeZone\r\n            char t3 = charAt(bp + 20 + millisLen + 4);\r\n            if (t3 != '0') {\r\n                return false;\r\n            }\r\n            char t4 = charAt(bp + 20 + millisLen + 5);\r\n            if (t4 != '0') {\r\n                return false;\r\n            }\r\n            timzeZoneLength = 6;\r\n        } else if (t2 == '0') {\r\n            // TwoLetterISO8601TimeZone\r\n            char t3 = charAt(bp + 20 + millisLen + 4);\r\n            if (t3 != '0') {\r\n                return false;\r\n            }\r\n            timzeZoneLength = 5;\r\n        } else {\r\n            timzeZoneLength = 3;\r\n        }\r\n        setTimeZone(timeZoneFlag, t0, t1);\r\n    } else if (timeZoneFlag == 'Z') {\r\n        // UTC\r\n        timzeZoneLength = 1;\r\n        if (calendar.getTimeZone().getRawOffset() != 0) {\r\n            String[] timeZoneIDs = TimeZone.getAvailableIDs(0);\r\n            if (timeZoneIDs.length > 0) {\r\n                TimeZone timeZone = TimeZone.getTimeZone(timeZoneIDs[0]);\r\n                calendar.setTimeZone(timeZone);\r\n            }\r\n        }\r\n    }\r\n    char end = charAt(bp + (20 + millisLen + timzeZoneLength));\r\n    if (end != EOI && end != '\"') {\r\n        return false;\r\n    }\r\n    ch = charAt(bp += (20 + millisLen + timzeZoneLength));\r\n    token = JSONToken.LITERAL_ISO8601_DATE;\r\n    return true;\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.scanISO8601DateIfMatch", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.scanISO8601DateIfMatch(boolean)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "setTime", "return_type": "void", "signature": "setTime(char, char, char, char, char, char)", "body_content": "{\r\n    int hour = (h0 - '0') * 10 + (h1 - '0');\r\n    int minute = (m0 - '0') * 10 + (m1 - '0');\r\n    int seconds = (s0 - '0') * 10 + (s1 - '0');\r\n    calendar.set(Calendar.HOUR_OF_DAY, hour);\r\n    calendar.set(Calendar.MINUTE, minute);\r\n    calendar.set(Calendar.SECOND, seconds);\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.setTime", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.setTime(char, char, char, char, char, char)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setTimeZone", "return_type": "void", "signature": "setTimeZone(char, char, char)", "body_content": "{\r\n    int timeZoneOffset = ((t0 - '0') * 10 + (t1 - '0')) * 3600 * 1000;\r\n    if (timeZoneFlag == '-') {\r\n        timeZoneOffset = -timeZoneOffset;\r\n    }\r\n    if (calendar.getTimeZone().getRawOffset() != timeZoneOffset) {\r\n        String[] timeZoneIDs = TimeZone.getAvailableIDs(timeZoneOffset);\r\n        if (timeZoneIDs.length > 0) {\r\n            TimeZone timeZone = TimeZone.getTimeZone(timeZoneIDs[0]);\r\n            calendar.setTimeZone(timeZone);\r\n        }\r\n    }\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.setTimeZone", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.setTimeZone(char, char, char)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "checkTime", "return_type": "boolean", "signature": "checkTime(char, char, char, char, char, char)", "body_content": "{\r\n    if (h0 == '0') {\r\n        if (h1 < '0' || h1 > '9') {\r\n            return false;\r\n        }\r\n    } else if (h0 == '1') {\r\n        if (h1 < '0' || h1 > '9') {\r\n            return false;\r\n        }\r\n    } else if (h0 == '2') {\r\n        if (h1 < '0' || h1 > '4') {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    if (m0 >= '0' && m0 <= '5') {\r\n        if (m1 < '0' || m1 > '9') {\r\n            return false;\r\n        }\r\n    } else if (m0 == '6') {\r\n        if (m1 != '0') {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    if (s0 >= '0' && s0 <= '5') {\r\n        if (s1 < '0' || s1 > '9') {\r\n            return false;\r\n        }\r\n    } else if (s0 == '6') {\r\n        if (s1 != '0') {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    return true;\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.checkTime", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.checkTime(char, char, char, char, char, char)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "setCalendar", "return_type": "void", "signature": "setCalendar(char, char, char, char, char, char, char, char)", "body_content": "{\r\n    calendar = Calendar.getInstance(timeZone, locale);\r\n    int year = (y0 - '0') * 1000 + (y1 - '0') * 100 + (y2 - '0') * 10 + (y3 - '0');\r\n    int month = (M0 - '0') * 10 + (M1 - '0') - 1;\r\n    int day = (d0 - '0') * 10 + (d1 - '0');\r\n    calendar.set(Calendar.YEAR, year);\r\n    calendar.set(Calendar.MONTH, month);\r\n    calendar.set(Calendar.DAY_OF_MONTH, day);\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.setCalendar", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.setCalendar(char, char, char, char, char, char, char, char)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "checkDate", "return_type": "boolean", "signature": "checkDate(char, char, char, char, char, char, int, int)", "body_content": "{\r\n    if (y0 != '1' && y0 != '2') {\r\n        return false;\r\n    }\r\n    if (y1 < '0' || y1 > '9') {\r\n        return false;\r\n    }\r\n    if (y2 < '0' || y2 > '9') {\r\n        return false;\r\n    }\r\n    if (y3 < '0' || y3 > '9') {\r\n        return false;\r\n    }\r\n    if (M0 == '0') {\r\n        if (M1 < '1' || M1 > '9') {\r\n            return false;\r\n        }\r\n    } else if (M0 == '1') {\r\n        if (M1 != '0' && M1 != '1' && M1 != '2') {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    if (d0 == '0') {\r\n        if (d1 < '1' || d1 > '9') {\r\n            return false;\r\n        }\r\n    } else if (d0 == '1' || d0 == '2') {\r\n        if (d1 < '0' || d1 > '9') {\r\n            return false;\r\n        }\r\n    } else if (d0 == '3') {\r\n        if (d1 != '0' && d1 != '1') {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    return true;\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.checkDate", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.checkDate(char, char, char, char, char, char, int, int)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isEOF", "return_type": "boolean", "signature": "isEOF()", "body_content": "{\r\n    return bp == len || ch == EOI && bp + 1 == len;\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.isEOF", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.isEOF()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "scanFieldInt", "return_type": "int", "signature": "scanFieldInt(char[])", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    int startPos = this.bp;\r\n    char startChar = this.ch;\r\n    if (!charArrayCompare(text, bp, fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return 0;\r\n    }\r\n    int index = bp + fieldName.length;\r\n    char ch = charAt(index++);\r\n    boolean negative = false;\r\n    if (ch == '-') {\r\n        ch = charAt(index++);\r\n        negative = true;\r\n    }\r\n    int value;\r\n    if (ch >= '0' && ch <= '9') {\r\n        value = ch - '0';\r\n        for (; ; ) {\r\n            ch = charAt(index++);\r\n            if (ch >= '0' && ch <= '9') {\r\n                value = value * 10 + (ch - '0');\r\n            } else if (ch == '.') {\r\n                matchStat = NOT_MATCH;\r\n                return 0;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (value < 0) {\r\n            matchStat = NOT_MATCH;\r\n            return 0;\r\n        }\r\n        if (ch == ',' || ch == '}') {\r\n            bp = index - 1;\r\n        }\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    if (ch == ',') {\r\n        this.ch = charAt(++bp);\r\n        matchStat = VALUE;\r\n        token = JSONToken.COMMA;\r\n        return negative ? -value : value;\r\n    }\r\n    if (ch == '}') {\r\n        ch = charAt(++bp);\r\n        if (ch == ',') {\r\n            token = JSONToken.COMMA;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == '}') {\r\n            token = JSONToken.RBRACE;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == EOI) {\r\n            token = JSONToken.EOF;\r\n        } else {\r\n            this.bp = startPos;\r\n            this.ch = startChar;\r\n            matchStat = NOT_MATCH;\r\n            return 0;\r\n        }\r\n        matchStat = END;\r\n    }\r\n    return negative ? -value : value;\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.scanFieldInt", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.scanFieldInt(char[])", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "scanFieldString", "return_type": "String", "signature": "scanFieldString(char[])", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    int startPos = this.bp;\r\n    char startChar = this.ch;\r\n    if (!charArrayCompare(text, bp, fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return stringDefaultValue();\r\n    }\r\n    int index = bp + fieldName.length;\r\n    char ch = charAt(index++);\r\n    if (ch != '\"') {\r\n        matchStat = NOT_MATCH;\r\n        return stringDefaultValue();\r\n    }\r\n    final String strVal;\r\n    {\r\n        int startIndex = index;\r\n        int endIndex = indexOf('\"', startIndex);\r\n        if (endIndex == -1) {\r\n            throw new JSONException(\"unclosed str\");\r\n        }\r\n        String stringVal = subString(startIndex, endIndex - startIndex);\r\n        if (stringVal.indexOf('\\\\') != -1) {\r\n            for (; ; ) {\r\n                int slashCount = 0;\r\n                for (int i = endIndex - 1; i >= 0; --i) {\r\n                    if (charAt(i) == '\\\\') {\r\n                        slashCount++;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n                if (slashCount % 2 == 0) {\r\n                    break;\r\n                }\r\n                endIndex = indexOf('\"', endIndex + 1);\r\n            }\r\n            int chars_len = endIndex - (bp + fieldName.length + 1);\r\n            char[] chars = sub_chars(bp + fieldName.length + 1, chars_len);\r\n            stringVal = readString(chars, chars_len);\r\n        }\r\n        ch = charAt(endIndex + 1);\r\n        if (ch == ',' || ch == '}') {\r\n            bp = endIndex + 1;\r\n            this.ch = ch;\r\n            strVal = stringVal;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return stringDefaultValue();\r\n        }\r\n    }\r\n    if (ch == ',') {\r\n        this.ch = charAt(++bp);\r\n        matchStat = VALUE;\r\n        return strVal;\r\n    } else if (ch == '}') {\r\n        ch = charAt(++bp);\r\n        if (ch == ',') {\r\n            token = JSONToken.COMMA;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == '}') {\r\n            token = JSONToken.RBRACE;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == EOI) {\r\n            token = JSONToken.EOF;\r\n        } else {\r\n            this.bp = startPos;\r\n            this.ch = startChar;\r\n            matchStat = NOT_MATCH;\r\n            return stringDefaultValue();\r\n        }\r\n        matchStat = END;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return stringDefaultValue();\r\n    }\r\n    return strVal;\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.scanFieldString", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.scanFieldString(char[])", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "scanFieldSymbol", "return_type": "String", "signature": "scanFieldSymbol(char[], SymbolTable)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    if (!charArrayCompare(text, bp, fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return null;\r\n    }\r\n    int index = bp + fieldName.length;\r\n    char ch = charAt(index++);\r\n    if (ch != '\"') {\r\n        matchStat = NOT_MATCH;\r\n        return null;\r\n    }\r\n    String strVal;\r\n    int start = index;\r\n    int hash = 0;\r\n    for (; ; ) {\r\n        ch = charAt(index++);\r\n        if (ch == '\\\"') {\r\n            bp = index;\r\n            this.ch = ch = charAt(bp);\r\n            // strVal = text.substring(start, index - 1).intern();\r\n            strVal = symbolTable.addSymbol(text, start, index - start - 1, hash);\r\n            break;\r\n        }\r\n        hash = 31 * hash + ch;\r\n        if (ch == '\\\\') {\r\n            matchStat = NOT_MATCH;\r\n            return null;\r\n        }\r\n    }\r\n    if (ch == ',') {\r\n        this.ch = charAt(++bp);\r\n        matchStat = VALUE;\r\n        return strVal;\r\n    } else if (ch == '}') {\r\n        ch = charAt(++bp);\r\n        if (ch == ',') {\r\n            token = JSONToken.COMMA;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == '}') {\r\n            token = JSONToken.RBRACE;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == EOI) {\r\n            token = JSONToken.EOF;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return null;\r\n        }\r\n        matchStat = END;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return null;\r\n    }\r\n    return strVal;\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.scanFieldSymbol", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.scanFieldSymbol(char[], com.alibaba.fastjson.parser.SymbolTable)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "scanFieldStringArray", "return_type": "Collection<String>", "signature": "scanFieldStringArray(char[], Class)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    if (!charArrayCompare(text, bp, fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return null;\r\n    }\r\n    Collection<String> list;\r\n    if (type.isAssignableFrom(HashSet.class)) {\r\n        list = new HashSet<String>();\r\n    } else if (type.isAssignableFrom(ArrayList.class)) {\r\n        list = new ArrayList<String>();\r\n    } else {\r\n        try {\r\n            list = (Collection<String>) type.newInstance();\r\n        } catch (Exception e) {\r\n            throw new JSONException(e.getMessage(), e);\r\n        }\r\n    }\r\n    int index = bp + fieldName.length;\r\n    char ch = charAt(index++);\r\n    if (ch == '[') {\r\n        ch = charAt(index++);\r\n        for (; ; ) {\r\n            if (ch == '\"') {\r\n                int startIndex = index;\r\n                int endIndex = indexOf('\"', startIndex);\r\n                if (endIndex == -1) {\r\n                    throw new JSONException(\"unclosed str\");\r\n                }\r\n                String stringVal = subString(startIndex, endIndex - startIndex);\r\n                if (stringVal.indexOf('\\\\') != -1) {\r\n                    for (; ; ) {\r\n                        int slashCount = 0;\r\n                        for (int i = endIndex - 1; i >= 0; --i) {\r\n                            if (charAt(i) == '\\\\') {\r\n                                slashCount++;\r\n                            } else {\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (slashCount % 2 == 0) {\r\n                            break;\r\n                        }\r\n                        endIndex = indexOf('\"', endIndex + 1);\r\n                    }\r\n                    int chars_len = endIndex - startIndex;\r\n                    char[] chars = sub_chars(startIndex, chars_len);\r\n                    stringVal = readString(chars, chars_len);\r\n                }\r\n                index = endIndex + 1;\r\n                ch = charAt(index++);\r\n                list.add(stringVal);\r\n            } else if (ch == 'n' && text.startsWith(\"ull\", index)) {\r\n                index += 3;\r\n                ch = charAt(index++);\r\n                list.add(null);\r\n            } else if (ch == ']' && list.size() == 0) {\r\n                ch = charAt(index++);\r\n                break;\r\n            } else {\r\n                matchStat = NOT_MATCH;\r\n                return null;\r\n            }\r\n            if (ch == ',') {\r\n                ch = charAt(index++);\r\n                continue;\r\n            }\r\n            if (ch == ']') {\r\n                ch = charAt(index++);\r\n                while (isWhitespace(ch)) {\r\n                    ch = charAt(index++);\r\n                }\r\n                break;\r\n            }\r\n            matchStat = NOT_MATCH;\r\n            return null;\r\n        }\r\n    } else if (text.startsWith(\"ull\", index)) {\r\n        index += 3;\r\n        ch = charAt(index++);\r\n        list = null;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return null;\r\n    }\r\n    bp = index;\r\n    if (ch == ',') {\r\n        this.ch = charAt(bp);\r\n        matchStat = VALUE;\r\n        return list;\r\n    } else if (ch == '}') {\r\n        ch = charAt(bp);\r\n        for (; ; ) {\r\n            if (ch == ',') {\r\n                token = JSONToken.COMMA;\r\n                this.ch = charAt(++bp);\r\n                break;\r\n            } else if (ch == ']') {\r\n                token = JSONToken.RBRACKET;\r\n                this.ch = charAt(++bp);\r\n                break;\r\n            } else if (ch == '}') {\r\n                token = JSONToken.RBRACE;\r\n                this.ch = charAt(++bp);\r\n                break;\r\n            } else if (ch == EOI) {\r\n                token = JSONToken.EOF;\r\n                this.ch = ch;\r\n                break;\r\n            } else {\r\n                boolean space = false;\r\n                while (isWhitespace(ch)) {\r\n                    ch = charAt(index++);\r\n                    bp = index;\r\n                    space = true;\r\n                }\r\n                if (space) {\r\n                    continue;\r\n                }\r\n                matchStat = NOT_MATCH;\r\n                return null;\r\n            }\r\n        }\r\n        matchStat = END;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return null;\r\n    }\r\n    return list;\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.scanFieldStringArray", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.scanFieldStringArray(char[], java.lang.Class<?>)", "qualified_return_type": "java.util.Collection<java.lang.String>"}
{"java_doc": "", "method_name": "scanFieldLong", "return_type": "long", "signature": "scanFieldLong(char[])", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    int startPos = this.bp;\r\n    char startChar = this.ch;\r\n    if (!charArrayCompare(text, bp, fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return 0;\r\n    }\r\n    int index = bp + fieldName.length;\r\n    char ch = charAt(index++);\r\n    boolean negative = false;\r\n    if (ch == '-') {\r\n        ch = charAt(index++);\r\n        negative = true;\r\n    }\r\n    long value;\r\n    if (ch >= '0' && ch <= '9') {\r\n        value = ch - '0';\r\n        for (; ; ) {\r\n            ch = charAt(index++);\r\n            if (ch >= '0' && ch <= '9') {\r\n                value = value * 10 + (ch - '0');\r\n            } else if (ch == '.') {\r\n                matchStat = NOT_MATCH;\r\n                return 0;\r\n            } else {\r\n                if (ch == ',' || ch == '}') {\r\n                    bp = index - 1;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if (value < 0) {\r\n            this.bp = startPos;\r\n            this.ch = startChar;\r\n            matchStat = NOT_MATCH;\r\n            return 0;\r\n        }\r\n    } else {\r\n        this.bp = startPos;\r\n        this.ch = startChar;\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    if (ch == ',') {\r\n        this.ch = charAt(++bp);\r\n        matchStat = VALUE;\r\n        token = JSONToken.COMMA;\r\n        return negative ? -value : value;\r\n    } else if (ch == '}') {\r\n        ch = charAt(++bp);\r\n        if (ch == ',') {\r\n            token = JSONToken.COMMA;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == '}') {\r\n            token = JSONToken.RBRACE;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == EOI) {\r\n            token = JSONToken.EOF;\r\n        } else {\r\n            this.bp = startPos;\r\n            this.ch = startChar;\r\n            matchStat = NOT_MATCH;\r\n            return 0;\r\n        }\r\n        matchStat = END;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    return negative ? -value : value;\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.scanFieldLong", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.scanFieldLong(char[])", "qualified_return_type": "long"}
{"java_doc": "", "method_name": "scanFieldBoolean", "return_type": "boolean", "signature": "scanFieldBoolean(char[])", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    if (!charArrayCompare(text, bp, fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return false;\r\n    }\r\n    int index = bp + fieldName.length;\r\n    char ch = charAt(index++);\r\n    boolean value;\r\n    if (ch == 't') {\r\n        if (charAt(index++) != 'r') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        if (charAt(index++) != 'u') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        if (charAt(index++) != 'e') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        bp = index;\r\n        ch = charAt(bp);\r\n        value = true;\r\n    } else if (ch == 'f') {\r\n        if (charAt(index++) != 'a') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        if (charAt(index++) != 'l') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        if (charAt(index++) != 's') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        if (charAt(index++) != 'e') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        bp = index;\r\n        ch = charAt(bp);\r\n        value = false;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return false;\r\n    }\r\n    if (ch == ',') {\r\n        this.ch = charAt(++bp);\r\n        matchStat = VALUE;\r\n        token = JSONToken.COMMA;\r\n    } else if (ch == '}') {\r\n        ch = charAt(++bp);\r\n        if (ch == ',') {\r\n            token = JSONToken.COMMA;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == '}') {\r\n            token = JSONToken.RBRACE;\r\n            this.ch = charAt(++bp);\r\n        } else if (ch == EOI) {\r\n            token = JSONToken.EOF;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        matchStat = END;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return false;\r\n    }\r\n    return value;\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.scanFieldBoolean", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.scanFieldBoolean(char[])", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "scanInt", "return_type": "int", "signature": "scanInt(char)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    int offset = bp;\r\n    char chLocal = charAt(offset++);\r\n    final boolean negative = chLocal == '-';\r\n    if (negative) {\r\n        chLocal = charAt(offset++);\r\n    }\r\n    int value;\r\n    if (chLocal >= '0' && chLocal <= '9') {\r\n        value = chLocal - '0';\r\n        for (; ; ) {\r\n            chLocal = charAt(offset++);\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                value = value * 10 + (chLocal - '0');\r\n            } else if (chLocal == '.') {\r\n                matchStat = NOT_MATCH;\r\n                return 0;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (value < 0) {\r\n            matchStat = NOT_MATCH;\r\n            return 0;\r\n        }\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    for (; ; ) {\r\n        if (chLocal == expectNext) {\r\n            bp = offset;\r\n            this.ch = charAt(bp);\r\n            matchStat = VALUE;\r\n            token = JSONToken.COMMA;\r\n            return negative ? -value : value;\r\n        } else {\r\n            if (isWhitespace(chLocal)) {\r\n                chLocal = charAt(offset++);\r\n                continue;\r\n            }\r\n            matchStat = NOT_MATCH;\r\n            return negative ? -value : value;\r\n        }\r\n    }\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.scanInt", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.scanInt(char)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "scanLong", "return_type": "long", "signature": "scanLong(char)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    int offset = bp;\r\n    char chLocal = charAt(offset++);\r\n    final boolean negative = chLocal == '-';\r\n    if (negative) {\r\n        chLocal = charAt(offset++);\r\n    }\r\n    long value;\r\n    if (chLocal >= '0' && chLocal <= '9') {\r\n        value = chLocal - '0';\r\n        for (; ; ) {\r\n            chLocal = charAt(offset++);\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                value = value * 10 + (chLocal - '0');\r\n            } else if (chLocal == '.') {\r\n                matchStat = NOT_MATCH;\r\n                return 0;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (value < 0) {\r\n            matchStat = NOT_MATCH;\r\n            return 0;\r\n        }\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    for (; ; ) {\r\n        if (chLocal == expectNextChar) {\r\n            bp = offset;\r\n            this.ch = charAt(bp);\r\n            matchStat = VALUE;\r\n            token = JSONToken.COMMA;\r\n            return negative ? -value : value;\r\n        } else {\r\n            if (isWhitespace(chLocal)) {\r\n                chLocal = charAt(offset++);\r\n                continue;\r\n            }\r\n            matchStat = NOT_MATCH;\r\n            return value;\r\n        }\r\n    }\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.scanLong", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.scanLong(char)", "qualified_return_type": "long"}
{"java_doc": "", "method_name": "arrayCopy", "return_type": "void", "signature": "arrayCopy(int, char[], int, int)", "body_content": "{\r\n    text.getChars(srcPos, srcPos + length, dest, destPos);\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.arrayCopy", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.arrayCopy(int, char[], int, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "info", "return_type": "String", "signature": "info()", "body_content": "{\r\n    return // \r\n    \"pos \" + bp + // \r\n    \", json : \" + (// \r\n    text.length() < 65536 ? // \r\n    text : text.substring(0, 65536));\r\n}", "class_name": "JSONScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONScanner.info", "qualified_signature": "com.alibaba.fastjson.parser.JSONScanner.info()", "qualified_return_type": "java.lang.String"}
{"java_doc": "\r\n@param object the owner of the property\r\n@param name the name of the property\r\n@param value the value of the property\r\n@return true if the property will be filtered out, false otherwise\r\n", "method_name": "apply", "return_type": "boolean", "signature": "apply(Object, String, Object)", "body_content": "", "class_name": "PropertyFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.PropertyFilter.apply", "qualified_signature": "com.alibaba.fastjson.serializer.PropertyFilter.apply(java.lang.Object, java.lang.String, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getAutowiredFor", "return_type": "Set<Type>", "signature": "getAutowiredFor()", "body_content": "", "class_name": "AutowiredObjectSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.AutowiredObjectSerializer.getAutowiredFor", "qualified_signature": "com.alibaba.fastjson.serializer.AutowiredObjectSerializer.getAutowiredFor()", "qualified_return_type": "java.util.Set<java.lang.reflect.Type>"}
{"java_doc": "", "method_name": "toString", "return_type": "String", "signature": "toString()", "body_content": "{\r\n    if (path == null) {\r\n        if (parent == null) {\r\n            path = \"$\";\r\n        } else {\r\n            if (fieldName instanceof Integer) {\r\n                path = parent.toString() + \"[\" + fieldName + \"]\";\r\n            } else {\r\n                path = parent.toString() + \".\" + fieldName;\r\n            }\r\n        }\r\n    }\r\n    return path;\r\n}", "class_name": "ParseContext", "qualified_method_name": "com.alibaba.fastjson.parser.ParseContext.toString", "qualified_signature": "com.alibaba.fastjson.parser.ParseContext.toString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getBufferLength", "return_type": "int", "signature": "getBufferLength()", "body_content": "{\r\n    return this.buf.length;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.getBufferLength", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.getBufferLength()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "config", "return_type": "void", "signature": "config(SerializerFeature, boolean)", "body_content": "{\r\n    if (state) {\r\n        features |= feature.getMask();\r\n        // 由于枚举序列化特性WriteEnumUsingToString和WriteEnumUsingName不能共存，需要检查\r\n        if (feature == SerializerFeature.WriteEnumUsingToString) {\r\n            features &= ~SerializerFeature.WriteEnumUsingName.getMask();\r\n        } else if (feature == SerializerFeature.WriteEnumUsingName) {\r\n            features &= ~SerializerFeature.WriteEnumUsingToString.getMask();\r\n        }\r\n    } else {\r\n        features &= ~feature.getMask();\r\n    }\r\n    computeFeatures();\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.config", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.config(com.alibaba.fastjson.serializer.SerializerFeature, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "computeFeatures", "return_type": "void", "signature": "computeFeatures()", "body_content": "{\r\n    quoteFieldNames = (this.features & SerializerFeature.QuoteFieldNames.mask) != 0;\r\n    useSingleQuotes = (this.features & SerializerFeature.UseSingleQuotes.mask) != 0;\r\n    sortField = (this.features & SerializerFeature.SortField.mask) != 0;\r\n    disableCircularReferenceDetect = (this.features & SerializerFeature.DisableCircularReferenceDetect.mask) != 0;\r\n    beanToArray = (this.features & SerializerFeature.BeanToArray.mask) != 0;\r\n    writeNonStringValueAsString = (this.features & SerializerFeature.WriteNonStringValueAsString.mask) != 0;\r\n    notWriteDefaultValue = (this.features & SerializerFeature.NotWriteDefaultValue.mask) != 0;\r\n    writeEnumUsingName = (this.features & SerializerFeature.WriteEnumUsingName.mask) != 0;\r\n    writeEnumUsingToString = (this.features & SerializerFeature.WriteEnumUsingToString.mask) != 0;\r\n    writeDirect = // \r\n    quoteFieldNames && // \r\n    (this.features & nonDirectFeautres) == 0 && (beanToArray || writeEnumUsingName);\r\n    keySeperator = useSingleQuotes ? '\\'' : '\"';\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.computeFeatures", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.computeFeatures()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "isSortField", "return_type": "boolean", "signature": "isSortField()", "body_content": "{\r\n    return sortField;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.isSortField", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.isSortField()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isNotWriteDefaultValue", "return_type": "boolean", "signature": "isNotWriteDefaultValue()", "body_content": "{\r\n    return notWriteDefaultValue;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.isNotWriteDefaultValue", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.isNotWriteDefaultValue()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isEnabled", "return_type": "boolean", "signature": "isEnabled(SerializerFeature)", "body_content": "{\r\n    return (this.features & feature.mask) != 0;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.isEnabled", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.isEnabled(com.alibaba.fastjson.serializer.SerializerFeature)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isEnabled", "return_type": "boolean", "signature": "isEnabled(int)", "body_content": "{\r\n    return (this.features & feature) != 0;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.isEnabled", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.isEnabled(int)", "qualified_return_type": "boolean"}
{"java_doc": "Writes a character to the buffer.\r\n", "method_name": "write", "return_type": "void", "signature": "write(int)", "body_content": "{\r\n    int newcount = count + 1;\r\n    if (newcount > buf.length) {\r\n        if (writer == null) {\r\n            expandCapacity(newcount);\r\n        } else {\r\n            flush();\r\n            newcount = 1;\r\n        }\r\n    }\r\n    buf[count] = (char) c;\r\n    count = newcount;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.write", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.write(int)", "qualified_return_type": "void"}
{"java_doc": "Writes characters to the buffer.\r\n\r\n@param c the data to be written\r\n@param off the start offset in the data\r\n@param len the number of chars that are written\r\n", "method_name": "write", "return_type": "void", "signature": "write(char[], int, int)", "body_content": "{\r\n    if (// \r\n    off < 0 || // \r\n    off > c.length || // \r\n    len < 0 || // \r\n    off + len > c.length || off + len < 0) {\r\n        throw new IndexOutOfBoundsException();\r\n    } else if (len == 0) {\r\n        return;\r\n    }\r\n    int newcount = count + len;\r\n    if (newcount > buf.length) {\r\n        if (writer == null) {\r\n            expandCapacity(newcount);\r\n        } else {\r\n            do {\r\n                int rest = buf.length - count;\r\n                System.arraycopy(c, off, buf, count, rest);\r\n                count = buf.length;\r\n                flush();\r\n                len -= rest;\r\n                off += rest;\r\n            } while (len > buf.length);\r\n            newcount = len;\r\n        }\r\n    }\r\n    System.arraycopy(c, off, buf, count, len);\r\n    count = newcount;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.write", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.write(char[], int, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "expandCapacity", "return_type": "void", "signature": "expandCapacity(int)", "body_content": "{\r\n    int newCapacity = (buf.length * 3) / 2 + 1;\r\n    if (newCapacity < minimumCapacity) {\r\n        newCapacity = minimumCapacity;\r\n    }\r\n    char[] newValue = new char[newCapacity];\r\n    System.arraycopy(buf, 0, newValue, 0, count);\r\n    buf = newValue;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.expandCapacity", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.expandCapacity(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "append", "return_type": "SerializeWriter", "signature": "append(CharSequence)", "body_content": "{\r\n    String s = (csq == null ? \"null\" : csq.toString());\r\n    write(s, 0, s.length());\r\n    return this;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.append", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.append(java.lang.CharSequence)", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializeWriter"}
{"java_doc": "", "method_name": "append", "return_type": "SerializeWriter", "signature": "append(CharSequence, int, int)", "body_content": "{\r\n    String s = (csq == null ? \"null\" : csq).subSequence(start, end).toString();\r\n    write(s, 0, s.length());\r\n    return this;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.append", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.append(java.lang.CharSequence, int, int)", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializeWriter"}
{"java_doc": "", "method_name": "append", "return_type": "SerializeWriter", "signature": "append(char)", "body_content": "{\r\n    write(c);\r\n    return this;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.append", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.append(char)", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializeWriter"}
{"java_doc": "Write a portion of a string to the buffer.\r\n\r\n@param str String to be written from\r\n@param off Offset from which to start reading characters\r\n@param len Number of characters to be written\r\n", "method_name": "write", "return_type": "void", "signature": "write(String, int, int)", "body_content": "{\r\n    int newcount = count + len;\r\n    if (newcount > buf.length) {\r\n        if (writer == null) {\r\n            expandCapacity(newcount);\r\n        } else {\r\n            do {\r\n                int rest = buf.length - count;\r\n                str.getChars(off, off + rest, buf, count);\r\n                count = buf.length;\r\n                flush();\r\n                len -= rest;\r\n                off += rest;\r\n            } while (len > buf.length);\r\n            newcount = len;\r\n        }\r\n    }\r\n    str.getChars(off, off + len, buf, count);\r\n    count = newcount;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.write", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.write(java.lang.String, int, int)", "qualified_return_type": "void"}
{"java_doc": "Writes the contents of the buffer to another character stream.\r\n\r\n@param out the output stream to write to\r\n@throws IOException If an I/O error occurs.\r\n", "method_name": "writeTo", "return_type": "void", "signature": "writeTo(Writer)", "body_content": "{\r\n    if (this.writer != null) {\r\n        throw new UnsupportedOperationException(\"writer not null\");\r\n    }\r\n    out.write(buf, 0, count);\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeTo", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeTo(java.io.Writer)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeTo", "return_type": "void", "signature": "writeTo(OutputStream, String)", "body_content": "{\r\n    writeTo(out, Charset.forName(charsetName));\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeTo", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeTo(java.io.OutputStream, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeTo", "return_type": "void", "signature": "writeTo(OutputStream, Charset)", "body_content": "{\r\n    writeToEx(out, charset);\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeTo", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeTo(java.io.OutputStream, java.nio.charset.Charset)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeToEx", "return_type": "int", "signature": "writeToEx(OutputStream, Charset)", "body_content": "{\r\n    if (this.writer != null) {\r\n        throw new UnsupportedOperationException(\"writer not null\");\r\n    }\r\n    if (charset == IOUtils.UTF8) {\r\n        return encodeToUTF8(out);\r\n    } else {\r\n        byte[] bytes = new String(buf, 0, count).getBytes(charset);\r\n        out.write(bytes);\r\n        return bytes.length;\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeToEx", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeToEx(java.io.OutputStream, java.nio.charset.Charset)", "qualified_return_type": "int"}
{"java_doc": "Returns a copy of the input data.\r\n\r\n@return an array of chars copied from the input data.\r\n", "method_name": "toCharArray", "return_type": "char[]", "signature": "toCharArray()", "body_content": "{\r\n    if (this.writer != null) {\r\n        throw new UnsupportedOperationException(\"writer not null\");\r\n    }\r\n    char[] newValue = new char[count];\r\n    System.arraycopy(buf, 0, newValue, 0, count);\r\n    return newValue;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.toCharArray", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.toCharArray()", "qualified_return_type": "char[]"}
{"java_doc": "only for springwebsocket\r\n\r\n@return\r\n", "method_name": "toCharArrayForSpringWebSocket", "return_type": "char[]", "signature": "toCharArrayForSpringWebSocket()", "body_content": "{\r\n    if (this.writer != null) {\r\n        throw new UnsupportedOperationException(\"writer not null\");\r\n    }\r\n    char[] newValue = new char[count - 2];\r\n    System.arraycopy(buf, 1, newValue, 0, count - 2);\r\n    return newValue;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.toCharArrayForSpringWebSocket", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.toCharArrayForSpringWebSocket()", "qualified_return_type": "char[]"}
{"java_doc": "", "method_name": "toBytes", "return_type": "byte[]", "signature": "toBytes(String)", "body_content": "{\r\n    return toBytes(// \r\n    charsetName == null || \"UTF-8\".equals(charsetName) ? // \r\n    IOUtils.UTF8 : Charset.forName(charsetName));\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.toBytes", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.toBytes(java.lang.String)", "qualified_return_type": "byte[]"}
{"java_doc": "", "method_name": "toBytes", "return_type": "byte[]", "signature": "toBytes(Charset)", "body_content": "{\r\n    if (this.writer != null) {\r\n        throw new UnsupportedOperationException(\"writer not null\");\r\n    }\r\n    if (charset == IOUtils.UTF8) {\r\n        return encodeToUTF8Bytes();\r\n    } else {\r\n        return new String(buf, 0, count).getBytes(charset);\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.toBytes", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.toBytes(java.nio.charset.Charset)", "qualified_return_type": "byte[]"}
{"java_doc": "", "method_name": "encodeToUTF8", "return_type": "int", "signature": "encodeToUTF8(OutputStream)", "body_content": "{\r\n    int bytesLength = (int) (count * (double) 3);\r\n    byte[] bytes = bytesBufLocal.get();\r\n    if (bytes == null) {\r\n        bytes = new byte[1024 * 8];\r\n        bytesBufLocal.set(bytes);\r\n    }\r\n    if (bytes.length < bytesLength) {\r\n        bytes = new byte[bytesLength];\r\n    }\r\n    int position = IOUtils.encodeUTF8(buf, 0, count, bytes);\r\n    out.write(bytes, 0, position);\r\n    return position;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.encodeToUTF8", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.encodeToUTF8(java.io.OutputStream)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "encodeToUTF8Bytes", "return_type": "byte[]", "signature": "encodeToUTF8Bytes()", "body_content": "{\r\n    int bytesLength = (int) (count * (double) 3);\r\n    byte[] bytes = bytesBufLocal.get();\r\n    if (bytes == null) {\r\n        bytes = new byte[1024 * 8];\r\n        bytesBufLocal.set(bytes);\r\n    }\r\n    if (bytes.length < bytesLength) {\r\n        bytes = new byte[bytesLength];\r\n    }\r\n    int position = IOUtils.encodeUTF8(buf, 0, count, bytes);\r\n    byte[] copy = new byte[position];\r\n    System.arraycopy(bytes, 0, copy, 0, position);\r\n    return copy;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.encodeToUTF8Bytes", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.encodeToUTF8Bytes()", "qualified_return_type": "byte[]"}
{"java_doc": "", "method_name": "size", "return_type": "int", "signature": "size()", "body_content": "{\r\n    return count;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.size", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.size()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "toString", "return_type": "String", "signature": "toString()", "body_content": "{\r\n    return new String(buf, 0, count);\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.toString", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.toString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "Close the stream. This method does not release the buffer, since its contents might still be required. Note:\r\nInvoking this method in this class will have no effect.\r\n", "method_name": "close", "return_type": "void", "signature": "close()", "body_content": "{\r\n    if (writer != null && count > 0) {\r\n        flush();\r\n    }\r\n    if (buf.length <= 1024 * 64) {\r\n        bufLocal.set(buf);\r\n    }\r\n    this.buf = null;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.close", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.close()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(String)", "body_content": "{\r\n    if (text == null) {\r\n        writeNull();\r\n        return;\r\n    }\r\n    write(text, 0, text.length());\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.write", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.write(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeInt", "return_type": "void", "signature": "writeInt(int)", "body_content": "{\r\n    if (i == Integer.MIN_VALUE) {\r\n        write(\"-2147483648\");\r\n        return;\r\n    }\r\n    int size = (i < 0) ? IOUtils.stringSize(-i) + 1 : IOUtils.stringSize(i);\r\n    int newcount = count + size;\r\n    if (newcount > buf.length) {\r\n        if (writer == null) {\r\n            expandCapacity(newcount);\r\n        } else {\r\n            char[] chars = new char[size];\r\n            IOUtils.getChars(i, size, chars);\r\n            write(chars, 0, chars.length);\r\n            return;\r\n        }\r\n    }\r\n    IOUtils.getChars(i, newcount, buf);\r\n    count = newcount;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeInt", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeInt(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeByteArray", "return_type": "void", "signature": "writeByteArray(byte[])", "body_content": "{\r\n    int bytesLen = bytes.length;\r\n    final char quote = useSingleQuotes ? '\\'' : '\"';\r\n    if (bytesLen == 0) {\r\n        String emptyString = useSingleQuotes ? \"''\" : \"\\\"\\\"\";\r\n        write(emptyString);\r\n        return;\r\n    }\r\n    final char[] CA = IOUtils.CA;\r\n    // Length of even 24-bits.\r\n    int eLen = (bytesLen / 3) * 3;\r\n    // base64 character count\r\n    int charsLen = ((bytesLen - 1) / 3 + 1) << 2;\r\n    // char[] chars = new char[charsLen];\r\n    int offset = count;\r\n    int newcount = count + charsLen + 2;\r\n    if (newcount > buf.length) {\r\n        if (writer != null) {\r\n            write(quote);\r\n            for (int s = 0; s < eLen; ) {\r\n                // Copy next three bytes into lower 24 bits of int, paying attension to sign.\r\n                int i = (bytes[s++] & 0xff) << 16 | (bytes[s++] & 0xff) << 8 | (bytes[s++] & 0xff);\r\n                // Encode the int into four chars\r\n                write(CA[(i >>> 18) & 0x3f]);\r\n                write(CA[(i >>> 12) & 0x3f]);\r\n                write(CA[(i >>> 6) & 0x3f]);\r\n                write(CA[i & 0x3f]);\r\n            }\r\n            // Pad and encode last bits if source isn't even 24 bits.\r\n            // 0 - 2.\r\n            int left = bytesLen - eLen;\r\n            if (left > 0) {\r\n                // Prepare the int\r\n                int i = ((bytes[eLen] & 0xff) << 10) | (left == 2 ? ((bytes[bytesLen - 1] & 0xff) << 2) : 0);\r\n                // Set last four chars\r\n                write(CA[i >> 12]);\r\n                write(CA[(i >>> 6) & 0x3f]);\r\n                write(left == 2 ? CA[i & 0x3f] : '=');\r\n                write('=');\r\n            }\r\n            write(quote);\r\n            return;\r\n        }\r\n        expandCapacity(newcount);\r\n    }\r\n    count = newcount;\r\n    buf[offset++] = quote;\r\n    // Encode even 24-bits\r\n    for (int s = 0, d = offset; s < eLen; ) {\r\n        // Copy next three bytes into lower 24 bits of int, paying attension to sign.\r\n        int i = (bytes[s++] & 0xff) << 16 | (bytes[s++] & 0xff) << 8 | (bytes[s++] & 0xff);\r\n        // Encode the int into four chars\r\n        buf[d++] = CA[(i >>> 18) & 0x3f];\r\n        buf[d++] = CA[(i >>> 12) & 0x3f];\r\n        buf[d++] = CA[(i >>> 6) & 0x3f];\r\n        buf[d++] = CA[i & 0x3f];\r\n    }\r\n    // Pad and encode last bits if source isn't even 24 bits.\r\n    // 0 - 2.\r\n    int left = bytesLen - eLen;\r\n    if (left > 0) {\r\n        // Prepare the int\r\n        int i = ((bytes[eLen] & 0xff) << 10) | (left == 2 ? ((bytes[bytesLen - 1] & 0xff) << 2) : 0);\r\n        // Set last four chars\r\n        buf[newcount - 5] = CA[i >> 12];\r\n        buf[newcount - 4] = CA[(i >>> 6) & 0x3f];\r\n        buf[newcount - 3] = left == 2 ? CA[i & 0x3f] : '=';\r\n        buf[newcount - 2] = '=';\r\n    }\r\n    buf[newcount - 1] = quote;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeByteArray", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeByteArray(byte[])", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFloat", "return_type": "void", "signature": "writeFloat(float, boolean)", "body_content": "{\r\n    if (// \r\n    Float.isNaN(value) || Float.isInfinite(value)) {\r\n        writeNull();\r\n    } else {\r\n        String floatText = Float.toString(value);\r\n        if (isEnabled(SerializerFeature.WriteNullNumberAsZero) && floatText.endsWith(\".0\")) {\r\n            floatText = floatText.substring(0, floatText.length() - 2);\r\n        }\r\n        write(floatText);\r\n        if (checkWriteClassName && isEnabled(SerializerFeature.WriteClassName)) {\r\n            write('F');\r\n        }\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFloat", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFloat(float, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeDouble", "return_type": "void", "signature": "writeDouble(double, boolean)", "body_content": "{\r\n    if (// \r\n    Double.isNaN(doubleValue) || Double.isInfinite(doubleValue)) {\r\n        writeNull();\r\n    } else {\r\n        String doubleText = Double.toString(doubleValue);\r\n        if (isEnabled(SerializerFeature.WriteNullNumberAsZero) && doubleText.endsWith(\".0\")) {\r\n            doubleText = doubleText.substring(0, doubleText.length() - 2);\r\n        }\r\n        write(doubleText);\r\n        if (checkWriteClassName && isEnabled(SerializerFeature.WriteClassName)) {\r\n            write('D');\r\n        }\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeDouble", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeDouble(double, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeEnum", "return_type": "void", "signature": "writeEnum(Enum)", "body_content": "{\r\n    if (value == null) {\r\n        writeNull();\r\n        return;\r\n    }\r\n    String strVal = null;\r\n    if (writeEnumUsingName && !writeEnumUsingToString) {\r\n        strVal = value.name();\r\n    } else if (writeEnumUsingToString) {\r\n        strVal = value.toString();\r\n        ;\r\n    }\r\n    if (strVal != null) {\r\n        char quote = isEnabled(SerializerFeature.UseSingleQuotes) ? '\\'' : '\"';\r\n        write(quote);\r\n        write(strVal);\r\n        write(quote);\r\n    } else {\r\n        writeInt(value.ordinal());\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeEnum", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeEnum(java.lang.Enum<?>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeLong", "return_type": "void", "signature": "writeLong(long)", "body_content": "{\r\n    boolean needQuotationMark = // \r\n    isEnabled(SerializerFeature.BrowserCompatible) && // \r\n    (!isEnabled(SerializerFeature.WriteClassName)) && (i > 9007199254740991L || i < -9007199254740991L);\r\n    if (i == Long.MIN_VALUE) {\r\n        if (needQuotationMark)\r\n            write(\"\\\"-9223372036854775808\\\"\");\r\n        else\r\n            write(\"-9223372036854775808\");\r\n        return;\r\n    }\r\n    int size = (i < 0) ? IOUtils.stringSize(-i) + 1 : IOUtils.stringSize(i);\r\n    int newcount = count + size;\r\n    if (needQuotationMark)\r\n        newcount += 2;\r\n    if (newcount > buf.length) {\r\n        if (writer == null) {\r\n            expandCapacity(newcount);\r\n        } else {\r\n            char[] chars = new char[size];\r\n            IOUtils.getChars(i, size, chars);\r\n            if (needQuotationMark) {\r\n                write('\"');\r\n                write(chars, 0, chars.length);\r\n                write('\"');\r\n            } else {\r\n                write(chars, 0, chars.length);\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    if (needQuotationMark) {\r\n        buf[count] = '\"';\r\n        IOUtils.getChars(i, newcount - 1, buf);\r\n        buf[newcount - 1] = '\"';\r\n    } else {\r\n        IOUtils.getChars(i, newcount, buf);\r\n    }\r\n    count = newcount;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeLong", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeLong(long)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeNull", "return_type": "void", "signature": "writeNull()", "body_content": "{\r\n    write(\"null\");\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeNull", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeNull()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeNull", "return_type": "void", "signature": "writeNull(SerializerFeature)", "body_content": "{\r\n    writeNull(0, feature.mask);\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeNull", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeNull(com.alibaba.fastjson.serializer.SerializerFeature)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeNull", "return_type": "void", "signature": "writeNull(int, int)", "body_content": "{\r\n    if (// \r\n    (beanFeatures & feature) == 0 && (this.features & feature) == 0) {\r\n        writeNull();\r\n        return;\r\n    }\r\n    if (feature == SerializerFeature.WriteNullListAsEmpty.mask) {\r\n        write(\"[]\");\r\n    } else if (feature == SerializerFeature.WriteNullStringAsEmpty.mask) {\r\n        writeString(\"\");\r\n    } else if (feature == SerializerFeature.WriteNullBooleanAsFalse.mask) {\r\n        write(\"false\");\r\n    } else if (feature == SerializerFeature.WriteNullNumberAsZero.mask) {\r\n        write('0');\r\n    } else {\r\n        writeNull();\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeNull", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeNull(int, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeStringWithDoubleQuote", "return_type": "void", "signature": "writeStringWithDoubleQuote(String, char)", "body_content": "{\r\n    if (text == null) {\r\n        writeNull();\r\n        if (seperator != 0) {\r\n            write(seperator);\r\n        }\r\n        return;\r\n    }\r\n    int len = text.length();\r\n    int newcount = count + len + 2;\r\n    if (seperator != 0) {\r\n        newcount++;\r\n    }\r\n    if (newcount > buf.length) {\r\n        if (writer != null) {\r\n            write('\"');\r\n            for (int i = 0; i < text.length(); ++i) {\r\n                char ch = text.charAt(i);\r\n                if (isEnabled(SerializerFeature.BrowserSecure)) {\r\n                    if (!(ch >= '0' && ch <= '9') && !(ch >= 'a' && ch <= 'z') && !(ch >= 'A' && ch <= 'Z') && !(ch == ',') && !(ch == '.') && !(ch == '_')) {\r\n                        write('\\\\');\r\n                        write('u');\r\n                        write(IOUtils.DIGITS[(ch >>> 12) & 15]);\r\n                        write(IOUtils.DIGITS[(ch >>> 8) & 15]);\r\n                        write(IOUtils.DIGITS[(ch >>> 4) & 15]);\r\n                        write(IOUtils.DIGITS[ch & 15]);\r\n                        continue;\r\n                    }\r\n                } else if (isEnabled(SerializerFeature.BrowserCompatible)) {\r\n                    if (// \r\n                    ch == '\\b' || // \r\n                    ch == '\\f' || // \r\n                    ch == '\\n' || // \r\n                    ch == '\\r' || // \r\n                    ch == '\\t' || // \r\n                    ch == '\"' || // \r\n                    ch == '/' || ch == '\\\\') {\r\n                        write('\\\\');\r\n                        write(replaceChars[(int) ch]);\r\n                        continue;\r\n                    }\r\n                    if (ch < 32) {\r\n                        write('\\\\');\r\n                        write('u');\r\n                        write('0');\r\n                        write('0');\r\n                        write(IOUtils.ASCII_CHARS[ch * 2]);\r\n                        write(IOUtils.ASCII_CHARS[ch * 2 + 1]);\r\n                        continue;\r\n                    }\r\n                    if (ch >= 127) {\r\n                        write('\\\\');\r\n                        write('u');\r\n                        write(IOUtils.DIGITS[(ch >>> 12) & 15]);\r\n                        write(IOUtils.DIGITS[(ch >>> 8) & 15]);\r\n                        write(IOUtils.DIGITS[(ch >>> 4) & 15]);\r\n                        write(IOUtils.DIGITS[ch & 15]);\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    if (ch < IOUtils.specicalFlags_doubleQuotes.length && // \r\n                    IOUtils.specicalFlags_doubleQuotes[ch] != 0 || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\r\n                        write('\\\\');\r\n                        if (IOUtils.specicalFlags_doubleQuotes[ch] == 4) {\r\n                            write('u');\r\n                            write(IOUtils.DIGITS[ch >>> 12 & 15]);\r\n                            write(IOUtils.DIGITS[ch >>> 8 & 15]);\r\n                            write(IOUtils.DIGITS[ch >>> 4 & 15]);\r\n                            write(IOUtils.DIGITS[ch & 15]);\r\n                        } else {\r\n                            write(IOUtils.replaceChars[ch]);\r\n                        }\r\n                        continue;\r\n                    }\r\n                }\r\n                write(ch);\r\n            }\r\n            write('\"');\r\n            if (seperator != 0) {\r\n                write(seperator);\r\n            }\r\n            return;\r\n        }\r\n        expandCapacity(newcount);\r\n    }\r\n    int start = count + 1;\r\n    int end = start + len;\r\n    buf[count] = '\\\"';\r\n    text.getChars(0, len, buf, start);\r\n    count = newcount;\r\n    if (isEnabled(SerializerFeature.BrowserSecure)) {\r\n        int lastSpecialIndex = -1;\r\n        for (int i = start; i < end; ++i) {\r\n            char ch = buf[i];\r\n            if (!(ch >= '0' && ch <= '9') && !(ch >= 'a' && ch <= 'z') && !(ch >= 'A' && ch <= 'Z') && !(ch == ',') && !(ch == '.') && !(ch == '_')) {\r\n                lastSpecialIndex = i;\r\n                newcount += 5;\r\n                continue;\r\n            }\r\n        }\r\n        if (newcount > buf.length) {\r\n            expandCapacity(newcount);\r\n        }\r\n        count = newcount;\r\n        for (int i = lastSpecialIndex; i >= start; --i) {\r\n            char ch = buf[i];\r\n            if (!(ch >= '0' && ch <= '9') && !(ch >= 'a' && ch <= 'z') && !(ch >= 'A' && ch <= 'Z') && !(ch == ',') && !(ch == '.') && !(ch == '_')) {\r\n                System.arraycopy(buf, i + 1, buf, i + 6, end - i - 1);\r\n                buf[i] = '\\\\';\r\n                buf[i + 1] = 'u';\r\n                buf[i + 2] = IOUtils.DIGITS[(ch >>> 12) & 15];\r\n                buf[i + 3] = IOUtils.DIGITS[(ch >>> 8) & 15];\r\n                buf[i + 4] = IOUtils.DIGITS[(ch >>> 4) & 15];\r\n                buf[i + 5] = IOUtils.DIGITS[ch & 15];\r\n                end += 5;\r\n            }\r\n        }\r\n        if (seperator != 0) {\r\n            buf[count - 2] = '\\\"';\r\n            buf[count - 1] = seperator;\r\n        } else {\r\n            buf[count - 1] = '\\\"';\r\n        }\r\n        return;\r\n    }\r\n    if (isEnabled(SerializerFeature.BrowserCompatible)) {\r\n        int lastSpecialIndex = -1;\r\n        for (int i = start; i < end; ++i) {\r\n            char ch = buf[i];\r\n            if (// \r\n            ch == '\"' || // \r\n            ch == '/' || ch == '\\\\') {\r\n                lastSpecialIndex = i;\r\n                newcount += 1;\r\n                continue;\r\n            }\r\n            if (// \r\n            ch == '\\b' || // \r\n            ch == '\\f' || // \r\n            ch == '\\n' || // \r\n            ch == '\\r' || ch == '\\t') {\r\n                lastSpecialIndex = i;\r\n                newcount += 1;\r\n                continue;\r\n            }\r\n            if (ch < 32) {\r\n                lastSpecialIndex = i;\r\n                newcount += 5;\r\n                continue;\r\n            }\r\n            if (ch >= 127) {\r\n                lastSpecialIndex = i;\r\n                newcount += 5;\r\n                continue;\r\n            }\r\n        }\r\n        if (newcount > buf.length) {\r\n            expandCapacity(newcount);\r\n        }\r\n        count = newcount;\r\n        for (int i = lastSpecialIndex; i >= start; --i) {\r\n            char ch = buf[i];\r\n            if (// \r\n            ch == '\\b' || // \r\n            ch == '\\f' || // \r\n            ch == '\\n' || // \r\n            ch == '\\r' || ch == '\\t') {\r\n                System.arraycopy(buf, i + 1, buf, i + 2, end - i - 1);\r\n                buf[i] = '\\\\';\r\n                buf[i + 1] = replaceChars[(int) ch];\r\n                end += 1;\r\n                continue;\r\n            }\r\n            if (// \r\n            ch == '\"' || // \r\n            ch == '/' || ch == '\\\\') {\r\n                System.arraycopy(buf, i + 1, buf, i + 2, end - i - 1);\r\n                buf[i] = '\\\\';\r\n                buf[i + 1] = ch;\r\n                end += 1;\r\n                continue;\r\n            }\r\n            if (ch < 32) {\r\n                System.arraycopy(buf, i + 1, buf, i + 6, end - i - 1);\r\n                buf[i] = '\\\\';\r\n                buf[i + 1] = 'u';\r\n                buf[i + 2] = '0';\r\n                buf[i + 3] = '0';\r\n                buf[i + 4] = IOUtils.ASCII_CHARS[ch * 2];\r\n                buf[i + 5] = IOUtils.ASCII_CHARS[ch * 2 + 1];\r\n                end += 5;\r\n                continue;\r\n            }\r\n            if (ch >= 127) {\r\n                System.arraycopy(buf, i + 1, buf, i + 6, end - i - 1);\r\n                buf[i] = '\\\\';\r\n                buf[i + 1] = 'u';\r\n                buf[i + 2] = IOUtils.DIGITS[(ch >>> 12) & 15];\r\n                buf[i + 3] = IOUtils.DIGITS[(ch >>> 8) & 15];\r\n                buf[i + 4] = IOUtils.DIGITS[(ch >>> 4) & 15];\r\n                buf[i + 5] = IOUtils.DIGITS[ch & 15];\r\n                end += 5;\r\n            }\r\n        }\r\n        if (seperator != 0) {\r\n            buf[count - 2] = '\\\"';\r\n            buf[count - 1] = seperator;\r\n        } else {\r\n            buf[count - 1] = '\\\"';\r\n        }\r\n        return;\r\n    }\r\n    int specialCount = 0;\r\n    int lastSpecialIndex = -1;\r\n    int firstSpecialIndex = -1;\r\n    char lastSpecial = '\\0';\r\n    for (int i = start; i < end; ++i) {\r\n        char ch = buf[i];\r\n        if (ch == '\\u2028') {\r\n            specialCount++;\r\n            lastSpecialIndex = i;\r\n            lastSpecial = ch;\r\n            newcount += 4;\r\n            if (firstSpecialIndex == -1) {\r\n                firstSpecialIndex = i;\r\n            }\r\n            continue;\r\n        }\r\n        if (ch >= ']') {\r\n            if (ch >= 0x7F && ch < 0xA0) {\r\n                if (firstSpecialIndex == -1) {\r\n                    firstSpecialIndex = i;\r\n                }\r\n                specialCount++;\r\n                lastSpecialIndex = i;\r\n                lastSpecial = ch;\r\n                newcount += 4;\r\n            }\r\n            continue;\r\n        }\r\n        if (isSpecial(ch, this.features)) {\r\n            specialCount++;\r\n            lastSpecialIndex = i;\r\n            lastSpecial = ch;\r\n            if (// \r\n            ch < IOUtils.specicalFlags_doubleQuotes.length && // \r\n            IOUtils.specicalFlags_doubleQuotes[ch] == 4) {\r\n                newcount += 4;\r\n            }\r\n            if (firstSpecialIndex == -1) {\r\n                firstSpecialIndex = i;\r\n            }\r\n        }\r\n    }\r\n    if (specialCount > 0) {\r\n        newcount += specialCount;\r\n        if (newcount > buf.length) {\r\n            expandCapacity(newcount);\r\n        }\r\n        count = newcount;\r\n        if (specialCount == 1) {\r\n            if (lastSpecial == '\\u2028') {\r\n                int srcPos = lastSpecialIndex + 1;\r\n                int destPos = lastSpecialIndex + 6;\r\n                int LengthOfCopy = end - lastSpecialIndex - 1;\r\n                System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\r\n                buf[lastSpecialIndex] = '\\\\';\r\n                buf[++lastSpecialIndex] = 'u';\r\n                buf[++lastSpecialIndex] = '2';\r\n                buf[++lastSpecialIndex] = '0';\r\n                buf[++lastSpecialIndex] = '2';\r\n                buf[++lastSpecialIndex] = '8';\r\n            } else {\r\n                final char ch = lastSpecial;\r\n                if (// \r\n                ch < IOUtils.specicalFlags_doubleQuotes.length && IOUtils.specicalFlags_doubleQuotes[ch] == 4) {\r\n                    int srcPos = lastSpecialIndex + 1;\r\n                    int destPos = lastSpecialIndex + 6;\r\n                    int LengthOfCopy = end - lastSpecialIndex - 1;\r\n                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\r\n                    int bufIndex = lastSpecialIndex;\r\n                    buf[bufIndex++] = '\\\\';\r\n                    buf[bufIndex++] = 'u';\r\n                    buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\r\n                    buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\r\n                    buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\r\n                    buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\r\n                } else {\r\n                    int srcPos = lastSpecialIndex + 1;\r\n                    int destPos = lastSpecialIndex + 2;\r\n                    int LengthOfCopy = end - lastSpecialIndex - 1;\r\n                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\r\n                    buf[lastSpecialIndex] = '\\\\';\r\n                    buf[++lastSpecialIndex] = replaceChars[(int) ch];\r\n                }\r\n            }\r\n        } else if (specialCount > 1) {\r\n            int textIndex = firstSpecialIndex - start;\r\n            int bufIndex = firstSpecialIndex;\r\n            for (int i = textIndex; i < text.length(); ++i) {\r\n                char ch = text.charAt(i);\r\n                if (// \r\n                ch < IOUtils.specicalFlags_doubleQuotes.length && // \r\n                IOUtils.specicalFlags_doubleQuotes[ch] != 0 || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\r\n                    buf[bufIndex++] = '\\\\';\r\n                    if (IOUtils.specicalFlags_doubleQuotes[ch] == 4) {\r\n                        buf[bufIndex++] = 'u';\r\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\r\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\r\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\r\n                        buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\r\n                        end += 5;\r\n                    } else {\r\n                        buf[bufIndex++] = replaceChars[(int) ch];\r\n                        end++;\r\n                    }\r\n                } else {\r\n                    if (ch == '\\u2028') {\r\n                        buf[bufIndex++] = '\\\\';\r\n                        buf[bufIndex++] = 'u';\r\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\r\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\r\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\r\n                        buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\r\n                        end += 5;\r\n                    } else {\r\n                        buf[bufIndex++] = ch;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (seperator != 0) {\r\n        buf[count - 2] = '\\\"';\r\n        buf[count - 1] = seperator;\r\n    } else {\r\n        buf[count - 1] = '\\\"';\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeStringWithDoubleQuote", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeStringWithDoubleQuote(java.lang.String, char)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFieldNameDirect", "return_type": "void", "signature": "writeFieldNameDirect(String)", "body_content": "{\r\n    int len = text.length();\r\n    int newcount = count + len + 3;\r\n    if (newcount > buf.length) {\r\n        expandCapacity(newcount);\r\n    }\r\n    int start = count + 1;\r\n    buf[count] = '\\\"';\r\n    text.getChars(0, len, buf, start);\r\n    count = newcount;\r\n    buf[count - 2] = '\\\"';\r\n    buf[count - 1] = ':';\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldNameDirect", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldNameDirect(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(List)", "body_content": "{\r\n    if (list.isEmpty()) {\r\n        write(\"[]\");\r\n        return;\r\n    }\r\n    int offset = count;\r\n    final int initOffset = offset;\r\n    for (int i = 0, list_size = list.size(); i < list_size; ++i) {\r\n        String text = list.get(i);\r\n        boolean hasSpecial = false;\r\n        if (text == null) {\r\n            hasSpecial = true;\r\n        } else {\r\n            for (int j = 0, len = text.length(); j < len; ++j) {\r\n                char ch = text.charAt(j);\r\n                if (hasSpecial = (// \r\n                ch < ' ' || // \r\n                ch > '~' || // \r\n                ch == '\"' || ch == '\\\\')) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (hasSpecial) {\r\n            count = initOffset;\r\n            write('[');\r\n            for (int j = 0; j < list.size(); ++j) {\r\n                text = list.get(j);\r\n                if (j != 0) {\r\n                    write(',');\r\n                }\r\n                if (text == null) {\r\n                    write(\"null\");\r\n                } else {\r\n                    writeStringWithDoubleQuote(text, (char) 0);\r\n                }\r\n            }\r\n            write(']');\r\n            return;\r\n        }\r\n        int newcount = offset + text.length() + 3;\r\n        if (i == list.size() - 1) {\r\n            newcount++;\r\n        }\r\n        if (newcount > buf.length) {\r\n            count = offset;\r\n            expandCapacity(newcount);\r\n        }\r\n        if (i == 0) {\r\n            buf[offset++] = '[';\r\n        } else {\r\n            buf[offset++] = ',';\r\n        }\r\n        buf[offset++] = '\"';\r\n        text.getChars(0, text.length(), buf, offset);\r\n        offset += text.length();\r\n        buf[offset++] = '\"';\r\n    }\r\n    buf[offset++] = ']';\r\n    count = offset;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.write", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.write(java.util.List<java.lang.String>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFieldValue", "return_type": "void", "signature": "writeFieldValue(char, String, char)", "body_content": "{\r\n    write(seperator);\r\n    writeFieldName(name);\r\n    if (value == 0) {\r\n        writeString(\"\\u0000\");\r\n    } else {\r\n        writeString(Character.toString(value));\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue(char, java.lang.String, char)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFieldValue", "return_type": "void", "signature": "writeFieldValue(char, String, boolean)", "body_content": "{\r\n    if (!quoteFieldNames) {\r\n        write(seperator);\r\n        writeFieldName(name);\r\n        write(value);\r\n        return;\r\n    }\r\n    int intSize = value ? 4 : 5;\r\n    int nameLen = name.length();\r\n    int newcount = count + nameLen + 4 + intSize;\r\n    if (newcount > buf.length) {\r\n        if (writer != null) {\r\n            write(seperator);\r\n            writeString(name);\r\n            write(':');\r\n            write(value);\r\n            return;\r\n        }\r\n        expandCapacity(newcount);\r\n    }\r\n    int start = count;\r\n    count = newcount;\r\n    buf[start] = seperator;\r\n    int nameEnd = start + nameLen + 1;\r\n    buf[start + 1] = keySeperator;\r\n    name.getChars(0, nameLen, buf, start + 2);\r\n    buf[nameEnd + 1] = keySeperator;\r\n    if (value) {\r\n        System.arraycopy(\":true\".toCharArray(), 0, buf, nameEnd + 2, 5);\r\n    } else {\r\n        System.arraycopy(\":false\".toCharArray(), 0, buf, nameEnd + 2, 6);\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue(char, java.lang.String, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(boolean)", "body_content": "{\r\n    if (value) {\r\n        write(\"true\");\r\n    } else {\r\n        write(\"false\");\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.write", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.write(boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFieldValue", "return_type": "void", "signature": "writeFieldValue(char, String, int)", "body_content": "{\r\n    if (value == Integer.MIN_VALUE || !quoteFieldNames) {\r\n        write(seperator);\r\n        writeFieldName(name);\r\n        writeInt(value);\r\n        return;\r\n    }\r\n    int intSize = (value < 0) ? IOUtils.stringSize(-value) + 1 : IOUtils.stringSize(value);\r\n    int nameLen = name.length();\r\n    int newcount = count + nameLen + 4 + intSize;\r\n    if (newcount > buf.length) {\r\n        if (writer != null) {\r\n            write(seperator);\r\n            writeFieldName(name);\r\n            writeInt(value);\r\n            return;\r\n        }\r\n        expandCapacity(newcount);\r\n    }\r\n    int start = count;\r\n    count = newcount;\r\n    buf[start] = seperator;\r\n    int nameEnd = start + nameLen + 1;\r\n    buf[start + 1] = keySeperator;\r\n    name.getChars(0, nameLen, buf, start + 2);\r\n    buf[nameEnd + 1] = keySeperator;\r\n    buf[nameEnd + 2] = ':';\r\n    IOUtils.getChars(value, count, buf);\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue(char, java.lang.String, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFieldValue", "return_type": "void", "signature": "writeFieldValue(char, String, long)", "body_content": "{\r\n    if (value == Long.MIN_VALUE || !quoteFieldNames) {\r\n        write(seperator);\r\n        writeFieldName(name);\r\n        writeLong(value);\r\n        return;\r\n    }\r\n    int intSize = (value < 0) ? IOUtils.stringSize(-value) + 1 : IOUtils.stringSize(value);\r\n    int nameLen = name.length();\r\n    int newcount = count + nameLen + 4 + intSize;\r\n    if (newcount > buf.length) {\r\n        if (writer != null) {\r\n            write(seperator);\r\n            writeFieldName(name);\r\n            writeLong(value);\r\n            return;\r\n        }\r\n        expandCapacity(newcount);\r\n    }\r\n    int start = count;\r\n    count = newcount;\r\n    buf[start] = seperator;\r\n    int nameEnd = start + nameLen + 1;\r\n    buf[start + 1] = keySeperator;\r\n    name.getChars(0, nameLen, buf, start + 2);\r\n    buf[nameEnd + 1] = keySeperator;\r\n    buf[nameEnd + 2] = ':';\r\n    IOUtils.getChars(value, count, buf);\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue(char, java.lang.String, long)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFieldValue", "return_type": "void", "signature": "writeFieldValue(char, String, float)", "body_content": "{\r\n    write(seperator);\r\n    writeFieldName(name);\r\n    writeFloat(value, false);\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue(char, java.lang.String, float)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFieldValue", "return_type": "void", "signature": "writeFieldValue(char, String, double)", "body_content": "{\r\n    write(seperator);\r\n    writeFieldName(name);\r\n    writeDouble(value, false);\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue(char, java.lang.String, double)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFieldValue", "return_type": "void", "signature": "writeFieldValue(char, String, String)", "body_content": "{\r\n    if (quoteFieldNames) {\r\n        if (useSingleQuotes) {\r\n            write(seperator);\r\n            writeFieldName(name);\r\n            if (value == null) {\r\n                writeNull();\r\n            } else {\r\n                writeString(value);\r\n            }\r\n        } else {\r\n            if (isEnabled(SerializerFeature.BrowserSecure)) {\r\n                write(seperator);\r\n                writeStringWithDoubleQuote(name, ':');\r\n                writeStringWithDoubleQuote(value, (char) 0);\r\n            } else if (isEnabled(SerializerFeature.BrowserCompatible)) {\r\n                write(seperator);\r\n                writeStringWithDoubleQuote(name, ':');\r\n                writeStringWithDoubleQuote(value, (char) 0);\r\n            } else {\r\n                writeFieldValueStringWithDoubleQuoteCheck(seperator, name, value);\r\n            }\r\n        }\r\n    } else {\r\n        write(seperator);\r\n        writeFieldName(name);\r\n        if (value == null) {\r\n            writeNull();\r\n        } else {\r\n            writeString(value);\r\n        }\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue(char, java.lang.String, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFieldValueStringWithDoubleQuoteCheck", "return_type": "void", "signature": "writeFieldValueStringWithDoubleQuoteCheck(char, String, String)", "body_content": "{\r\n    int nameLen = name.length();\r\n    int valueLen;\r\n    int newcount = count;\r\n    if (value == null) {\r\n        valueLen = 4;\r\n        newcount += nameLen + 8;\r\n    } else {\r\n        valueLen = value.length();\r\n        newcount += nameLen + valueLen + 6;\r\n    }\r\n    if (newcount > buf.length) {\r\n        if (writer != null) {\r\n            write(seperator);\r\n            writeStringWithDoubleQuote(name, ':');\r\n            writeStringWithDoubleQuote(value, (char) 0);\r\n            return;\r\n        }\r\n        expandCapacity(newcount);\r\n    }\r\n    buf[count] = seperator;\r\n    int nameStart = count + 2;\r\n    int nameEnd = nameStart + nameLen;\r\n    buf[count + 1] = '\\\"';\r\n    name.getChars(0, nameLen, buf, nameStart);\r\n    count = newcount;\r\n    buf[nameEnd] = '\\\"';\r\n    int index = nameEnd + 1;\r\n    buf[index++] = ':';\r\n    if (value == null) {\r\n        buf[index++] = 'n';\r\n        buf[index++] = 'u';\r\n        buf[index++] = 'l';\r\n        buf[index++] = 'l';\r\n        return;\r\n    }\r\n    buf[index++] = '\"';\r\n    int valueStart = index;\r\n    int valueEnd = valueStart + valueLen;\r\n    value.getChars(0, valueLen, buf, valueStart);\r\n    int specialCount = 0;\r\n    int lastSpecialIndex = -1;\r\n    int firstSpecialIndex = -1;\r\n    char lastSpecial = '\\0';\r\n    for (int i = valueStart; i < valueEnd; ++i) {\r\n        char ch = buf[i];\r\n        if (ch >= ']') {\r\n            if (// \r\n            ch >= 0x7F && (// \r\n            ch == '\\u2028' || ch < 0xA0)) {\r\n                if (firstSpecialIndex == -1) {\r\n                    firstSpecialIndex = i;\r\n                }\r\n                specialCount++;\r\n                lastSpecialIndex = i;\r\n                lastSpecial = ch;\r\n                newcount += 4;\r\n            }\r\n            continue;\r\n        }\r\n        if (isSpecial(ch, this.features)) {\r\n            specialCount++;\r\n            lastSpecialIndex = i;\r\n            lastSpecial = ch;\r\n            if (// \r\n            ch < IOUtils.specicalFlags_doubleQuotes.length && // \r\n            IOUtils.specicalFlags_doubleQuotes[ch] == 4) {\r\n                newcount += 4;\r\n            }\r\n            if (firstSpecialIndex == -1) {\r\n                firstSpecialIndex = i;\r\n            }\r\n        }\r\n    }\r\n    if (specialCount > 0) {\r\n        newcount += specialCount;\r\n        if (newcount > buf.length) {\r\n            expandCapacity(newcount);\r\n        }\r\n        count = newcount;\r\n        if (specialCount == 1) {\r\n            if (lastSpecial == '\\u2028') {\r\n                int srcPos = lastSpecialIndex + 1;\r\n                int destPos = lastSpecialIndex + 6;\r\n                int LengthOfCopy = valueEnd - lastSpecialIndex - 1;\r\n                System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\r\n                buf[lastSpecialIndex] = '\\\\';\r\n                buf[++lastSpecialIndex] = 'u';\r\n                buf[++lastSpecialIndex] = '2';\r\n                buf[++lastSpecialIndex] = '0';\r\n                buf[++lastSpecialIndex] = '2';\r\n                buf[++lastSpecialIndex] = '8';\r\n            } else {\r\n                final char ch = lastSpecial;\r\n                if (// \r\n                ch < IOUtils.specicalFlags_doubleQuotes.length && IOUtils.specicalFlags_doubleQuotes[ch] == 4) {\r\n                    int srcPos = lastSpecialIndex + 1;\r\n                    int destPos = lastSpecialIndex + 6;\r\n                    int LengthOfCopy = valueEnd - lastSpecialIndex - 1;\r\n                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\r\n                    int bufIndex = lastSpecialIndex;\r\n                    buf[bufIndex++] = '\\\\';\r\n                    buf[bufIndex++] = 'u';\r\n                    buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\r\n                    buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\r\n                    buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\r\n                    buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\r\n                } else {\r\n                    int srcPos = lastSpecialIndex + 1;\r\n                    int destPos = lastSpecialIndex + 2;\r\n                    int LengthOfCopy = valueEnd - lastSpecialIndex - 1;\r\n                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\r\n                    buf[lastSpecialIndex] = '\\\\';\r\n                    buf[++lastSpecialIndex] = replaceChars[(int) ch];\r\n                }\r\n            }\r\n        } else if (specialCount > 1) {\r\n            int textIndex = firstSpecialIndex - valueStart;\r\n            int bufIndex = firstSpecialIndex;\r\n            for (int i = textIndex; i < value.length(); ++i) {\r\n                char ch = value.charAt(i);\r\n                if (// \r\n                ch < IOUtils.specicalFlags_doubleQuotes.length && // \r\n                IOUtils.specicalFlags_doubleQuotes[ch] != 0 || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\r\n                    buf[bufIndex++] = '\\\\';\r\n                    if (IOUtils.specicalFlags_doubleQuotes[ch] == 4) {\r\n                        buf[bufIndex++] = 'u';\r\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\r\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\r\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\r\n                        buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\r\n                        valueEnd += 5;\r\n                    } else {\r\n                        buf[bufIndex++] = replaceChars[(int) ch];\r\n                        valueEnd++;\r\n                    }\r\n                } else {\r\n                    if (ch == '\\u2028') {\r\n                        buf[bufIndex++] = '\\\\';\r\n                        buf[bufIndex++] = 'u';\r\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\r\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\r\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\r\n                        buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\r\n                        valueEnd += 5;\r\n                    } else {\r\n                        buf[bufIndex++] = ch;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    buf[count - 1] = '\\\"';\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValueStringWithDoubleQuoteCheck", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValueStringWithDoubleQuoteCheck(char, java.lang.String, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFieldValueStringWithDoubleQuote", "return_type": "void", "signature": "writeFieldValueStringWithDoubleQuote(char, String, String)", "body_content": "{\r\n    int nameLen = name.length();\r\n    int valueLen;\r\n    int newcount = count;\r\n    valueLen = value.length();\r\n    newcount += nameLen + valueLen + 6;\r\n    if (newcount > buf.length) {\r\n        if (writer != null) {\r\n            write(seperator);\r\n            writeStringWithDoubleQuote(name, ':');\r\n            writeStringWithDoubleQuote(value, (char) 0);\r\n            return;\r\n        }\r\n        expandCapacity(newcount);\r\n    }\r\n    buf[count] = seperator;\r\n    int nameStart = count + 2;\r\n    int nameEnd = nameStart + nameLen;\r\n    buf[count + 1] = '\\\"';\r\n    name.getChars(0, nameLen, buf, nameStart);\r\n    count = newcount;\r\n    buf[nameEnd] = '\\\"';\r\n    int index = nameEnd + 1;\r\n    buf[index++] = ':';\r\n    buf[index++] = '\"';\r\n    int valueStart = index;\r\n    value.getChars(0, valueLen, buf, valueStart);\r\n    buf[count - 1] = '\\\"';\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValueStringWithDoubleQuote", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValueStringWithDoubleQuote(char, java.lang.String, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "isSpecial", "return_type": "boolean", "signature": "isSpecial(char, int)", "body_content": "{\r\n    // if (ch > ']') {\r\n    // return false;\r\n    // }\r\n    if (ch == ' ') {\r\n        // 32\r\n        return false;\r\n    }\r\n    if (ch == '/') {\r\n        // 47\r\n        return (features & SerializerFeature.WriteSlashAsSpecial.mask) != 0;\r\n    }\r\n    if (// 35\r\n    ch > '#' && // 92\r\n    ch != '\\\\') {\r\n        return false;\r\n    }\r\n    if (// 31\r\n    ch <= 0x1F || // 92\r\n    ch == '\\\\' || // 34\r\n    ch == '\"') {\r\n        return true;\r\n    }\r\n    return false;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.isSpecial", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.isSpecial(char, int)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "writeFieldValue", "return_type": "void", "signature": "writeFieldValue(char, String, Enum)", "body_content": "{\r\n    if (value == null) {\r\n        write(seperator);\r\n        writeFieldName(name);\r\n        writeNull();\r\n        return;\r\n    }\r\n    if (writeEnumUsingName && !writeEnumUsingToString) {\r\n        writeEnumFieldValue(seperator, name, value.name());\r\n    } else if (writeEnumUsingToString) {\r\n        writeEnumFieldValue(seperator, name, value.toString());\r\n    } else {\r\n        writeFieldValue(seperator, name, value.ordinal());\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue(char, java.lang.String, java.lang.Enum<?>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeEnumFieldValue", "return_type": "void", "signature": "writeEnumFieldValue(char, String, String)", "body_content": "{\r\n    if (useSingleQuotes) {\r\n        writeFieldValue(seperator, name, value);\r\n    } else {\r\n        writeFieldValueStringWithDoubleQuote(seperator, name, value);\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeEnumFieldValue", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeEnumFieldValue(char, java.lang.String, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFieldValue", "return_type": "void", "signature": "writeFieldValue(char, String, BigDecimal)", "body_content": "{\r\n    write(seperator);\r\n    writeFieldName(name);\r\n    if (value == null) {\r\n        writeNull();\r\n    } else {\r\n        write(value.toString());\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldValue(char, java.lang.String, java.math.BigDecimal)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeString", "return_type": "void", "signature": "writeString(String, char)", "body_content": "{\r\n    if (useSingleQuotes) {\r\n        writeStringWithSingleQuote(text);\r\n        write(seperator);\r\n    } else {\r\n        writeStringWithDoubleQuote(text, seperator);\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeString", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeString(java.lang.String, char)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeString", "return_type": "void", "signature": "writeString(String)", "body_content": "{\r\n    if (useSingleQuotes) {\r\n        writeStringWithSingleQuote(text);\r\n    } else {\r\n        writeStringWithDoubleQuote(text, (char) 0);\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeString", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeString(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeStringWithSingleQuote", "return_type": "void", "signature": "writeStringWithSingleQuote(String)", "body_content": "{\r\n    if (text == null) {\r\n        int newcount = count + 4;\r\n        if (newcount > buf.length) {\r\n            expandCapacity(newcount);\r\n        }\r\n        \"null\".getChars(0, 4, buf, count);\r\n        count = newcount;\r\n        return;\r\n    }\r\n    int len = text.length();\r\n    int newcount = count + len + 2;\r\n    if (newcount > buf.length) {\r\n        if (writer != null) {\r\n            write('\\'');\r\n            for (int i = 0; i < text.length(); ++i) {\r\n                char ch = text.charAt(i);\r\n                if (// \r\n                ch <= 13 || ch == '\\\\' || ch == '\\'' || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\r\n                    write('\\\\');\r\n                    write(replaceChars[(int) ch]);\r\n                } else {\r\n                    write(ch);\r\n                }\r\n            }\r\n            write('\\'');\r\n            return;\r\n        }\r\n        expandCapacity(newcount);\r\n    }\r\n    int start = count + 1;\r\n    int end = start + len;\r\n    buf[count] = '\\'';\r\n    text.getChars(0, len, buf, start);\r\n    count = newcount;\r\n    int specialCount = 0;\r\n    int lastSpecialIndex = -1;\r\n    char lastSpecial = '\\0';\r\n    for (int i = start; i < end; ++i) {\r\n        char ch = buf[i];\r\n        if (// \r\n        ch <= 13 || ch == '\\\\' || ch == '\\'' || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\r\n            specialCount++;\r\n            lastSpecialIndex = i;\r\n            lastSpecial = ch;\r\n        }\r\n    }\r\n    newcount += specialCount;\r\n    if (newcount > buf.length) {\r\n        expandCapacity(newcount);\r\n    }\r\n    count = newcount;\r\n    if (specialCount == 1) {\r\n        System.arraycopy(buf, lastSpecialIndex + 1, buf, lastSpecialIndex + 2, end - lastSpecialIndex - 1);\r\n        buf[lastSpecialIndex] = '\\\\';\r\n        buf[++lastSpecialIndex] = replaceChars[(int) lastSpecial];\r\n    } else if (specialCount > 1) {\r\n        System.arraycopy(buf, lastSpecialIndex + 1, buf, lastSpecialIndex + 2, end - lastSpecialIndex - 1);\r\n        buf[lastSpecialIndex] = '\\\\';\r\n        buf[++lastSpecialIndex] = replaceChars[(int) lastSpecial];\r\n        end++;\r\n        for (int i = lastSpecialIndex - 2; i >= start; --i) {\r\n            char ch = buf[i];\r\n            if (// \r\n            ch <= 13 || ch == '\\\\' || ch == '\\'' || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\r\n                System.arraycopy(buf, i + 1, buf, i + 2, end - i - 1);\r\n                buf[i] = '\\\\';\r\n                buf[i + 1] = replaceChars[(int) ch];\r\n                end++;\r\n            }\r\n        }\r\n    }\r\n    buf[count - 1] = '\\'';\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeStringWithSingleQuote", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeStringWithSingleQuote(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFieldName", "return_type": "void", "signature": "writeFieldName(String)", "body_content": "{\r\n    writeFieldName(key, false);\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldName", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldName(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeFieldName", "return_type": "void", "signature": "writeFieldName(String, boolean)", "body_content": "{\r\n    if (key == null) {\r\n        write(\"null:\");\r\n        return;\r\n    }\r\n    if (useSingleQuotes) {\r\n        if (quoteFieldNames) {\r\n            writeStringWithSingleQuote(key);\r\n            write(':');\r\n        } else {\r\n            writeKeyWithSingleQuoteIfHasSpecial(key);\r\n        }\r\n    } else {\r\n        if (quoteFieldNames) {\r\n            writeStringWithDoubleQuote(key, ':');\r\n        } else {\r\n            boolean hashSpecial = key.length() == 0;\r\n            for (int i = 0; i < key.length(); ++i) {\r\n                char ch = key.charAt(i);\r\n                if (SerializeWriter.isSpecial(ch, 0)) {\r\n                    hashSpecial = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (hashSpecial) {\r\n                writeStringWithDoubleQuote(key, ':');\r\n            } else {\r\n                write(key);\r\n                write(':');\r\n            }\r\n        }\r\n    }\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldName", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeFieldName(java.lang.String, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeKeyWithSingleQuoteIfHasSpecial", "return_type": "void", "signature": "writeKeyWithSingleQuoteIfHasSpecial(String)", "body_content": "{\r\n    final byte[] specicalFlags_singleQuotes = IOUtils.specicalFlags_singleQuotes;\r\n    int len = text.length();\r\n    int newcount = count + len + 1;\r\n    if (newcount > buf.length) {\r\n        if (writer != null) {\r\n            if (len == 0) {\r\n                write('\\'');\r\n                write('\\'');\r\n                write(':');\r\n                return;\r\n            }\r\n            boolean hasSpecial = false;\r\n            for (int i = 0; i < len; ++i) {\r\n                char ch = text.charAt(i);\r\n                if (ch < specicalFlags_singleQuotes.length && specicalFlags_singleQuotes[ch] != 0) {\r\n                    hasSpecial = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (hasSpecial) {\r\n                write('\\'');\r\n            }\r\n            for (int i = 0; i < len; ++i) {\r\n                char ch = text.charAt(i);\r\n                if (ch < specicalFlags_singleQuotes.length && specicalFlags_singleQuotes[ch] != 0) {\r\n                    write('\\\\');\r\n                    write(replaceChars[(int) ch]);\r\n                } else {\r\n                    write(ch);\r\n                }\r\n            }\r\n            if (hasSpecial) {\r\n                write('\\'');\r\n            }\r\n            write(':');\r\n            return;\r\n        }\r\n        expandCapacity(newcount);\r\n    }\r\n    if (len == 0) {\r\n        int newCount = count + 3;\r\n        if (newCount > buf.length) {\r\n            expandCapacity(count + 3);\r\n        }\r\n        buf[count++] = '\\'';\r\n        buf[count++] = '\\'';\r\n        buf[count++] = ':';\r\n        return;\r\n    }\r\n    int start = count;\r\n    int end = start + len;\r\n    text.getChars(0, len, buf, start);\r\n    count = newcount;\r\n    boolean hasSpecial = false;\r\n    for (int i = start; i < end; ++i) {\r\n        char ch = buf[i];\r\n        if (ch < specicalFlags_singleQuotes.length && specicalFlags_singleQuotes[ch] != 0) {\r\n            if (!hasSpecial) {\r\n                newcount += 3;\r\n                if (newcount > buf.length) {\r\n                    expandCapacity(newcount);\r\n                }\r\n                count = newcount;\r\n                System.arraycopy(buf, i + 1, buf, i + 3, end - i - 1);\r\n                System.arraycopy(buf, 0, buf, 1, i);\r\n                buf[start] = '\\'';\r\n                buf[++i] = '\\\\';\r\n                buf[++i] = replaceChars[(int) ch];\r\n                end += 2;\r\n                buf[count - 2] = '\\'';\r\n                hasSpecial = true;\r\n            } else {\r\n                newcount++;\r\n                if (newcount > buf.length) {\r\n                    expandCapacity(newcount);\r\n                }\r\n                count = newcount;\r\n                System.arraycopy(buf, i + 1, buf, i + 2, end - i);\r\n                buf[i] = '\\\\';\r\n                buf[++i] = replaceChars[(int) ch];\r\n                end++;\r\n            }\r\n        }\r\n    }\r\n    buf[newcount - 1] = ':';\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.writeKeyWithSingleQuoteIfHasSpecial", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.writeKeyWithSingleQuoteIfHasSpecial(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "flush", "return_type": "void", "signature": "flush()", "body_content": "{\r\n    if (writer == null) {\r\n        return;\r\n    }\r\n    try {\r\n        writer.write(buf, 0, count);\r\n        writer.flush();\r\n    } catch (IOException e) {\r\n        throw new JSONException(e.getMessage(), e);\r\n    }\r\n    count = 0;\r\n}", "class_name": "SerializeWriter", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeWriter.flush", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeWriter.flush()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull(SerializerFeature.WriteNullNumberAsZero);\r\n        return;\r\n    }\r\n    BigInteger val = (BigInteger) object;\r\n    out.write(val.toString());\r\n}", "class_name": "BigIntegerCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.BigIntegerCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.BigIntegerCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    return (T) deserialze(parser);\r\n}", "class_name": "BigIntegerCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.BigIntegerCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.BigIntegerCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser)", "body_content": "{\r\n    final JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.LITERAL_INT) {\r\n        String val = lexer.numberString();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return (T) new BigInteger(val);\r\n    }\r\n    Object value = parser.parse();\r\n    return // \r\n    value == null ? // \r\n    null : (T) TypeUtils.castToBigInteger(value);\r\n}", "class_name": "BigIntegerCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.BigIntegerCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.BigIntegerCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_INT;\r\n}", "class_name": "BigIntegerCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.BigIntegerCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.BigIntegerCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull(SerializerFeature.WriteNullNumberAsZero);\r\n    } else {\r\n        long value = ((Long) object).longValue();\r\n        out.writeLong(value);\r\n        if (// \r\n        out.isEnabled(SerializerFeature.WriteClassName) && value <= Integer.MAX_VALUE && // \r\n        value >= Integer.MIN_VALUE && fieldType != Long.class) {\r\n            out.write('L');\r\n        }\r\n    }\r\n}", "class_name": "LongCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.LongCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.LongCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    final JSONLexer lexer = parser.lexer;\r\n    Long longObject;\r\n    if (lexer.token() == JSONToken.LITERAL_INT) {\r\n        long longValue = lexer.longValue();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        longObject = Long.valueOf(longValue);\r\n    } else {\r\n        Object value = parser.parse();\r\n        if (value == null) {\r\n            return null;\r\n        }\r\n        longObject = TypeUtils.castToLong(value);\r\n    }\r\n    return // \r\n    clazz == AtomicLong.class ? // \r\n    (T) new AtomicLong(longObject.longValue()) : (T) longObject;\r\n}", "class_name": "LongCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.LongCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.LongCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_INT;\r\n}", "class_name": "LongCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.LongCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.LongCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "token", "return_type": "int", "signature": "token()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.token", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.token()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "tokenName", "return_type": "String", "signature": "tokenName()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.tokenName", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.tokenName()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "skipWhitespace", "return_type": "void", "signature": "skipWhitespace()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.skipWhitespace", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.skipWhitespace()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "nextToken", "return_type": "void", "signature": "nextToken()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.nextToken", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.nextToken()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "nextToken", "return_type": "void", "signature": "nextToken(int)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.nextToken", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.nextToken(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getCurrent", "return_type": "char", "signature": "getCurrent()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.getCurrent", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.getCurrent()", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "next", "return_type": "char", "signature": "next()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.next", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.next()", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "scanSymbol", "return_type": "String", "signature": "scanSymbol(SymbolTable)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanSymbol", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanSymbol(com.alibaba.fastjson.parser.SymbolTable)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "scanSymbol", "return_type": "String", "signature": "scanSymbol(SymbolTable, char)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanSymbol", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanSymbol(com.alibaba.fastjson.parser.SymbolTable, char)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "resetStringPosition", "return_type": "void", "signature": "resetStringPosition()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.resetStringPosition", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.resetStringPosition()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "scanNumber", "return_type": "void", "signature": "scanNumber()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanNumber", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanNumber()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "pos", "return_type": "int", "signature": "pos()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.pos", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.pos()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "integerValue", "return_type": "Number", "signature": "integerValue()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.integerValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.integerValue()", "qualified_return_type": "java.lang.Number"}
{"java_doc": "", "method_name": "decimalValue", "return_type": "BigDecimal", "signature": "decimalValue()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.decimalValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.decimalValue()", "qualified_return_type": "java.math.BigDecimal"}
{"java_doc": "", "method_name": "decimalValue", "return_type": "Number", "signature": "decimalValue(boolean)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.decimalValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.decimalValue(boolean)", "qualified_return_type": "java.lang.Number"}
{"java_doc": "", "method_name": "scanSymbolUnQuoted", "return_type": "String", "signature": "scanSymbolUnQuoted(SymbolTable)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanSymbolUnQuoted", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanSymbolUnQuoted(com.alibaba.fastjson.parser.SymbolTable)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "stringVal", "return_type": "String", "signature": "stringVal()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.stringVal", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.stringVal()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "isEnabled", "return_type": "boolean", "signature": "isEnabled(int)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.isEnabled", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.isEnabled(int)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isEnabled", "return_type": "boolean", "signature": "isEnabled(Feature)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.isEnabled", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.isEnabled(com.alibaba.fastjson.parser.Feature)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "config", "return_type": "void", "signature": "config(Feature, boolean)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.config", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.config(com.alibaba.fastjson.parser.Feature, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "scanString", "return_type": "void", "signature": "scanString()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanString", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanString()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "intValue", "return_type": "int", "signature": "intValue()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.intValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.intValue()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "nextTokenWithColon", "return_type": "void", "signature": "nextTokenWithColon()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.nextTokenWithColon", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.nextTokenWithColon()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "nextTokenWithColon", "return_type": "void", "signature": "nextTokenWithColon(int)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.nextTokenWithColon", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.nextTokenWithColon(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "isBlankInput", "return_type": "boolean", "signature": "isBlankInput()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.isBlankInput", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.isBlankInput()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "close", "return_type": "void", "signature": "close()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.close", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.close()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "longValue", "return_type": "long", "signature": "longValue()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.longValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.longValue()", "qualified_return_type": "long"}
{"java_doc": "", "method_name": "isRef", "return_type": "boolean", "signature": "isRef()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.isRef", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.isRef()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "numberString", "return_type": "String", "signature": "numberString()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.numberString", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.numberString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "bytesValue", "return_type": "byte[]", "signature": "bytesValue()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.bytesValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.bytesValue()", "qualified_return_type": "byte[]"}
{"java_doc": "", "method_name": "floatValue", "return_type": "float", "signature": "floatValue()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.floatValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.floatValue()", "qualified_return_type": "float"}
{"java_doc": "", "method_name": "scanInt", "return_type": "int", "signature": "scanInt(char)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanInt", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanInt(char)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "scanLong", "return_type": "long", "signature": "scanLong(char)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanLong", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanLong(char)", "qualified_return_type": "long"}
{"java_doc": "", "method_name": "scanFloat", "return_type": "float", "signature": "scanFloat(char)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanFloat", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanFloat(char)", "qualified_return_type": "float"}
{"java_doc": "", "method_name": "scanDouble", "return_type": "double", "signature": "scanDouble(char)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanDouble", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanDouble(char)", "qualified_return_type": "double"}
{"java_doc": "", "method_name": "scanBoolean", "return_type": "boolean", "signature": "scanBoolean(char)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanBoolean", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanBoolean(char)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "scanString", "return_type": "String", "signature": "scanString(char)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanString", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanString(char)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "scanEnum", "return_type": "Enum<?>", "signature": "scanEnum(Class, SymbolTable, char)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanEnum", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanEnum(java.lang.Class<?>, com.alibaba.fastjson.parser.SymbolTable, char)", "qualified_return_type": "java.lang.Enum<?>"}
{"java_doc": "", "method_name": "scanSymbolWithSeperator", "return_type": "String", "signature": "scanSymbolWithSeperator(SymbolTable, char)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanSymbolWithSeperator", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanSymbolWithSeperator(com.alibaba.fastjson.parser.SymbolTable, char)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "scanStringArray", "return_type": "void", "signature": "scanStringArray(Collection, char)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.scanStringArray", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.scanStringArray(java.util.Collection<java.lang.String>, char)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getTimeZone", "return_type": "TimeZone", "signature": "getTimeZone()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.getTimeZone", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.getTimeZone()", "qualified_return_type": "java.util.TimeZone"}
{"java_doc": "", "method_name": "setTimeZone", "return_type": "void", "signature": "setTimeZone(TimeZone)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.setTimeZone", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.setTimeZone(java.util.TimeZone)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getLocale", "return_type": "Locale", "signature": "getLocale()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.getLocale", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.getLocale()", "qualified_return_type": "java.util.Locale"}
{"java_doc": "", "method_name": "setLocale", "return_type": "void", "signature": "setLocale(Locale)", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.setLocale", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.setLocale(java.util.Locale)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "info", "return_type": "String", "signature": "info()", "body_content": "", "class_name": "JSONLexer", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexer.info", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexer.info()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "lexError", "return_type": "void", "signature": "lexError(String, Object[])", "body_content": "{\r\n    token = ERROR;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.lexError", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.lexError(java.lang.String, java.lang.Object...)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "matchStat", "return_type": "int", "signature": "matchStat()", "body_content": "{\r\n    return matchStat;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.matchStat", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.matchStat()", "qualified_return_type": "int"}
{"java_doc": "internal method, don't invoke\r\n\r\n@param token\r\n", "method_name": "setToken", "return_type": "void", "signature": "setToken(int)", "body_content": "{\r\n    this.token = token;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.setToken", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.setToken(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "nextToken", "return_type": "void", "signature": "nextToken()", "body_content": "{\r\n    sp = 0;\r\n    for (; ; ) {\r\n        pos = bp;\r\n        if (ch == '/') {\r\n            skipComment();\r\n            continue;\r\n        }\r\n        if (ch == '\"') {\r\n            scanString();\r\n            return;\r\n        }\r\n        if (ch == ',') {\r\n            next();\r\n            token = COMMA;\r\n            return;\r\n        }\r\n        if (ch >= '0' && ch <= '9') {\r\n            scanNumber();\r\n            return;\r\n        }\r\n        if (ch == '-') {\r\n            scanNumber();\r\n            return;\r\n        }\r\n        switch(ch) {\r\n            case '\\'':\r\n                if (!isEnabled(Feature.AllowSingleQuotes)) {\r\n                    throw new JSONException(\"Feature.AllowSingleQuotes is false\");\r\n                }\r\n                scanStringSingleQuote();\r\n                return;\r\n            case ' ':\r\n            case '\\t':\r\n            case '\\b':\r\n            case '\\f':\r\n            case '\\n':\r\n            case '\\r':\r\n                next();\r\n                break;\r\n            case // true\r\n            't':\r\n                scanTrue();\r\n                return;\r\n            case // false\r\n            'f':\r\n                scanFalse();\r\n                return;\r\n            case // new,null\r\n            'n':\r\n                scanNullOrNew();\r\n                return;\r\n            case 'T':\r\n            // NULL\r\n            case 'N':\r\n            case 'S':\r\n            case // undefined\r\n            'u':\r\n                scanIdent();\r\n                return;\r\n            case '(':\r\n                next();\r\n                token = LPAREN;\r\n                return;\r\n            case ')':\r\n                next();\r\n                token = RPAREN;\r\n                return;\r\n            case '[':\r\n                next();\r\n                token = LBRACKET;\r\n                return;\r\n            case ']':\r\n                next();\r\n                token = RBRACKET;\r\n                return;\r\n            case '{':\r\n                next();\r\n                token = LBRACE;\r\n                return;\r\n            case '}':\r\n                next();\r\n                token = RBRACE;\r\n                return;\r\n            case ':':\r\n                next();\r\n                token = COLON;\r\n                return;\r\n            default:\r\n                if (isEOF()) {\r\n                    // JLS\r\n                    if (token == EOF) {\r\n                        throw new JSONException(\"EOF error\");\r\n                    }\r\n                    token = EOF;\r\n                    pos = bp = eofPos;\r\n                } else {\r\n                    if (ch <= 31 || ch == 127) {\r\n                        next();\r\n                        break;\r\n                    }\r\n                    lexError(\"illegal.char\", String.valueOf((int) ch));\r\n                    next();\r\n                }\r\n                return;\r\n        }\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.nextToken", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.nextToken()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "nextToken", "return_type": "void", "signature": "nextToken(int)", "body_content": "{\r\n    sp = 0;\r\n    for (; ; ) {\r\n        switch(expect) {\r\n            case JSONToken.LBRACE:\r\n                if (ch == '{') {\r\n                    token = JSONToken.LBRACE;\r\n                    next();\r\n                    return;\r\n                }\r\n                if (ch == '[') {\r\n                    token = JSONToken.LBRACKET;\r\n                    next();\r\n                    return;\r\n                }\r\n                break;\r\n            case JSONToken.COMMA:\r\n                if (ch == ',') {\r\n                    token = JSONToken.COMMA;\r\n                    next();\r\n                    return;\r\n                }\r\n                if (ch == '}') {\r\n                    token = JSONToken.RBRACE;\r\n                    next();\r\n                    return;\r\n                }\r\n                if (ch == ']') {\r\n                    token = JSONToken.RBRACKET;\r\n                    next();\r\n                    return;\r\n                }\r\n                if (ch == EOI) {\r\n                    token = JSONToken.EOF;\r\n                    return;\r\n                }\r\n                break;\r\n            case JSONToken.LITERAL_INT:\r\n                if (ch >= '0' && ch <= '9') {\r\n                    pos = bp;\r\n                    scanNumber();\r\n                    return;\r\n                }\r\n                if (ch == '\"') {\r\n                    pos = bp;\r\n                    scanString();\r\n                    return;\r\n                }\r\n                if (ch == '[') {\r\n                    token = JSONToken.LBRACKET;\r\n                    next();\r\n                    return;\r\n                }\r\n                if (ch == '{') {\r\n                    token = JSONToken.LBRACE;\r\n                    next();\r\n                    return;\r\n                }\r\n                break;\r\n            case JSONToken.LITERAL_STRING:\r\n                if (ch == '\"') {\r\n                    pos = bp;\r\n                    scanString();\r\n                    return;\r\n                }\r\n                if (ch >= '0' && ch <= '9') {\r\n                    pos = bp;\r\n                    scanNumber();\r\n                    return;\r\n                }\r\n                if (ch == '[') {\r\n                    token = JSONToken.LBRACKET;\r\n                    next();\r\n                    return;\r\n                }\r\n                if (ch == '{') {\r\n                    token = JSONToken.LBRACE;\r\n                    next();\r\n                    return;\r\n                }\r\n                break;\r\n            case JSONToken.LBRACKET:\r\n                if (ch == '[') {\r\n                    token = JSONToken.LBRACKET;\r\n                    next();\r\n                    return;\r\n                }\r\n                if (ch == '{') {\r\n                    token = JSONToken.LBRACE;\r\n                    next();\r\n                    return;\r\n                }\r\n                break;\r\n            case JSONToken.RBRACKET:\r\n                if (ch == ']') {\r\n                    token = JSONToken.RBRACKET;\r\n                    next();\r\n                    return;\r\n                }\r\n            case JSONToken.EOF:\r\n                if (ch == EOI) {\r\n                    token = JSONToken.EOF;\r\n                    return;\r\n                }\r\n                break;\r\n            case JSONToken.IDENTIFIER:\r\n                nextIdent();\r\n                return;\r\n            default:\r\n                break;\r\n        }\r\n        if (ch == ' ' || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == '\\f' || ch == '\\b') {\r\n            next();\r\n            continue;\r\n        }\r\n        nextToken();\r\n        break;\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.nextToken", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.nextToken(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "nextIdent", "return_type": "void", "signature": "nextIdent()", "body_content": "{\r\n    while (isWhitespace(ch)) {\r\n        next();\r\n    }\r\n    if (ch == '_' || Character.isLetter(ch)) {\r\n        scanIdent();\r\n    } else {\r\n        nextToken();\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.nextIdent", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.nextIdent()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "nextTokenWithColon", "return_type": "void", "signature": "nextTokenWithColon()", "body_content": "{\r\n    nextTokenWithChar(':');\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.nextTokenWithColon", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.nextTokenWithColon()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "nextTokenWithChar", "return_type": "void", "signature": "nextTokenWithChar(char)", "body_content": "{\r\n    sp = 0;\r\n    for (; ; ) {\r\n        if (ch == expect) {\r\n            next();\r\n            nextToken();\r\n            return;\r\n        }\r\n        if (ch == ' ' || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == '\\f' || ch == '\\b') {\r\n            next();\r\n            continue;\r\n        }\r\n        throw new JSONException(\"not match \" + expect + \" - \" + ch);\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.nextTokenWithChar", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.nextTokenWithChar(char)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "token", "return_type": "int", "signature": "token()", "body_content": "{\r\n    return token;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.token", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.token()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "tokenName", "return_type": "String", "signature": "tokenName()", "body_content": "{\r\n    return JSONToken.name(token);\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.tokenName", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.tokenName()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "pos", "return_type": "int", "signature": "pos()", "body_content": "{\r\n    return pos;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.pos", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.pos()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "stringDefaultValue", "return_type": "String", "signature": "stringDefaultValue()", "body_content": "{\r\n    return stringDefaultValue;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.stringDefaultValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.stringDefaultValue()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "integerValue", "return_type": "Number", "signature": "integerValue()", "body_content": "{\r\n    long result = 0;\r\n    boolean negative = false;\r\n    if (np == -1) {\r\n        np = 0;\r\n    }\r\n    int i = np, max = np + sp;\r\n    long limit;\r\n    long multmin;\r\n    int digit;\r\n    char type = ' ';\r\n    switch(charAt(max - 1)) {\r\n        case 'L':\r\n            max--;\r\n            type = 'L';\r\n            break;\r\n        case 'S':\r\n            max--;\r\n            type = 'S';\r\n            break;\r\n        case 'B':\r\n            max--;\r\n            type = 'B';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    if (charAt(np) == '-') {\r\n        negative = true;\r\n        limit = Long.MIN_VALUE;\r\n        i++;\r\n    } else {\r\n        limit = -Long.MAX_VALUE;\r\n    }\r\n    multmin = MULTMIN_RADIX_TEN;\r\n    if (i < max) {\r\n        digit = charAt(i++) - '0';\r\n        result = -digit;\r\n    }\r\n    while (i < max) {\r\n        // Accumulating negatively avoids surprises near MAX_VALUE\r\n        digit = charAt(i++) - '0';\r\n        if (result < multmin) {\r\n            return new BigInteger(numberString());\r\n        }\r\n        result *= 10;\r\n        if (result < limit + digit) {\r\n            return new BigInteger(numberString());\r\n        }\r\n        result -= digit;\r\n    }\r\n    if (negative) {\r\n        if (i > np + 1) {\r\n            if (result >= Integer.MIN_VALUE && type != 'L') {\r\n                if (type == 'S') {\r\n                    return (short) result;\r\n                }\r\n                if (type == 'B') {\r\n                    return (byte) result;\r\n                }\r\n                return (int) result;\r\n            }\r\n            return result;\r\n        } else {\r\n            /* Only got \"-\" */\r\n            throw new NumberFormatException(numberString());\r\n        }\r\n    } else {\r\n        result = -result;\r\n        if (result <= Integer.MAX_VALUE && type != 'L') {\r\n            if (type == 'S') {\r\n                return (short) result;\r\n            }\r\n            if (type == 'B') {\r\n                return (byte) result;\r\n            }\r\n            return (int) result;\r\n        }\r\n        return result;\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.integerValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.integerValue()", "qualified_return_type": "java.lang.Number"}
{"java_doc": "", "method_name": "nextTokenWithColon", "return_type": "void", "signature": "nextTokenWithColon(int)", "body_content": "{\r\n    nextTokenWithChar(':');\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.nextTokenWithColon", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.nextTokenWithColon(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "floatValue", "return_type": "float", "signature": "floatValue()", "body_content": "{\r\n    String strVal = numberString();\r\n    float floatValue = Float.parseFloat(strVal);\r\n    if (floatValue == 0 || floatValue == Float.POSITIVE_INFINITY) {\r\n        char c0 = strVal.charAt(0);\r\n        if (c0 > '0' && c0 <= '9') {\r\n            throw new JSONException(\"float overflow : \" + strVal);\r\n        }\r\n    }\r\n    return floatValue;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.floatValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.floatValue()", "qualified_return_type": "float"}
{"java_doc": "", "method_name": "doubleValue", "return_type": "double", "signature": "doubleValue()", "body_content": "{\r\n    return Double.parseDouble(numberString());\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.doubleValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.doubleValue()", "qualified_return_type": "double"}
{"java_doc": "", "method_name": "config", "return_type": "void", "signature": "config(Feature, boolean)", "body_content": "{\r\n    features = Feature.config(features, feature, state);\r\n    if ((features & Feature.InitStringFieldAsEmpty.mask) != 0) {\r\n        stringDefaultValue = \"\";\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.config", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.config(com.alibaba.fastjson.parser.Feature, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "isEnabled", "return_type": "boolean", "signature": "isEnabled(Feature)", "body_content": "{\r\n    return isEnabled(feature.mask);\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.isEnabled", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.isEnabled(com.alibaba.fastjson.parser.Feature)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isEnabled", "return_type": "boolean", "signature": "isEnabled(int)", "body_content": "{\r\n    return (this.features & feature) != 0;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.isEnabled", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.isEnabled(int)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isEnabled", "return_type": "boolean", "signature": "isEnabled(int, int)", "body_content": "{\r\n    return (this.features & feature) != 0 || (features & feature) != 0;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.isEnabled", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.isEnabled(int, int)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "numberString", "return_type": "String", "signature": "numberString()", "body_content": "", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.numberString", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.numberString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "isEOF", "return_type": "boolean", "signature": "isEOF()", "body_content": "", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.isEOF", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.isEOF()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getCurrent", "return_type": "char", "signature": "getCurrent()", "body_content": "{\r\n    return ch;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.getCurrent", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.getCurrent()", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "charAt", "return_type": "char", "signature": "charAt(int)", "body_content": "", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.charAt", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.charAt(int)", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "next", "return_type": "char", "signature": "next()", "body_content": "", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.next", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.next()", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "skipComment", "return_type": "void", "signature": "skipComment()", "body_content": "{\r\n    next();\r\n    if (ch == '/') {\r\n        for (; ; ) {\r\n            next();\r\n            if (ch == '\\n') {\r\n                next();\r\n                return;\r\n            }\r\n        }\r\n    } else if (ch == '*') {\r\n        next();\r\n        for (; ch != EOI; ) {\r\n            if (ch == '*') {\r\n                next();\r\n                if (ch == '/') {\r\n                    next();\r\n                    return;\r\n                } else {\r\n                    continue;\r\n                }\r\n            }\r\n            next();\r\n        }\r\n    } else {\r\n        throw new JSONException(\"invalid comment\");\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.skipComment", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.skipComment()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "scanSymbol", "return_type": "String", "signature": "scanSymbol(SymbolTable)", "body_content": "{\r\n    skipWhitespace();\r\n    if (ch == '\"') {\r\n        return scanSymbol(symbolTable, '\"');\r\n    }\r\n    if (ch == '\\'') {\r\n        if (!isEnabled(Feature.AllowSingleQuotes)) {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        return scanSymbol(symbolTable, '\\'');\r\n    }\r\n    if (ch == '}') {\r\n        next();\r\n        token = JSONToken.RBRACE;\r\n        return null;\r\n    }\r\n    if (ch == ',') {\r\n        next();\r\n        token = JSONToken.COMMA;\r\n        return null;\r\n    }\r\n    if (ch == EOI) {\r\n        token = JSONToken.EOF;\r\n        return null;\r\n    }\r\n    if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\r\n        throw new JSONException(\"syntax error\");\r\n    }\r\n    return scanSymbolUnQuoted(symbolTable);\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanSymbol", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanSymbol(com.alibaba.fastjson.parser.SymbolTable)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "arrayCopy", "return_type": "void", "signature": "arrayCopy(int, char[], int, int)", "body_content": "", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.arrayCopy", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.arrayCopy(int, char[], int, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "scanSymbol", "return_type": "String", "signature": "scanSymbol(SymbolTable, char)", "body_content": "{\r\n    int hash = 0;\r\n    np = bp;\r\n    sp = 0;\r\n    boolean hasSpecial = false;\r\n    char chLocal;\r\n    for (; ; ) {\r\n        chLocal = next();\r\n        if (chLocal == quote) {\r\n            break;\r\n        }\r\n        if (chLocal == EOI) {\r\n            throw new JSONException(\"unclosed.str\");\r\n        }\r\n        if (chLocal == '\\\\') {\r\n            if (!hasSpecial) {\r\n                hasSpecial = true;\r\n                if (sp >= sbuf.length) {\r\n                    int newCapcity = sbuf.length * 2;\r\n                    if (sp > newCapcity) {\r\n                        newCapcity = sp;\r\n                    }\r\n                    char[] newsbuf = new char[newCapcity];\r\n                    System.arraycopy(sbuf, 0, newsbuf, 0, sbuf.length);\r\n                    sbuf = newsbuf;\r\n                }\r\n                // text.getChars(np + 1, np + 1 + sp, sbuf, 0);\r\n                // System.arraycopy(this.buf, np + 1, sbuf, 0, sp);\r\n                arrayCopy(np + 1, sbuf, 0, sp);\r\n            }\r\n            chLocal = next();\r\n            switch(chLocal) {\r\n                case '0':\r\n                    hash = 31 * hash + (int) chLocal;\r\n                    putChar('\\0');\r\n                    break;\r\n                case '1':\r\n                    hash = 31 * hash + (int) chLocal;\r\n                    putChar('\\1');\r\n                    break;\r\n                case '2':\r\n                    hash = 31 * hash + (int) chLocal;\r\n                    putChar('\\2');\r\n                    break;\r\n                case '3':\r\n                    hash = 31 * hash + (int) chLocal;\r\n                    putChar('\\3');\r\n                    break;\r\n                case '4':\r\n                    hash = 31 * hash + (int) chLocal;\r\n                    putChar('\\4');\r\n                    break;\r\n                case '5':\r\n                    hash = 31 * hash + (int) chLocal;\r\n                    putChar('\\5');\r\n                    break;\r\n                case '6':\r\n                    hash = 31 * hash + (int) chLocal;\r\n                    putChar('\\6');\r\n                    break;\r\n                case '7':\r\n                    hash = 31 * hash + (int) chLocal;\r\n                    putChar('\\7');\r\n                    break;\r\n                case // 8\r\n                'b':\r\n                    hash = 31 * hash + (int) '\\b';\r\n                    putChar('\\b');\r\n                    break;\r\n                case // 9\r\n                't':\r\n                    hash = 31 * hash + (int) '\\t';\r\n                    putChar('\\t');\r\n                    break;\r\n                case // 10\r\n                'n':\r\n                    hash = 31 * hash + (int) '\\n';\r\n                    putChar('\\n');\r\n                    break;\r\n                case // 11\r\n                'v':\r\n                    hash = 31 * hash + (int) '\\u000B';\r\n                    putChar('\\u000B');\r\n                    break;\r\n                // 12\r\n                case 'f':\r\n                case 'F':\r\n                    hash = 31 * hash + (int) '\\f';\r\n                    putChar('\\f');\r\n                    break;\r\n                case // 13\r\n                'r':\r\n                    hash = 31 * hash + (int) '\\r';\r\n                    putChar('\\r');\r\n                    break;\r\n                case // 34\r\n                '\"':\r\n                    hash = 31 * hash + (int) '\"';\r\n                    putChar('\"');\r\n                    break;\r\n                case // 39\r\n                '\\'':\r\n                    hash = 31 * hash + (int) '\\'';\r\n                    putChar('\\'');\r\n                    break;\r\n                case // 47\r\n                '/':\r\n                    hash = 31 * hash + (int) '/';\r\n                    putChar('/');\r\n                    break;\r\n                case // 92\r\n                '\\\\':\r\n                    hash = 31 * hash + (int) '\\\\';\r\n                    putChar('\\\\');\r\n                    break;\r\n                case 'x':\r\n                    char x1 = ch = next();\r\n                    char x2 = ch = next();\r\n                    int x_val = digits[x1] * 16 + digits[x2];\r\n                    char x_char = (char) x_val;\r\n                    hash = 31 * hash + (int) x_char;\r\n                    putChar(x_char);\r\n                    break;\r\n                case 'u':\r\n                    char c1 = chLocal = next();\r\n                    char c2 = chLocal = next();\r\n                    char c3 = chLocal = next();\r\n                    char c4 = chLocal = next();\r\n                    int val = Integer.parseInt(new String(new char[] { c1, c2, c3, c4 }), 16);\r\n                    hash = 31 * hash + val;\r\n                    putChar((char) val);\r\n                    break;\r\n                default:\r\n                    this.ch = chLocal;\r\n                    throw new JSONException(\"unclosed.str.lit\");\r\n            }\r\n            continue;\r\n        }\r\n        hash = 31 * hash + chLocal;\r\n        if (!hasSpecial) {\r\n            sp++;\r\n            continue;\r\n        }\r\n        if (sp == sbuf.length) {\r\n            putChar(chLocal);\r\n        } else {\r\n            sbuf[sp++] = chLocal;\r\n        }\r\n    }\r\n    token = LITERAL_STRING;\r\n    String value;\r\n    if (!hasSpecial) {\r\n        // return this.text.substring(np + 1, np + 1 + sp).intern();\r\n        int offset;\r\n        if (np == -1) {\r\n            offset = 0;\r\n        } else {\r\n            offset = np + 1;\r\n        }\r\n        value = addSymbol(offset, sp, hash, symbolTable);\r\n    } else {\r\n        value = symbolTable.addSymbol(sbuf, 0, sp, hash);\r\n    }\r\n    sp = 0;\r\n    this.next();\r\n    return value;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanSymbol", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanSymbol(com.alibaba.fastjson.parser.SymbolTable, char)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "resetStringPosition", "return_type": "void", "signature": "resetStringPosition()", "body_content": "{\r\n    this.sp = 0;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.resetStringPosition", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.resetStringPosition()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "info", "return_type": "String", "signature": "info()", "body_content": "{\r\n    return \"\";\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.info", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.info()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "scanSymbolUnQuoted", "return_type": "String", "signature": "scanSymbolUnQuoted(SymbolTable)", "body_content": "{\r\n    final boolean[] firstIdentifierFlags = IOUtils.firstIdentifierFlags;\r\n    final char first = ch;\r\n    final boolean firstFlag = ch >= firstIdentifierFlags.length || firstIdentifierFlags[first];\r\n    if (!firstFlag) {\r\n        throw new JSONException(// \r\n        \"illegal identifier : \" + ch + info());\r\n    }\r\n    final boolean[] identifierFlags = IOUtils.identifierFlags;\r\n    int hash = first;\r\n    np = bp;\r\n    sp = 1;\r\n    char chLocal;\r\n    for (; ; ) {\r\n        chLocal = next();\r\n        if (chLocal < identifierFlags.length) {\r\n            if (!identifierFlags[chLocal]) {\r\n                break;\r\n            }\r\n        }\r\n        hash = 31 * hash + chLocal;\r\n        sp++;\r\n        continue;\r\n    }\r\n    this.ch = charAt(bp);\r\n    token = JSONToken.IDENTIFIER;\r\n    final int NULL_HASH = 3392903;\r\n    if (sp == 4 && hash == NULL_HASH && charAt(np) == 'n' && charAt(np + 1) == 'u' && charAt(np + 2) == 'l' && charAt(np + 3) == 'l') {\r\n        return null;\r\n    }\r\n    // return text.substring(np, np + sp).intern();\r\n    return this.addSymbol(np, sp, hash, symbolTable);\r\n    // return symbolTable.addSymbol(buf, np, sp, hash);\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanSymbolUnQuoted", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanSymbolUnQuoted(com.alibaba.fastjson.parser.SymbolTable)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "copyTo", "return_type": "void", "signature": "copyTo(int, int, char[])", "body_content": "", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.copyTo", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.copyTo(int, int, char[])", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "scanString", "return_type": "void", "signature": "scanString()", "body_content": "{\r\n    np = bp;\r\n    hasSpecial = false;\r\n    char ch;\r\n    for (; ; ) {\r\n        ch = next();\r\n        if (ch == '\\\"') {\r\n            break;\r\n        }\r\n        if (ch == EOI) {\r\n            if (!isEOF()) {\r\n                putChar((char) EOI);\r\n                continue;\r\n            }\r\n            throw new JSONException(\"unclosed string : \" + ch);\r\n        }\r\n        if (ch == '\\\\') {\r\n            if (!hasSpecial) {\r\n                hasSpecial = true;\r\n                if (sp >= sbuf.length) {\r\n                    int newCapcity = sbuf.length * 2;\r\n                    if (sp > newCapcity) {\r\n                        newCapcity = sp;\r\n                    }\r\n                    char[] newsbuf = new char[newCapcity];\r\n                    System.arraycopy(sbuf, 0, newsbuf, 0, sbuf.length);\r\n                    sbuf = newsbuf;\r\n                }\r\n                copyTo(np + 1, sp, sbuf);\r\n                // text.getChars(np + 1, np + 1 + sp, sbuf, 0);\r\n                // System.arraycopy(buf, np + 1, sbuf, 0, sp);\r\n            }\r\n            ch = next();\r\n            switch(ch) {\r\n                case '0':\r\n                    putChar('\\0');\r\n                    break;\r\n                case '1':\r\n                    putChar('\\1');\r\n                    break;\r\n                case '2':\r\n                    putChar('\\2');\r\n                    break;\r\n                case '3':\r\n                    putChar('\\3');\r\n                    break;\r\n                case '4':\r\n                    putChar('\\4');\r\n                    break;\r\n                case '5':\r\n                    putChar('\\5');\r\n                    break;\r\n                case '6':\r\n                    putChar('\\6');\r\n                    break;\r\n                case '7':\r\n                    putChar('\\7');\r\n                    break;\r\n                case // 8\r\n                'b':\r\n                    putChar('\\b');\r\n                    break;\r\n                case // 9\r\n                't':\r\n                    putChar('\\t');\r\n                    break;\r\n                case // 10\r\n                'n':\r\n                    putChar('\\n');\r\n                    break;\r\n                case // 11\r\n                'v':\r\n                    putChar('\\u000B');\r\n                    break;\r\n                // 12\r\n                case 'f':\r\n                case 'F':\r\n                    putChar('\\f');\r\n                    break;\r\n                case // 13\r\n                'r':\r\n                    putChar('\\r');\r\n                    break;\r\n                case // 34\r\n                '\"':\r\n                    putChar('\"');\r\n                    break;\r\n                case // 39\r\n                '\\'':\r\n                    putChar('\\'');\r\n                    break;\r\n                case // 47\r\n                '/':\r\n                    putChar('/');\r\n                    break;\r\n                case // 92\r\n                '\\\\':\r\n                    putChar('\\\\');\r\n                    break;\r\n                case 'x':\r\n                    char x1 = ch = next();\r\n                    char x2 = ch = next();\r\n                    int x_val = digits[x1] * 16 + digits[x2];\r\n                    char x_char = (char) x_val;\r\n                    putChar(x_char);\r\n                    break;\r\n                case 'u':\r\n                    char u1 = ch = next();\r\n                    char u2 = ch = next();\r\n                    char u3 = ch = next();\r\n                    char u4 = ch = next();\r\n                    int val = Integer.parseInt(new String(new char[] { u1, u2, u3, u4 }), 16);\r\n                    putChar((char) val);\r\n                    break;\r\n                default:\r\n                    this.ch = ch;\r\n                    throw new JSONException(\"unclosed string : \" + ch);\r\n            }\r\n            continue;\r\n        }\r\n        if (!hasSpecial) {\r\n            sp++;\r\n            continue;\r\n        }\r\n        if (sp == sbuf.length) {\r\n            putChar(ch);\r\n        } else {\r\n            sbuf[sp++] = ch;\r\n        }\r\n    }\r\n    token = JSONToken.LITERAL_STRING;\r\n    this.ch = next();\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanString", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanString()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getCalendar", "return_type": "Calendar", "signature": "getCalendar()", "body_content": "{\r\n    return this.calendar;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.getCalendar", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.getCalendar()", "qualified_return_type": "java.util.Calendar"}
{"java_doc": "", "method_name": "getTimeZone", "return_type": "TimeZone", "signature": "getTimeZone()", "body_content": "{\r\n    return timeZone;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.getTimeZone", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.getTimeZone()", "qualified_return_type": "java.util.TimeZone"}
{"java_doc": "", "method_name": "setTimeZone", "return_type": "void", "signature": "setTimeZone(TimeZone)", "body_content": "{\r\n    this.timeZone = timeZone;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.setTimeZone", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.setTimeZone(java.util.TimeZone)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getLocale", "return_type": "Locale", "signature": "getLocale()", "body_content": "{\r\n    return locale;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.getLocale", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.getLocale()", "qualified_return_type": "java.util.Locale"}
{"java_doc": "", "method_name": "setLocale", "return_type": "void", "signature": "setLocale(Locale)", "body_content": "{\r\n    this.locale = locale;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.setLocale", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.setLocale(java.util.Locale)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "intValue", "return_type": "int", "signature": "intValue()", "body_content": "{\r\n    if (np == -1) {\r\n        np = 0;\r\n    }\r\n    int result = 0;\r\n    boolean negative = false;\r\n    int i = np, max = np + sp;\r\n    int limit;\r\n    int digit;\r\n    if (charAt(np) == '-') {\r\n        negative = true;\r\n        limit = Integer.MIN_VALUE;\r\n        i++;\r\n    } else {\r\n        limit = -Integer.MAX_VALUE;\r\n    }\r\n    long multmin = INT_MULTMIN_RADIX_TEN;\r\n    if (i < max) {\r\n        digit = charAt(i++) - '0';\r\n        result = -digit;\r\n    }\r\n    while (i < max) {\r\n        // Accumulating negatively avoids surprises near MAX_VALUE\r\n        char chLocal = charAt(i++);\r\n        if (chLocal == 'L' || chLocal == 'S' || chLocal == 'B') {\r\n            break;\r\n        }\r\n        digit = chLocal - '0';\r\n        if (result < multmin) {\r\n            throw new NumberFormatException(numberString());\r\n        }\r\n        result *= 10;\r\n        if (result < limit + digit) {\r\n            throw new NumberFormatException(numberString());\r\n        }\r\n        result -= digit;\r\n    }\r\n    if (negative) {\r\n        if (i > np + 1) {\r\n            return result;\r\n        } else {\r\n            /* Only got \"-\" */\r\n            throw new NumberFormatException(numberString());\r\n        }\r\n    } else {\r\n        return -result;\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.intValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.intValue()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "bytesValue", "return_type": "byte[]", "signature": "bytesValue()", "body_content": "", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.bytesValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.bytesValue()", "qualified_return_type": "byte[]"}
{"java_doc": "", "method_name": "close", "return_type": "void", "signature": "close()", "body_content": "{\r\n    if (sbuf.length <= 1024 * 8) {\r\n        SBUF_LOCAL.set(sbuf);\r\n    }\r\n    this.sbuf = null;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.close", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.close()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "isRef", "return_type": "boolean", "signature": "isRef()", "body_content": "{\r\n    if (sp != 4) {\r\n        return false;\r\n    }\r\n    return // \r\n    charAt(np + 1) == '$' && // \r\n    charAt(np + 2) == 'r' && // \r\n    charAt(np + 3) == 'e' && charAt(np + 4) == 'f';\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.isRef", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.isRef()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "scanType", "return_type": "int", "signature": "scanType(String)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    if (!charArrayCompare(typeFieldName)) {\r\n        return NOT_MATCH_NAME;\r\n    }\r\n    int bpLocal = this.bp + typeFieldName.length;\r\n    final int typeLength = type.length();\r\n    for (int i = 0; i < typeLength; ++i) {\r\n        if (type.charAt(i) != charAt(bpLocal + i)) {\r\n            return NOT_MATCH;\r\n        }\r\n    }\r\n    bpLocal += typeLength;\r\n    if (charAt(bpLocal) != '\"') {\r\n        return NOT_MATCH;\r\n    }\r\n    this.ch = charAt(++bpLocal);\r\n    if (ch == ',') {\r\n        this.ch = charAt(++bpLocal);\r\n        this.bp = bpLocal;\r\n        token = JSONToken.COMMA;\r\n        return VALUE;\r\n    } else if (ch == '}') {\r\n        ch = charAt(++bpLocal);\r\n        if (ch == ',') {\r\n            token = JSONToken.COMMA;\r\n            this.ch = charAt(++bpLocal);\r\n        } else if (ch == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            this.ch = charAt(++bpLocal);\r\n        } else if (ch == '}') {\r\n            token = JSONToken.RBRACE;\r\n            this.ch = charAt(++bpLocal);\r\n        } else if (ch == EOI) {\r\n            token = JSONToken.EOF;\r\n        } else {\r\n            return NOT_MATCH;\r\n        }\r\n        matchStat = END;\r\n    }\r\n    this.bp = bpLocal;\r\n    return matchStat;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanType", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanType(java.lang.String)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "matchField", "return_type": "boolean", "signature": "matchField(char[])", "body_content": "{\r\n    if (!charArrayCompare(fieldName)) {\r\n        return false;\r\n    }\r\n    bp = bp + fieldName.length;\r\n    ch = charAt(bp);\r\n    if (ch == '{') {\r\n        next();\r\n        token = JSONToken.LBRACE;\r\n    } else if (ch == '[') {\r\n        next();\r\n        token = JSONToken.LBRACKET;\r\n    } else if (ch == 'S' && charAt(bp + 1) == 'e' && charAt(bp + 2) == 't' && charAt(bp + 3) == '[') {\r\n        bp += 3;\r\n        ch = charAt(bp);\r\n        token = JSONToken.SET;\r\n    } else {\r\n        nextToken();\r\n    }\r\n    return true;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.matchField", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.matchField(char[])", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "indexOf", "return_type": "int", "signature": "indexOf(char, int)", "body_content": "", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.indexOf", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.indexOf(char, int)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "addSymbol", "return_type": "String", "signature": "addSymbol(int, int, int, SymbolTable)", "body_content": "", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.addSymbol", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.addSymbol(int, int, int, com.alibaba.fastjson.parser.SymbolTable)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "scanFieldString", "return_type": "String", "signature": "scanFieldString(char[])", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    if (!charArrayCompare(fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return stringDefaultValue();\r\n    }\r\n    // int index = bp + fieldName.length;\r\n    int offset = fieldName.length;\r\n    char chLocal = charAt(bp + (offset++));\r\n    if (chLocal != '\"') {\r\n        matchStat = NOT_MATCH;\r\n        return stringDefaultValue();\r\n    }\r\n    final String strVal;\r\n    {\r\n        int startIndex = bp + fieldName.length + 1;\r\n        int endIndex = indexOf('\"', startIndex);\r\n        if (endIndex == -1) {\r\n            throw new JSONException(\"unclosed str\");\r\n        }\r\n        // must re compute\r\n        int startIndex2 = bp + fieldName.length + 1;\r\n        String stringVal = subString(startIndex2, endIndex - startIndex2);\r\n        if (stringVal.indexOf('\\\\') != -1) {\r\n            for (; ; ) {\r\n                int slashCount = 0;\r\n                for (int i = endIndex - 1; i >= 0; --i) {\r\n                    if (charAt(i) == '\\\\') {\r\n                        slashCount++;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n                if (slashCount % 2 == 0) {\r\n                    break;\r\n                }\r\n                endIndex = indexOf('\"', endIndex + 1);\r\n            }\r\n            int chars_len = endIndex - (bp + fieldName.length + 1);\r\n            char[] chars = sub_chars(bp + fieldName.length + 1, chars_len);\r\n            stringVal = readString(chars, chars_len);\r\n        }\r\n        offset += (endIndex - (bp + fieldName.length + 1) + 1);\r\n        chLocal = charAt(bp + (offset++));\r\n        strVal = stringVal;\r\n    }\r\n    if (chLocal == ',') {\r\n        bp += offset;\r\n        this.ch = this.charAt(bp);\r\n        matchStat = VALUE;\r\n        return strVal;\r\n    }\r\n    if (chLocal == '}') {\r\n        chLocal = charAt(bp + (offset++));\r\n        if (chLocal == ',') {\r\n            token = JSONToken.COMMA;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == '}') {\r\n            token = JSONToken.RBRACE;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == EOI) {\r\n            token = JSONToken.EOF;\r\n            bp += (offset - 1);\r\n            ch = EOI;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return stringDefaultValue();\r\n        }\r\n        matchStat = END;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return stringDefaultValue();\r\n    }\r\n    return strVal;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldString", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldString(char[])", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "scanString", "return_type": "String", "signature": "scanString(char)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    int offset = 0;\r\n    char chLocal = charAt(bp + (offset++));\r\n    if (chLocal == 'n') {\r\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\r\n            offset += 3;\r\n            chLocal = charAt(bp + (offset++));\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return null;\r\n        }\r\n        if (chLocal == expectNextChar) {\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n            matchStat = VALUE;\r\n            return null;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return null;\r\n        }\r\n    }\r\n    if (chLocal != '\"') {\r\n        matchStat = NOT_MATCH;\r\n        return stringDefaultValue();\r\n    }\r\n    final String strVal;\r\n    {\r\n        int startIndex = bp + 1;\r\n        int endIndex = indexOf('\"', startIndex);\r\n        if (endIndex == -1) {\r\n            throw new JSONException(\"unclosed str\");\r\n        }\r\n        String stringVal = subString(bp + 1, endIndex - startIndex);\r\n        if (stringVal.indexOf('\\\\') != -1) {\r\n            for (; ; ) {\r\n                int slashCount = 0;\r\n                for (int i = endIndex - 1; i >= 0; --i) {\r\n                    if (charAt(i) == '\\\\') {\r\n                        slashCount++;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n                if (slashCount % 2 == 0) {\r\n                    break;\r\n                }\r\n                endIndex = indexOf('\"', endIndex + 1);\r\n            }\r\n            int chars_len = endIndex - startIndex;\r\n            char[] chars = sub_chars(bp + 1, chars_len);\r\n            stringVal = readString(chars, chars_len);\r\n        }\r\n        offset += (endIndex - (bp + 1) + 1);\r\n        chLocal = charAt(bp + (offset++));\r\n        strVal = stringVal;\r\n    }\r\n    if (chLocal == expectNextChar) {\r\n        bp += offset;\r\n        this.ch = charAt(bp);\r\n        matchStat = VALUE;\r\n        return strVal;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return strVal;\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanString", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanString(char)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "scanFieldSymbol", "return_type": "String", "signature": "scanFieldSymbol(char[], SymbolTable)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    if (!charArrayCompare(fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return null;\r\n    }\r\n    int offset = fieldName.length;\r\n    char chLocal = charAt(bp + (offset++));\r\n    if (chLocal != '\"') {\r\n        matchStat = NOT_MATCH;\r\n        return null;\r\n    }\r\n    String strVal;\r\n    int hash = 0;\r\n    for (; ; ) {\r\n        chLocal = charAt(bp + (offset++));\r\n        if (chLocal == '\\\"') {\r\n            int start = bp + fieldName.length + 1;\r\n            int len = bp + offset - start - 1;\r\n            strVal = addSymbol(start, len, hash, symbolTable);\r\n            chLocal = charAt(bp + (offset++));\r\n            break;\r\n        }\r\n        hash = 31 * hash + chLocal;\r\n        if (chLocal == '\\\\') {\r\n            matchStat = NOT_MATCH;\r\n            return null;\r\n        }\r\n    }\r\n    if (chLocal == ',') {\r\n        bp += offset;\r\n        this.ch = this.charAt(bp);\r\n        matchStat = VALUE;\r\n        return strVal;\r\n    }\r\n    if (chLocal == '}') {\r\n        chLocal = charAt(bp + (offset++));\r\n        if (chLocal == ',') {\r\n            token = JSONToken.COMMA;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == '}') {\r\n            token = JSONToken.RBRACE;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == EOI) {\r\n            token = JSONToken.EOF;\r\n            bp += (offset - 1);\r\n            ch = EOI;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return null;\r\n        }\r\n        matchStat = END;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return null;\r\n    }\r\n    return strVal;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldSymbol", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldSymbol(char[], com.alibaba.fastjson.parser.SymbolTable)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "scanEnum", "return_type": "Enum<?>", "signature": "scanEnum(Class, SymbolTable, char)", "body_content": "{\r\n    String name = scanSymbolWithSeperator(symbolTable, serperator);\r\n    if (name == null) {\r\n        return null;\r\n    }\r\n    return Enum.valueOf((Class<? extends Enum>) enumClass, name);\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanEnum", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanEnum(java.lang.Class<?>, com.alibaba.fastjson.parser.SymbolTable, char)", "qualified_return_type": "java.lang.Enum<?>"}
{"java_doc": "", "method_name": "scanSymbolWithSeperator", "return_type": "String", "signature": "scanSymbolWithSeperator(SymbolTable, char)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    int offset = 0;\r\n    char chLocal = charAt(bp + (offset++));\r\n    if (chLocal == 'n') {\r\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\r\n            offset += 3;\r\n            chLocal = charAt(bp + (offset++));\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return null;\r\n        }\r\n        if (chLocal == serperator) {\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n            matchStat = VALUE;\r\n            return null;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return null;\r\n        }\r\n    }\r\n    if (chLocal != '\"') {\r\n        matchStat = NOT_MATCH;\r\n        return null;\r\n    }\r\n    String strVal;\r\n    // int start = index;\r\n    int hash = 0;\r\n    for (; ; ) {\r\n        chLocal = charAt(bp + (offset++));\r\n        if (chLocal == '\\\"') {\r\n            // bp = index;\r\n            // this.ch = chLocal = charAt(bp);\r\n            int start = bp + 0 + 1;\r\n            int len = bp + offset - start - 1;\r\n            strVal = addSymbol(start, len, hash, symbolTable);\r\n            chLocal = charAt(bp + (offset++));\r\n            break;\r\n        }\r\n        hash = 31 * hash + chLocal;\r\n        if (chLocal == '\\\\') {\r\n            matchStat = NOT_MATCH;\r\n            return null;\r\n        }\r\n    }\r\n    for (; ; ) {\r\n        if (chLocal == serperator) {\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n            matchStat = VALUE;\r\n            return strVal;\r\n        } else {\r\n            if (isWhitespace(chLocal)) {\r\n                chLocal = charAt(bp + (offset++));\r\n                continue;\r\n            }\r\n            matchStat = NOT_MATCH;\r\n            return strVal;\r\n        }\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanSymbolWithSeperator", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanSymbolWithSeperator(com.alibaba.fastjson.parser.SymbolTable, char)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "scanFieldStringArray", "return_type": "Collection<String>", "signature": "scanFieldStringArray(char[], Class)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    if (!charArrayCompare(fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return null;\r\n    }\r\n    Collection<String> list;\r\n    if (type.isAssignableFrom(HashSet.class)) {\r\n        list = new HashSet<String>();\r\n    } else if (type.isAssignableFrom(ArrayList.class)) {\r\n        list = new ArrayList<String>();\r\n    } else {\r\n        try {\r\n            list = (Collection<String>) type.newInstance();\r\n        } catch (Exception e) {\r\n            throw new JSONException(e.getMessage(), e);\r\n        }\r\n    }\r\n    // int index = bp + fieldName.length;\r\n    int offset = fieldName.length;\r\n    char chLocal = charAt(bp + (offset++));\r\n    if (chLocal != '[') {\r\n        matchStat = NOT_MATCH;\r\n        return null;\r\n    }\r\n    chLocal = charAt(bp + (offset++));\r\n    for (; ; ) {\r\n        // int start = index;\r\n        if (chLocal == '\"') {\r\n            int startIndex = bp + offset;\r\n            int endIndex = indexOf('\"', startIndex);\r\n            if (endIndex == -1) {\r\n                throw new JSONException(\"unclosed str\");\r\n            }\r\n            // must re compute\r\n            int startIndex2 = bp + offset;\r\n            String stringVal = subString(startIndex2, endIndex - startIndex2);\r\n            if (stringVal.indexOf('\\\\') != -1) {\r\n                for (; ; ) {\r\n                    int slashCount = 0;\r\n                    for (int i = endIndex - 1; i >= 0; --i) {\r\n                        if (charAt(i) == '\\\\') {\r\n                            slashCount++;\r\n                        } else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (slashCount % 2 == 0) {\r\n                        break;\r\n                    }\r\n                    endIndex = indexOf('\"', endIndex + 1);\r\n                }\r\n                int chars_len = endIndex - (bp + offset);\r\n                char[] chars = sub_chars(bp + offset, chars_len);\r\n                stringVal = readString(chars, chars_len);\r\n            }\r\n            offset += (endIndex - (bp + offset) + 1);\r\n            chLocal = charAt(bp + (offset++));\r\n            list.add(stringVal);\r\n        } else if (// \r\n        chLocal == 'n' && // \r\n        charAt(bp + offset) == 'u' && // \r\n        charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\r\n            offset += 3;\r\n            chLocal = charAt(bp + (offset++));\r\n            list.add(null);\r\n        } else if (chLocal == ']' && list.size() == 0) {\r\n            chLocal = charAt(bp + (offset++));\r\n            break;\r\n        } else {\r\n            throw new JSONException(\"illega str\");\r\n        }\r\n        if (chLocal == ',') {\r\n            chLocal = charAt(bp + (offset++));\r\n            continue;\r\n        }\r\n        if (chLocal == ']') {\r\n            chLocal = charAt(bp + (offset++));\r\n            break;\r\n        }\r\n        matchStat = NOT_MATCH;\r\n        return null;\r\n    }\r\n    if (chLocal == ',') {\r\n        bp += offset;\r\n        this.ch = this.charAt(bp);\r\n        matchStat = VALUE;\r\n        return list;\r\n    }\r\n    if (chLocal == '}') {\r\n        chLocal = charAt(bp + (offset++));\r\n        if (chLocal == ',') {\r\n            token = JSONToken.COMMA;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == '}') {\r\n            token = JSONToken.RBRACE;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == EOI) {\r\n            bp += (offset - 1);\r\n            token = JSONToken.EOF;\r\n            this.ch = EOI;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return null;\r\n        }\r\n        matchStat = END;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return null;\r\n    }\r\n    return list;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldStringArray", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldStringArray(char[], java.lang.Class<?>)", "qualified_return_type": "java.util.Collection<java.lang.String>"}
{"java_doc": "", "method_name": "scanStringArray", "return_type": "void", "signature": "scanStringArray(Collection, char)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    int offset = 0;\r\n    char chLocal = charAt(bp + (offset++));\r\n    if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == seperator) {\r\n        bp += 5;\r\n        ch = charAt(bp);\r\n        matchStat = VALUE_NULL;\r\n        return;\r\n    }\r\n    if (chLocal != '[') {\r\n        matchStat = NOT_MATCH;\r\n        return;\r\n    }\r\n    chLocal = charAt(bp + (offset++));\r\n    for (; ; ) {\r\n        if (// \r\n        chLocal == 'n' && // \r\n        charAt(bp + offset) == 'u' && // \r\n        charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\r\n            offset += 3;\r\n            chLocal = charAt(bp + (offset++));\r\n            list.add(null);\r\n        } else if (chLocal == ']' && list.size() == 0) {\r\n            chLocal = charAt(bp + (offset++));\r\n            break;\r\n        } else if (chLocal != '\"') {\r\n            matchStat = NOT_MATCH;\r\n            return;\r\n        } else {\r\n            int startIndex = bp + offset;\r\n            int endIndex = indexOf('\"', startIndex);\r\n            if (endIndex == -1) {\r\n                throw new JSONException(\"unclosed str\");\r\n            }\r\n            String stringVal = subString(bp + offset, endIndex - startIndex);\r\n            if (stringVal.indexOf('\\\\') != -1) {\r\n                for (; ; ) {\r\n                    int slashCount = 0;\r\n                    for (int i = endIndex - 1; i >= 0; --i) {\r\n                        if (charAt(i) == '\\\\') {\r\n                            slashCount++;\r\n                        } else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (slashCount % 2 == 0) {\r\n                        break;\r\n                    }\r\n                    endIndex = indexOf('\"', endIndex + 1);\r\n                }\r\n                int chars_len = endIndex - startIndex;\r\n                char[] chars = sub_chars(bp + offset, chars_len);\r\n                stringVal = readString(chars, chars_len);\r\n            }\r\n            offset += (endIndex - (bp + offset) + 1);\r\n            chLocal = charAt(bp + (offset++));\r\n            list.add(stringVal);\r\n        }\r\n        if (chLocal == ',') {\r\n            chLocal = charAt(bp + (offset++));\r\n            continue;\r\n        }\r\n        if (chLocal == ']') {\r\n            chLocal = charAt(bp + (offset++));\r\n            break;\r\n        }\r\n        matchStat = NOT_MATCH;\r\n        return;\r\n    }\r\n    if (chLocal == seperator) {\r\n        bp += offset;\r\n        this.ch = this.charAt(bp);\r\n        matchStat = VALUE;\r\n        return;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return;\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanStringArray", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanStringArray(java.util.Collection<java.lang.String>, char)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "scanFieldInt", "return_type": "int", "signature": "scanFieldInt(char[])", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    if (!charArrayCompare(fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return 0;\r\n    }\r\n    int offset = fieldName.length;\r\n    char chLocal = charAt(bp + (offset++));\r\n    final boolean negative = chLocal == '-';\r\n    if (negative) {\r\n        chLocal = charAt(bp + (offset++));\r\n    }\r\n    int value;\r\n    if (chLocal >= '0' && chLocal <= '9') {\r\n        value = chLocal - '0';\r\n        for (; ; ) {\r\n            chLocal = charAt(bp + (offset++));\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                value = value * 10 + (chLocal - '0');\r\n            } else if (chLocal == '.') {\r\n                matchStat = NOT_MATCH;\r\n                return 0;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (// \r\n        value < 0 || offset > 11 + 3 + fieldName.length) {\r\n            if (// \r\n            value != Integer.MIN_VALUE || // \r\n            offset != 17 || !negative) {\r\n                matchStat = NOT_MATCH;\r\n                return 0;\r\n            }\r\n        }\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    if (chLocal == ',') {\r\n        bp += offset;\r\n        this.ch = this.charAt(bp);\r\n        matchStat = VALUE;\r\n        token = JSONToken.COMMA;\r\n        return negative ? -value : value;\r\n    }\r\n    if (chLocal == '}') {\r\n        chLocal = charAt(bp + (offset++));\r\n        if (chLocal == ',') {\r\n            token = JSONToken.COMMA;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == '}') {\r\n            token = JSONToken.RBRACE;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == EOI) {\r\n            token = JSONToken.EOF;\r\n            bp += (offset - 1);\r\n            ch = EOI;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return 0;\r\n        }\r\n        matchStat = END;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    return negative ? -value : value;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldInt", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldInt(char[])", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "scanBoolean", "return_type": "boolean", "signature": "scanBoolean(char)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    int offset = 0;\r\n    char chLocal = charAt(bp + (offset++));\r\n    boolean value = false;\r\n    if (chLocal == 't') {\r\n        if (// \r\n        charAt(bp + offset) == 'r' && // \r\n        charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'e') {\r\n            offset += 3;\r\n            chLocal = charAt(bp + (offset++));\r\n            value = true;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n    } else if (chLocal == 'f') {\r\n        if (// \r\n        charAt(bp + offset) == 'a' && // \r\n        charAt(bp + offset + 1) == 'l' && // \r\n        charAt(bp + offset + 2) == 's' && charAt(bp + offset + 3) == 'e') {\r\n            offset += 4;\r\n            chLocal = charAt(bp + (offset++));\r\n            value = false;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n    } else if (chLocal == '1') {\r\n        chLocal = charAt(bp + (offset++));\r\n        value = true;\r\n    } else if (chLocal == '0') {\r\n        chLocal = charAt(bp + (offset++));\r\n        value = false;\r\n    }\r\n    for (; ; ) {\r\n        if (chLocal == expectNext) {\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n            matchStat = VALUE;\r\n            return value;\r\n        } else {\r\n            if (isWhitespace(chLocal)) {\r\n                chLocal = charAt(bp + (offset++));\r\n                continue;\r\n            }\r\n            matchStat = NOT_MATCH;\r\n            return value;\r\n        }\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanBoolean", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanBoolean(char)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "scanInt", "return_type": "int", "signature": "scanInt(char)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    int offset = 0;\r\n    char chLocal = charAt(bp + (offset++));\r\n    final boolean negative = chLocal == '-';\r\n    if (negative) {\r\n        chLocal = charAt(bp + (offset++));\r\n    }\r\n    int value;\r\n    if (chLocal >= '0' && chLocal <= '9') {\r\n        value = chLocal - '0';\r\n        for (; ; ) {\r\n            chLocal = charAt(bp + (offset++));\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                value = value * 10 + (chLocal - '0');\r\n            } else if (chLocal == '.') {\r\n                matchStat = NOT_MATCH;\r\n                return 0;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (value < 0) {\r\n            matchStat = NOT_MATCH;\r\n            return 0;\r\n        }\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    for (; ; ) {\r\n        if (chLocal == expectNext) {\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n            matchStat = VALUE;\r\n            token = JSONToken.COMMA;\r\n            return negative ? -value : value;\r\n        } else {\r\n            if (isWhitespace(chLocal)) {\r\n                chLocal = charAt(bp + (offset++));\r\n                continue;\r\n            }\r\n            matchStat = NOT_MATCH;\r\n            return negative ? -value : value;\r\n        }\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanInt", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanInt(char)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "scanFieldBoolean", "return_type": "boolean", "signature": "scanFieldBoolean(char[])", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    if (!charArrayCompare(fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return false;\r\n    }\r\n    int offset = fieldName.length;\r\n    char chLocal = charAt(bp + (offset++));\r\n    boolean value;\r\n    if (chLocal == 't') {\r\n        if (charAt(bp + (offset++)) != 'r') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        if (charAt(bp + (offset++)) != 'u') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        if (charAt(bp + (offset++)) != 'e') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        value = true;\r\n    } else if (chLocal == 'f') {\r\n        if (charAt(bp + (offset++)) != 'a') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        if (charAt(bp + (offset++)) != 'l') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        if (charAt(bp + (offset++)) != 's') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        if (charAt(bp + (offset++)) != 'e') {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        value = false;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return false;\r\n    }\r\n    chLocal = charAt(bp + offset++);\r\n    if (chLocal == ',') {\r\n        bp += offset;\r\n        this.ch = this.charAt(bp);\r\n        matchStat = VALUE;\r\n        token = JSONToken.COMMA;\r\n        return value;\r\n    }\r\n    if (chLocal == '}') {\r\n        chLocal = charAt(bp + (offset++));\r\n        if (chLocal == ',') {\r\n            token = JSONToken.COMMA;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == '}') {\r\n            token = JSONToken.RBRACE;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == EOI) {\r\n            token = JSONToken.EOF;\r\n            bp += (offset - 1);\r\n            ch = EOI;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return false;\r\n        }\r\n        matchStat = END;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return false;\r\n    }\r\n    return value;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldBoolean", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldBoolean(char[])", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "scanFieldLong", "return_type": "long", "signature": "scanFieldLong(char[])", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    if (!charArrayCompare(fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return 0;\r\n    }\r\n    int offset = fieldName.length;\r\n    char chLocal = charAt(bp + (offset++));\r\n    boolean negative = false;\r\n    if (chLocal == '-') {\r\n        chLocal = charAt(bp + (offset++));\r\n        negative = true;\r\n    }\r\n    long value;\r\n    if (chLocal >= '0' && chLocal <= '9') {\r\n        value = chLocal - '0';\r\n        for (; ; ) {\r\n            chLocal = charAt(bp + (offset++));\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                value = value * 10 + (chLocal - '0');\r\n            } else if (chLocal == '.') {\r\n                matchStat = NOT_MATCH;\r\n                return 0;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (value < 0 || offset > 21) {\r\n            matchStat = NOT_MATCH;\r\n            return 0;\r\n        }\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    if (chLocal == ',') {\r\n        bp += offset;\r\n        this.ch = this.charAt(bp);\r\n        matchStat = VALUE;\r\n        token = JSONToken.COMMA;\r\n        return negative ? -value : value;\r\n    }\r\n    if (chLocal == '}') {\r\n        chLocal = charAt(bp + (offset++));\r\n        if (chLocal == ',') {\r\n            token = JSONToken.COMMA;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == '}') {\r\n            token = JSONToken.RBRACE;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == EOI) {\r\n            token = JSONToken.EOF;\r\n            bp += (offset - 1);\r\n            ch = EOI;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return 0;\r\n        }\r\n        matchStat = END;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    return negative ? -value : value;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldLong", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldLong(char[])", "qualified_return_type": "long"}
{"java_doc": "", "method_name": "scanLong", "return_type": "long", "signature": "scanLong(char)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    int offset = 0;\r\n    char chLocal = charAt(bp + (offset++));\r\n    final boolean negative = chLocal == '-';\r\n    if (negative) {\r\n        chLocal = charAt(bp + (offset++));\r\n    }\r\n    long value;\r\n    if (chLocal >= '0' && chLocal <= '9') {\r\n        value = chLocal - '0';\r\n        for (; ; ) {\r\n            chLocal = charAt(bp + (offset++));\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                value = value * 10 + (chLocal - '0');\r\n            } else if (chLocal == '.') {\r\n                matchStat = NOT_MATCH;\r\n                return 0;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (value < 0) {\r\n            matchStat = NOT_MATCH;\r\n            return 0;\r\n        }\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    for (; ; ) {\r\n        if (chLocal == expectNextChar) {\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n            matchStat = VALUE;\r\n            token = JSONToken.COMMA;\r\n            return negative ? -value : value;\r\n        } else {\r\n            if (isWhitespace(chLocal)) {\r\n                chLocal = charAt(bp + (offset++));\r\n                continue;\r\n            }\r\n            matchStat = NOT_MATCH;\r\n            return value;\r\n        }\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanLong", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanLong(char)", "qualified_return_type": "long"}
{"java_doc": "", "method_name": "scanFieldFloat", "return_type": "float", "signature": "scanFieldFloat(char[])", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    if (!charArrayCompare(fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return 0;\r\n    }\r\n    int offset = fieldName.length;\r\n    char chLocal = charAt(bp + (offset++));\r\n    float value;\r\n    if (chLocal >= '0' && chLocal <= '9') {\r\n        for (; ; ) {\r\n            chLocal = charAt(bp + (offset++));\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                continue;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (chLocal == '.') {\r\n            chLocal = charAt(bp + (offset++));\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                for (; ; ) {\r\n                    chLocal = charAt(bp + (offset++));\r\n                    if (chLocal >= '0' && chLocal <= '9') {\r\n                        continue;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                matchStat = NOT_MATCH;\r\n                return 0;\r\n            }\r\n        }\r\n        int start = bp + fieldName.length;\r\n        int count = bp + offset - start - 1;\r\n        String text = this.subString(start, count);\r\n        value = Float.parseFloat(text);\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    if (chLocal == ',') {\r\n        bp += offset;\r\n        this.ch = this.charAt(bp);\r\n        matchStat = VALUE;\r\n        token = JSONToken.COMMA;\r\n        return value;\r\n    }\r\n    if (chLocal == '}') {\r\n        chLocal = charAt(bp + (offset++));\r\n        if (chLocal == ',') {\r\n            token = JSONToken.COMMA;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == '}') {\r\n            token = JSONToken.RBRACE;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == EOI) {\r\n            bp += (offset - 1);\r\n            token = JSONToken.EOF;\r\n            ch = EOI;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return 0;\r\n        }\r\n        matchStat = END;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    return value;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldFloat", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldFloat(char[])", "qualified_return_type": "float"}
{"java_doc": "", "method_name": "scanFloat", "return_type": "float", "signature": "scanFloat(char)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    int offset = 0;\r\n    char chLocal = charAt(bp + (offset++));\r\n    float value;\r\n    if (chLocal >= '0' && chLocal <= '9') {\r\n        for (; ; ) {\r\n            chLocal = charAt(bp + (offset++));\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                continue;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (chLocal == '.') {\r\n            chLocal = charAt(bp + (offset++));\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                for (; ; ) {\r\n                    chLocal = charAt(bp + (offset++));\r\n                    if (chLocal >= '0' && chLocal <= '9') {\r\n                        continue;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                matchStat = NOT_MATCH;\r\n                return 0;\r\n            }\r\n        }\r\n        int start = bp;\r\n        int count = bp + offset - start - 1;\r\n        String text = this.subString(start, count);\r\n        value = Float.parseFloat(text);\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    if (chLocal == seperator) {\r\n        bp += offset;\r\n        this.ch = this.charAt(bp);\r\n        matchStat = VALUE;\r\n        token = JSONToken.COMMA;\r\n        return value;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return value;\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanFloat", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanFloat(char)", "qualified_return_type": "float"}
{"java_doc": "", "method_name": "scanDouble", "return_type": "double", "signature": "scanDouble(char)", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    int offset = 0;\r\n    char chLocal = charAt(bp + (offset++));\r\n    double value;\r\n    if (chLocal >= '0' && chLocal <= '9') {\r\n        for (; ; ) {\r\n            chLocal = charAt(bp + (offset++));\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                continue;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (chLocal == '.') {\r\n            chLocal = charAt(bp + (offset++));\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                for (; ; ) {\r\n                    chLocal = charAt(bp + (offset++));\r\n                    if (chLocal >= '0' && chLocal <= '9') {\r\n                        continue;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                matchStat = NOT_MATCH;\r\n                return 0;\r\n            }\r\n        }\r\n        int start = bp;\r\n        int count = bp + offset - start - 1;\r\n        String text = this.subString(start, count);\r\n        value = Double.parseDouble(text);\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    if (chLocal == seperator) {\r\n        bp += offset;\r\n        this.ch = this.charAt(bp);\r\n        matchStat = VALUE;\r\n        token = JSONToken.COMMA;\r\n        return value;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return value;\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanDouble", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanDouble(char)", "qualified_return_type": "double"}
{"java_doc": "", "method_name": "scanFieldDouble", "return_type": "double", "signature": "scanFieldDouble(char[])", "body_content": "{\r\n    matchStat = UNKNOWN;\r\n    if (!charArrayCompare(fieldName)) {\r\n        matchStat = NOT_MATCH_NAME;\r\n        return 0;\r\n    }\r\n    int offset = fieldName.length;\r\n    char chLocal = charAt(bp + (offset++));\r\n    double value;\r\n    if (chLocal >= '0' && chLocal <= '9') {\r\n        for (; ; ) {\r\n            chLocal = charAt(bp + (offset++));\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                continue;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (chLocal == '.') {\r\n            chLocal = charAt(bp + (offset++));\r\n            if (chLocal >= '0' && chLocal <= '9') {\r\n                for (; ; ) {\r\n                    chLocal = charAt(bp + (offset++));\r\n                    if (chLocal >= '0' && chLocal <= '9') {\r\n                        continue;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                matchStat = NOT_MATCH;\r\n                return 0;\r\n            }\r\n        }\r\n        if (chLocal == 'e' || chLocal == 'E') {\r\n            chLocal = charAt(bp + (offset++));\r\n            if (chLocal == '+' || chLocal == '-') {\r\n                chLocal = charAt(bp + (offset++));\r\n            }\r\n            for (; ; ) {\r\n                if (chLocal >= '0' && chLocal <= '9') {\r\n                    chLocal = charAt(bp + (offset++));\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        int start = bp + fieldName.length;\r\n        int count = bp + offset - start - 1;\r\n        String text = this.subString(start, count);\r\n        value = Double.parseDouble(text);\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    if (chLocal == ',') {\r\n        bp += offset;\r\n        this.ch = this.charAt(bp);\r\n        matchStat = VALUE;\r\n        token = JSONToken.COMMA;\r\n        return value;\r\n    }\r\n    if (chLocal == '}') {\r\n        chLocal = charAt(bp + (offset++));\r\n        if (chLocal == ',') {\r\n            token = JSONToken.COMMA;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == ']') {\r\n            token = JSONToken.RBRACKET;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == '}') {\r\n            token = JSONToken.RBRACE;\r\n            bp += offset;\r\n            this.ch = this.charAt(bp);\r\n        } else if (chLocal == EOI) {\r\n            token = JSONToken.EOF;\r\n            bp += (offset - 1);\r\n            ch = EOI;\r\n        } else {\r\n            matchStat = NOT_MATCH;\r\n            return 0;\r\n        }\r\n        matchStat = END;\r\n    } else {\r\n        matchStat = NOT_MATCH;\r\n        return 0;\r\n    }\r\n    return value;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldDouble", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanFieldDouble(char[])", "qualified_return_type": "double"}
{"java_doc": "", "method_name": "scanTrue", "return_type": "void", "signature": "scanTrue()", "body_content": "{\r\n    if (ch != 't') {\r\n        throw new JSONException(\"error parse true\");\r\n    }\r\n    next();\r\n    if (ch != 'r') {\r\n        throw new JSONException(\"error parse true\");\r\n    }\r\n    next();\r\n    if (ch != 'u') {\r\n        throw new JSONException(\"error parse true\");\r\n    }\r\n    next();\r\n    if (ch != 'e') {\r\n        throw new JSONException(\"error parse true\");\r\n    }\r\n    next();\r\n    if (ch == ' ' || ch == ',' || ch == '}' || ch == ']' || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == EOI || ch == '\\f' || ch == '\\b' || ch == ':') {\r\n        token = JSONToken.TRUE;\r\n    } else {\r\n        throw new JSONException(\"scan true error\");\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanTrue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanTrue()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "scanNullOrNew", "return_type": "void", "signature": "scanNullOrNew()", "body_content": "{\r\n    if (ch != 'n') {\r\n        throw new JSONException(\"error parse null or new\");\r\n    }\r\n    next();\r\n    if (ch == 'u') {\r\n        next();\r\n        if (ch != 'l') {\r\n            throw new JSONException(\"error parse null\");\r\n        }\r\n        next();\r\n        if (ch != 'l') {\r\n            throw new JSONException(\"error parse null\");\r\n        }\r\n        next();\r\n        if (ch == ' ' || ch == ',' || ch == '}' || ch == ']' || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == EOI || ch == '\\f' || ch == '\\b') {\r\n            token = JSONToken.NULL;\r\n        } else {\r\n            throw new JSONException(\"scan null error\");\r\n        }\r\n        return;\r\n    }\r\n    if (ch != 'e') {\r\n        throw new JSONException(\"error parse new\");\r\n    }\r\n    next();\r\n    if (ch != 'w') {\r\n        throw new JSONException(\"error parse new\");\r\n    }\r\n    next();\r\n    if (ch == ' ' || ch == ',' || ch == '}' || ch == ']' || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == EOI || ch == '\\f' || ch == '\\b') {\r\n        token = JSONToken.NEW;\r\n    } else {\r\n        throw new JSONException(\"scan new error\");\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanNullOrNew", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanNullOrNew()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "scanFalse", "return_type": "void", "signature": "scanFalse()", "body_content": "{\r\n    if (ch != 'f') {\r\n        throw new JSONException(\"error parse false\");\r\n    }\r\n    next();\r\n    if (ch != 'a') {\r\n        throw new JSONException(\"error parse false\");\r\n    }\r\n    next();\r\n    if (ch != 'l') {\r\n        throw new JSONException(\"error parse false\");\r\n    }\r\n    next();\r\n    if (ch != 's') {\r\n        throw new JSONException(\"error parse false\");\r\n    }\r\n    next();\r\n    if (ch != 'e') {\r\n        throw new JSONException(\"error parse false\");\r\n    }\r\n    next();\r\n    if (ch == ' ' || ch == ',' || ch == '}' || ch == ']' || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == EOI || ch == '\\f' || ch == '\\b' || ch == ':') {\r\n        token = JSONToken.FALSE;\r\n    } else {\r\n        throw new JSONException(\"scan false error\");\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanFalse", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanFalse()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "scanIdent", "return_type": "void", "signature": "scanIdent()", "body_content": "{\r\n    np = bp - 1;\r\n    hasSpecial = false;\r\n    for (; ; ) {\r\n        sp++;\r\n        next();\r\n        if (Character.isLetterOrDigit(ch)) {\r\n            continue;\r\n        }\r\n        String ident = stringVal();\r\n        if (\"null\".equalsIgnoreCase(ident)) {\r\n            token = JSONToken.NULL;\r\n        } else if (\"new\".equals(ident)) {\r\n            token = JSONToken.NEW;\r\n        } else if (\"true\".equals(ident)) {\r\n            token = JSONToken.TRUE;\r\n        } else if (\"false\".equals(ident)) {\r\n            token = JSONToken.FALSE;\r\n        } else if (\"undefined\".equals(ident)) {\r\n            token = JSONToken.UNDEFINED;\r\n        } else if (\"Set\".equals(ident)) {\r\n            token = JSONToken.SET;\r\n        } else if (\"TreeSet\".equals(ident)) {\r\n            token = JSONToken.TREE_SET;\r\n        } else {\r\n            token = JSONToken.IDENTIFIER;\r\n        }\r\n        return;\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanIdent", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanIdent()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "stringVal", "return_type": "String", "signature": "stringVal()", "body_content": "", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.stringVal", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.stringVal()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "subString", "return_type": "String", "signature": "subString(int, int)", "body_content": "", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.subString", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.subString(int, int)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "sub_chars", "return_type": "char[]", "signature": "sub_chars(int, int)", "body_content": "", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.sub_chars", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.sub_chars(int, int)", "qualified_return_type": "char[]"}
{"java_doc": "", "method_name": "readString", "return_type": "String", "signature": "readString(char[], int)", "body_content": "{\r\n    char[] sbuf = new char[chars_len];\r\n    int len = 0;\r\n    for (int i = 0; i < chars_len; ++i) {\r\n        char ch = chars[i];\r\n        if (ch != '\\\\') {\r\n            sbuf[len++] = ch;\r\n            continue;\r\n        }\r\n        ch = chars[++i];\r\n        switch(ch) {\r\n            case '0':\r\n                sbuf[len++] = '\\0';\r\n                break;\r\n            case '1':\r\n                sbuf[len++] = '\\1';\r\n                break;\r\n            case '2':\r\n                sbuf[len++] = '\\2';\r\n                break;\r\n            case '3':\r\n                sbuf[len++] = '\\3';\r\n                break;\r\n            case '4':\r\n                sbuf[len++] = '\\4';\r\n                break;\r\n            case '5':\r\n                sbuf[len++] = '\\5';\r\n                break;\r\n            case '6':\r\n                sbuf[len++] = '\\6';\r\n                break;\r\n            case '7':\r\n                sbuf[len++] = '\\7';\r\n                break;\r\n            case // 8\r\n            'b':\r\n                sbuf[len++] = '\\b';\r\n                break;\r\n            case // 9\r\n            't':\r\n                sbuf[len++] = '\\t';\r\n                break;\r\n            case // 10\r\n            'n':\r\n                sbuf[len++] = '\\n';\r\n                break;\r\n            case // 11\r\n            'v':\r\n                sbuf[len++] = '\\u000B';\r\n                break;\r\n            // 12\r\n            case 'f':\r\n            case 'F':\r\n                sbuf[len++] = '\\f';\r\n                break;\r\n            case // 13\r\n            'r':\r\n                sbuf[len++] = '\\r';\r\n                break;\r\n            case // 34\r\n            '\"':\r\n                sbuf[len++] = '\"';\r\n                break;\r\n            case // 39\r\n            '\\'':\r\n                sbuf[len++] = '\\'';\r\n                break;\r\n            case // 47\r\n            '/':\r\n                sbuf[len++] = '/';\r\n                break;\r\n            case // 92\r\n            '\\\\':\r\n                sbuf[len++] = '\\\\';\r\n                break;\r\n            case 'x':\r\n                sbuf[len++] = (char) (digits[chars[++i]] * 16 + digits[chars[++i]]);\r\n                break;\r\n            case 'u':\r\n                sbuf[len++] = (char) Integer.parseInt(new String(new char[] { // \r\n                chars[++i], // \r\n                chars[++i], // \r\n                chars[++i], chars[++i] }), 16);\r\n                break;\r\n            default:\r\n                throw new JSONException(\"unclosed.str.lit\");\r\n        }\r\n    }\r\n    return new String(sbuf, 0, len);\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.readString", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.readString(char[], int)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "charArrayCompare", "return_type": "boolean", "signature": "charArrayCompare(char[])", "body_content": "", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.charArrayCompare", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.charArrayCompare(char[])", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isBlankInput", "return_type": "boolean", "signature": "isBlankInput()", "body_content": "{\r\n    for (int i = 0; ; ++i) {\r\n        char chLocal = charAt(i);\r\n        if (chLocal == EOI) {\r\n            token = JSONToken.EOF;\r\n            break;\r\n        }\r\n        if (!isWhitespace(chLocal)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.isBlankInput", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.isBlankInput()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "skipWhitespace", "return_type": "void", "signature": "skipWhitespace()", "body_content": "{\r\n    for (; ; ) {\r\n        if (ch <= '/') {\r\n            if (ch == ' ' || ch == '\\r' || ch == '\\n' || ch == '\\t' || ch == '\\f' || ch == '\\b') {\r\n                next();\r\n                continue;\r\n            } else if (ch == '/') {\r\n                skipComment();\r\n                continue;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.skipWhitespace", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.skipWhitespace()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "scanStringSingleQuote", "return_type": "void", "signature": "scanStringSingleQuote()", "body_content": "{\r\n    np = bp;\r\n    hasSpecial = false;\r\n    char chLocal;\r\n    for (; ; ) {\r\n        chLocal = next();\r\n        if (chLocal == '\\'') {\r\n            break;\r\n        }\r\n        if (chLocal == EOI) {\r\n            if (!isEOF()) {\r\n                putChar((char) EOI);\r\n                continue;\r\n            }\r\n            throw new JSONException(\"unclosed single-quote string\");\r\n        }\r\n        if (chLocal == '\\\\') {\r\n            if (!hasSpecial) {\r\n                hasSpecial = true;\r\n                if (sp > sbuf.length) {\r\n                    char[] newsbuf = new char[sp * 2];\r\n                    System.arraycopy(sbuf, 0, newsbuf, 0, sbuf.length);\r\n                    sbuf = newsbuf;\r\n                }\r\n                // text.getChars(offset, offset + count, dest, 0);\r\n                this.copyTo(np + 1, sp, sbuf);\r\n                // System.arraycopy(buf, np + 1, sbuf, 0, sp);\r\n            }\r\n            chLocal = next();\r\n            switch(chLocal) {\r\n                case '0':\r\n                    putChar('\\0');\r\n                    break;\r\n                case '1':\r\n                    putChar('\\1');\r\n                    break;\r\n                case '2':\r\n                    putChar('\\2');\r\n                    break;\r\n                case '3':\r\n                    putChar('\\3');\r\n                    break;\r\n                case '4':\r\n                    putChar('\\4');\r\n                    break;\r\n                case '5':\r\n                    putChar('\\5');\r\n                    break;\r\n                case '6':\r\n                    putChar('\\6');\r\n                    break;\r\n                case '7':\r\n                    putChar('\\7');\r\n                    break;\r\n                case // 8\r\n                'b':\r\n                    putChar('\\b');\r\n                    break;\r\n                case // 9\r\n                't':\r\n                    putChar('\\t');\r\n                    break;\r\n                case // 10\r\n                'n':\r\n                    putChar('\\n');\r\n                    break;\r\n                case // 11\r\n                'v':\r\n                    putChar('\\u000B');\r\n                    break;\r\n                // 12\r\n                case 'f':\r\n                case 'F':\r\n                    putChar('\\f');\r\n                    break;\r\n                case // 13\r\n                'r':\r\n                    putChar('\\r');\r\n                    break;\r\n                case // 34\r\n                '\"':\r\n                    putChar('\"');\r\n                    break;\r\n                case // 39\r\n                '\\'':\r\n                    putChar('\\'');\r\n                    break;\r\n                case // 47\r\n                '/':\r\n                    putChar('/');\r\n                    break;\r\n                case // 92\r\n                '\\\\':\r\n                    putChar('\\\\');\r\n                    break;\r\n                case 'x':\r\n                    putChar((char) (digits[next()] * 16 + digits[next()]));\r\n                    break;\r\n                case 'u':\r\n                    putChar((char) Integer.parseInt(new String(new char[] { next(), next(), next(), next() }), 16));\r\n                    break;\r\n                default:\r\n                    this.ch = chLocal;\r\n                    throw new JSONException(\"unclosed single-quote string\");\r\n            }\r\n            continue;\r\n        }\r\n        if (!hasSpecial) {\r\n            sp++;\r\n            continue;\r\n        }\r\n        if (sp == sbuf.length) {\r\n            putChar(chLocal);\r\n        } else {\r\n            sbuf[sp++] = chLocal;\r\n        }\r\n    }\r\n    token = LITERAL_STRING;\r\n    this.next();\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanStringSingleQuote", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanStringSingleQuote()", "qualified_return_type": "void"}
{"java_doc": "Append a character to sbuf.\r\n", "method_name": "putChar", "return_type": "void", "signature": "putChar(char)", "body_content": "{\r\n    if (sp == sbuf.length) {\r\n        char[] newsbuf = new char[sbuf.length * 2];\r\n        System.arraycopy(sbuf, 0, newsbuf, 0, sbuf.length);\r\n        sbuf = newsbuf;\r\n    }\r\n    sbuf[sp++] = ch;\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.putChar", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.putChar(char)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "scanNumber", "return_type": "void", "signature": "scanNumber()", "body_content": "{\r\n    np = bp;\r\n    if (ch == '-') {\r\n        sp++;\r\n        next();\r\n    }\r\n    for (; ; ) {\r\n        if (ch >= '0' && ch <= '9') {\r\n            sp++;\r\n        } else {\r\n            break;\r\n        }\r\n        next();\r\n    }\r\n    boolean isDouble = false;\r\n    if (ch == '.') {\r\n        sp++;\r\n        next();\r\n        isDouble = true;\r\n        for (; ; ) {\r\n            if (ch >= '0' && ch <= '9') {\r\n                sp++;\r\n            } else {\r\n                break;\r\n            }\r\n            next();\r\n        }\r\n    }\r\n    if (ch == 'L') {\r\n        sp++;\r\n        next();\r\n    } else if (ch == 'S') {\r\n        sp++;\r\n        next();\r\n    } else if (ch == 'B') {\r\n        sp++;\r\n        next();\r\n    } else if (ch == 'F') {\r\n        sp++;\r\n        next();\r\n        isDouble = true;\r\n    } else if (ch == 'D') {\r\n        sp++;\r\n        next();\r\n        isDouble = true;\r\n    } else if (ch == 'e' || ch == 'E') {\r\n        sp++;\r\n        next();\r\n        if (ch == '+' || ch == '-') {\r\n            sp++;\r\n            next();\r\n        }\r\n        for (; ; ) {\r\n            if (ch >= '0' && ch <= '9') {\r\n                sp++;\r\n            } else {\r\n                break;\r\n            }\r\n            next();\r\n        }\r\n        if (ch == 'D' || ch == 'F') {\r\n            sp++;\r\n            next();\r\n        }\r\n        isDouble = true;\r\n    }\r\n    if (isDouble) {\r\n        token = JSONToken.LITERAL_FLOAT;\r\n    } else {\r\n        token = JSONToken.LITERAL_INT;\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.scanNumber", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.scanNumber()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "longValue", "return_type": "long", "signature": "longValue()", "body_content": "{\r\n    long result = 0;\r\n    boolean negative = false;\r\n    long limit;\r\n    int digit;\r\n    if (np == -1) {\r\n        np = 0;\r\n    }\r\n    int i = np, max = np + sp;\r\n    if (charAt(np) == '-') {\r\n        negative = true;\r\n        limit = Long.MIN_VALUE;\r\n        i++;\r\n    } else {\r\n        limit = -Long.MAX_VALUE;\r\n    }\r\n    long multmin = MULTMIN_RADIX_TEN;\r\n    if (i < max) {\r\n        digit = charAt(i++) - '0';\r\n        result = -digit;\r\n    }\r\n    while (i < max) {\r\n        // Accumulating negatively avoids surprises near MAX_VALUE\r\n        char chLocal = charAt(i++);\r\n        if (chLocal == 'L' || chLocal == 'S' || chLocal == 'B') {\r\n            break;\r\n        }\r\n        digit = chLocal - '0';\r\n        if (result < multmin) {\r\n            throw new NumberFormatException(numberString());\r\n        }\r\n        result *= 10;\r\n        if (result < limit + digit) {\r\n            throw new NumberFormatException(numberString());\r\n        }\r\n        result -= digit;\r\n    }\r\n    if (negative) {\r\n        if (i > np + 1) {\r\n            return result;\r\n        } else {\r\n            /* Only got \"-\" */\r\n            throw new NumberFormatException(numberString());\r\n        }\r\n    } else {\r\n        return -result;\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.longValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.longValue()", "qualified_return_type": "long"}
{"java_doc": "", "method_name": "decimalValue", "return_type": "Number", "signature": "decimalValue(boolean)", "body_content": "{\r\n    char chLocal = charAt(np + sp - 1);\r\n    try {\r\n        if (chLocal == 'F') {\r\n            return Float.parseFloat(numberString());\r\n        }\r\n        if (chLocal == 'D') {\r\n            return Double.parseDouble(numberString());\r\n        }\r\n        if (decimal) {\r\n            return decimalValue();\r\n        } else {\r\n            return doubleValue();\r\n        }\r\n    } catch (NumberFormatException ex) {\r\n        throw new JSONException(ex.getMessage() + \", \" + info());\r\n    }\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.decimalValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.decimalValue(boolean)", "qualified_return_type": "java.lang.Number"}
{"java_doc": "", "method_name": "decimalValue", "return_type": "BigDecimal", "signature": "decimalValue()", "body_content": "{\r\n    return new BigDecimal(numberString());\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.decimalValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.decimalValue()", "qualified_return_type": "java.math.BigDecimal"}
{"java_doc": "", "method_name": "isWhitespace", "return_type": "boolean", "signature": "isWhitespace(char)", "body_content": "{\r\n    // 专门调整了判断顺序\r\n    return ch <= ' ' && (ch == ' ' || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == '\\f' || ch == '\\b');\r\n}", "class_name": "JSONLexerBase", "qualified_method_name": "com.alibaba.fastjson.parser.JSONLexerBase.isWhitespace", "qualified_signature": "com.alibaba.fastjson.parser.JSONLexerBase.isWhitespace(char)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    write(serializer, (String) object);\r\n}", "class_name": "StringCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.StringCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.StringCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, String)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (value == null) {\r\n        out.writeNull(SerializerFeature.WriteNullStringAsEmpty);\r\n        return;\r\n    }\r\n    out.writeString(value);\r\n}", "class_name": "StringCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.StringCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.StringCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    if (clazz == StringBuffer.class) {\r\n        final JSONLexer lexer = parser.lexer;\r\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n            String val = lexer.stringVal();\r\n            lexer.nextToken(JSONToken.COMMA);\r\n            return (T) new StringBuffer(val);\r\n        }\r\n        Object value = parser.parse();\r\n        if (value == null) {\r\n            return null;\r\n        }\r\n        return (T) new StringBuffer(value.toString());\r\n    }\r\n    if (clazz == StringBuilder.class) {\r\n        final JSONLexer lexer = parser.lexer;\r\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n            String val = lexer.stringVal();\r\n            lexer.nextToken(JSONToken.COMMA);\r\n            return (T) new StringBuilder(val);\r\n        }\r\n        Object value = parser.parse();\r\n        if (value == null) {\r\n            return null;\r\n        }\r\n        return (T) new StringBuilder(value.toString());\r\n    }\r\n    return (T) deserialze(parser);\r\n}", "class_name": "StringCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.StringCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.StringCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser)", "body_content": "{\r\n    final JSONLexer lexer = parser.getLexer();\r\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n        String val = lexer.stringVal();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return (T) val;\r\n    }\r\n    if (lexer.token() == JSONToken.LITERAL_INT) {\r\n        String val = lexer.numberString();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return (T) val;\r\n    }\r\n    Object value = parser.parse();\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    return (T) value.toString();\r\n}", "class_name": "StringCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.StringCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.StringCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_STRING;\r\n}", "class_name": "StringCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.StringCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.StringCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "charAt", "return_type": "char", "signature": "charAt(int)", "body_content": "{\r\n    if (index >= bufLength) {\r\n        if (bufLength == -1) {\r\n            if (index < sp) {\r\n                return buf[index];\r\n            }\r\n            return EOI;\r\n        }\r\n        if (bp == 0) {\r\n            char[] buf = new char[(this.buf.length * 3) / 2];\r\n            System.arraycopy(this.buf, bp, buf, 0, bufLength);\r\n            int rest = buf.length - bufLength;\r\n            try {\r\n                int len = reader.read(buf, bufLength, rest);\r\n                bufLength += len;\r\n                this.buf = buf;\r\n            } catch (IOException e) {\r\n                throw new JSONException(e.getMessage(), e);\r\n            }\r\n        } else {\r\n            int rest = bufLength - bp;\r\n            if (rest > 0) {\r\n                System.arraycopy(buf, bp, buf, 0, rest);\r\n            }\r\n            try {\r\n                bufLength = reader.read(buf, rest, buf.length - rest);\r\n            } catch (IOException e) {\r\n                throw new JSONException(e.getMessage(), e);\r\n            }\r\n            if (bufLength == 0) {\r\n                throw new JSONException(\"illegal state, textLength is zero\");\r\n            }\r\n            if (bufLength == -1) {\r\n                return EOI;\r\n            }\r\n            bufLength += rest;\r\n            index -= bp;\r\n            np -= bp;\r\n            bp = 0;\r\n        }\r\n    }\r\n    return buf[index];\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.charAt", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.charAt(int)", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "indexOf", "return_type": "int", "signature": "indexOf(char, int)", "body_content": "{\r\n    int offset = startIndex - bp;\r\n    for (; ; ++offset) {\r\n        final int index = bp + offset;\r\n        char chLoal = charAt(index);\r\n        if (ch == chLoal) {\r\n            return offset + bp;\r\n        }\r\n        if (chLoal == EOI) {\r\n            return -1;\r\n        }\r\n    }\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.indexOf", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.indexOf(char, int)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "addSymbol", "return_type": "String", "signature": "addSymbol(int, int, int, SymbolTable)", "body_content": "{\r\n    return symbolTable.addSymbol(buf, offset, len, hash);\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.addSymbol", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.addSymbol(int, int, int, com.alibaba.fastjson.parser.SymbolTable)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "next", "return_type": "char", "signature": "next()", "body_content": "{\r\n    int index = ++bp;\r\n    if (index >= bufLength) {\r\n        if (bufLength == -1) {\r\n            return EOI;\r\n        }\r\n        if (sp > 0) {\r\n            int offset;\r\n            offset = bufLength - sp;\r\n            if (ch == '\"') {\r\n                offset--;\r\n            }\r\n            System.arraycopy(buf, offset, buf, 0, sp);\r\n        }\r\n        np = -1;\r\n        index = bp = sp;\r\n        try {\r\n            int startPos = bp;\r\n            int readLength = buf.length - startPos;\r\n            if (readLength == 0) {\r\n                char[] newBuf = new char[buf.length * 2];\r\n                System.arraycopy(buf, 0, newBuf, 0, buf.length);\r\n                buf = newBuf;\r\n                readLength = buf.length - startPos;\r\n            }\r\n            bufLength = reader.read(buf, bp, readLength);\r\n        } catch (IOException e) {\r\n            throw new JSONException(e.getMessage(), e);\r\n        }\r\n        if (bufLength == 0) {\r\n            throw new JSONException(\"illegal stat, textLength is zero\");\r\n        }\r\n        if (bufLength == -1) {\r\n            return ch = EOI;\r\n        }\r\n        bufLength += bp;\r\n    }\r\n    return ch = buf[index];\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.next", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.next()", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "copyTo", "return_type": "void", "signature": "copyTo(int, int, char[])", "body_content": "{\r\n    System.arraycopy(buf, offset, dest, 0, count);\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.copyTo", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.copyTo(int, int, char[])", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "charArrayCompare", "return_type": "boolean", "signature": "charArrayCompare(char[])", "body_content": "{\r\n    for (int i = 0; i < chars.length; ++i) {\r\n        if (charAt(bp + i) != chars[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.charArrayCompare", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.charArrayCompare(char[])", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "bytesValue", "return_type": "byte[]", "signature": "bytesValue()", "body_content": "{\r\n    return IOUtils.decodeBase64(buf, np + 1, sp);\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.bytesValue", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.bytesValue()", "qualified_return_type": "byte[]"}
{"java_doc": "", "method_name": "arrayCopy", "return_type": "void", "signature": "arrayCopy(int, char[], int, int)", "body_content": "{\r\n    System.arraycopy(buf, srcPos, dest, destPos, length);\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.arrayCopy", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.arrayCopy(int, char[], int, int)", "qualified_return_type": "void"}
{"java_doc": "The value of a literal token, recorded as a string. For integers, leading 0x and 'l' suffixes are suppressed.\r\n", "method_name": "stringVal", "return_type": "String", "signature": "stringVal()", "body_content": "{\r\n    if (!hasSpecial) {\r\n        int offset = np + 1;\r\n        if (offset < 0) {\r\n            throw new IllegalStateException();\r\n        }\r\n        if (offset > buf.length - sp) {\r\n            throw new IllegalStateException();\r\n        }\r\n        return new String(buf, offset, sp);\r\n        // return text.substring(np + 1, np + 1 + sp);\r\n    } else {\r\n        return new String(sbuf, 0, sp);\r\n    }\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.stringVal", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.stringVal()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "subString", "return_type": "String", "signature": "subString(int, int)", "body_content": "{\r\n    if (count < 0) {\r\n        throw new StringIndexOutOfBoundsException(count);\r\n    }\r\n    return new String(buf, offset, count);\r\n    // return text.substring(offset, offset + count);\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.subString", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.subString(int, int)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "sub_chars", "return_type": "char[]", "signature": "sub_chars(int, int)", "body_content": "{\r\n    if (count < 0) {\r\n        throw new StringIndexOutOfBoundsException(count);\r\n    }\r\n    if (offset == 0) {\r\n        return buf;\r\n    }\r\n    char[] chars = new char[count];\r\n    System.arraycopy(buf, offset, chars, 0, count);\r\n    return chars;\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.sub_chars", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.sub_chars(int, int)", "qualified_return_type": "char[]"}
{"java_doc": "", "method_name": "numberString", "return_type": "String", "signature": "numberString()", "body_content": "{\r\n    int offset = np;\r\n    if (offset == -1) {\r\n        offset = 0;\r\n    }\r\n    char chLocal = charAt(offset + sp - 1);\r\n    int sp = this.sp;\r\n    if (chLocal == 'L' || chLocal == 'S' || chLocal == 'B' || chLocal == 'F' || chLocal == 'D') {\r\n        sp--;\r\n    }\r\n    String value = new String(buf, offset, sp);\r\n    return value;\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.numberString", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.numberString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "close", "return_type": "void", "signature": "close()", "body_content": "{\r\n    super.close();\r\n    if (buf.length <= 1024 * 32) {\r\n        BUF_LOCAL.set(buf);\r\n    }\r\n    this.buf = null;\r\n    IOUtils.close(reader);\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.close", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.close()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "isEOF", "return_type": "boolean", "signature": "isEOF()", "body_content": "{\r\n    return bufLength == -1 || bp == buf.length || ch == EOI && bp + 1 == buf.length;\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.isEOF", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.isEOF()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isBlankInput", "return_type": "boolean", "signature": "isBlankInput()", "body_content": "{\r\n    for (int i = 0; ; ++i) {\r\n        char chLocal = buf[i];\r\n        if (chLocal == EOI) {\r\n            token = JSONToken.EOF;\r\n            break;\r\n        }\r\n        if (!isWhitespace(chLocal)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "class_name": "JSONReaderScanner", "qualified_method_name": "com.alibaba.fastjson.parser.JSONReaderScanner.isBlankInput", "qualified_signature": "com.alibaba.fastjson.parser.JSONReaderScanner.isBlankInput()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(String)", "body_content": "{\r\n    if (excludes != null) {\r\n        return Arrays.binarySearch(excludes, label) == -1;\r\n    }\r\n    return // \r\n    includes != null && Arrays.binarySearch(includes, label) >= 0;\r\n}", "class_name": "Labels.DefaultLabelFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.Labels.DefaultLabelFilter.apply", "qualified_signature": "com.alibaba.fastjson.serializer.Labels.DefaultLabelFilter.apply(java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "includes", "return_type": "LabelFilter", "signature": "includes(String[])", "body_content": "{\r\n    return new DefaultLabelFilter(views, null);\r\n}", "class_name": "Labels", "qualified_method_name": "com.alibaba.fastjson.serializer.Labels.includes", "qualified_signature": "com.alibaba.fastjson.serializer.Labels.includes(java.lang.String...)", "qualified_return_type": "com.alibaba.fastjson.serializer.LabelFilter"}
{"java_doc": "", "method_name": "excludes", "return_type": "LabelFilter", "signature": "excludes(String[])", "body_content": "{\r\n    return new DefaultLabelFilter(null, views);\r\n}", "class_name": "Labels", "qualified_method_name": "com.alibaba.fastjson.serializer.Labels.excludes", "qualified_signature": "com.alibaba.fastjson.serializer.Labels.excludes(java.lang.String...)", "qualified_return_type": "com.alibaba.fastjson.serializer.LabelFilter"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull(SerializerFeature.WriteNullNumberAsZero);\r\n        return;\r\n    }\r\n    double doubleValue = ((Double) object).doubleValue();\r\n    if (// \r\n    Double.isNaN(doubleValue) || Double.isInfinite(doubleValue)) {\r\n        out.writeNull();\r\n    } else {\r\n        if (decimalFormat == null) {\r\n            out.writeDouble(doubleValue, true);\r\n        } else {\r\n            String doubleText = decimalFormat.format(doubleValue);\r\n            out.write(doubleText);\r\n        }\r\n    }\r\n}", "class_name": "DoubleSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.DoubleSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.DoubleSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "resolve", "return_type": "Type", "signature": "resolve(Object, String)", "body_content": "", "class_name": "FieldTypeResolver", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver.resolve", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver.resolve(java.lang.Object, java.lang.String)", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "Modify the POJO to serialize.\r\n", "method_name": "setValue", "return_type": "void", "signature": "setValue(Object)", "body_content": "{\r\n    this.value = value;\r\n}", "class_name": "MappingFastJsonValue", "qualified_method_name": "com.alibaba.fastjson.support.spring.MappingFastJsonValue.setValue", "qualified_signature": "com.alibaba.fastjson.support.spring.MappingFastJsonValue.setValue(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "Return the POJO that needs to be serialized.\r\n", "method_name": "getValue", "return_type": "Object", "signature": "getValue()", "body_content": "{\r\n    return this.value;\r\n}", "class_name": "MappingFastJsonValue", "qualified_method_name": "com.alibaba.fastjson.support.spring.MappingFastJsonValue.getValue", "qualified_signature": "com.alibaba.fastjson.support.spring.MappingFastJsonValue.getValue()", "qualified_return_type": "java.lang.Object"}
{"java_doc": "Set the name of the JSONP function name.\r\n", "method_name": "setJsonpFunction", "return_type": "void", "signature": "setJsonpFunction(String)", "body_content": "{\r\n    this.jsonpFunction = functionName;\r\n}", "class_name": "MappingFastJsonValue", "qualified_method_name": "com.alibaba.fastjson.support.spring.MappingFastJsonValue.setJsonpFunction", "qualified_signature": "com.alibaba.fastjson.support.spring.MappingFastJsonValue.setJsonpFunction(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "Return the configured JSONP function name.\r\n", "method_name": "getJsonpFunction", "return_type": "String", "signature": "getJsonpFunction()", "body_content": "{\r\n    return this.jsonpFunction;\r\n}", "class_name": "MappingFastJsonValue", "qualified_method_name": "com.alibaba.fastjson.support.spring.MappingFastJsonValue.getJsonpFunction", "qualified_signature": "com.alibaba.fastjson.support.spring.MappingFastJsonValue.getJsonpFunction()", "qualified_return_type": "java.lang.String"}
{"java_doc": "\r\n@return the fastJsonConfig.\r\n@since 1.2.11\r\n", "method_name": "getFastJsonConfig", "return_type": "FastJsonConfig", "signature": "getFastJsonConfig()", "body_content": "{\r\n    return fastJsonConfig;\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.getFastJsonConfig", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.getFastJsonConfig()", "qualified_return_type": "com.alibaba.fastjson.support.config.FastJsonConfig"}
{"java_doc": "\r\n@param fastJsonConfig the fastJsonConfig to set.\r\n@since 1.2.11\r\n", "method_name": "setFastJsonConfig", "return_type": "void", "signature": "setFastJsonConfig(FastJsonConfig)", "body_content": "{\r\n    this.fastJsonConfig = fastJsonConfig;\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.setFastJsonConfig", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.setFastJsonConfig(com.alibaba.fastjson.support.config.FastJsonConfig)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getCharset", "return_type": "Charset", "signature": "getCharset()", "body_content": "{\r\n    return this.fastJsonConfig.getCharset();\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.getCharset", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.getCharset()", "qualified_return_type": "java.nio.charset.Charset"}
{"java_doc": "", "method_name": "setCharset", "return_type": "void", "signature": "setCharset(Charset)", "body_content": "{\r\n    this.fastJsonConfig.setCharset(charset);\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.setCharset", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.setCharset(java.nio.charset.Charset)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getDateFormat", "return_type": "String", "signature": "getDateFormat()", "body_content": "{\r\n    return this.fastJsonConfig.getDateFormat();\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.getDateFormat", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.getDateFormat()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "setDateFormat", "return_type": "void", "signature": "setDateFormat(String)", "body_content": "{\r\n    this.fastJsonConfig.setDateFormat(dateFormat);\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.setDateFormat", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.setDateFormat(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getFeatures", "return_type": "SerializerFeature[]", "signature": "getFeatures()", "body_content": "{\r\n    return this.fastJsonConfig.getSerializerFeatures();\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.getFeatures", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.getFeatures()", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializerFeature[]"}
{"java_doc": "", "method_name": "setFeatures", "return_type": "void", "signature": "setFeatures(SerializerFeature[])", "body_content": "{\r\n    this.fastJsonConfig.setSerializerFeatures(features);\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.setFeatures", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.setFeatures(com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getFilters", "return_type": "SerializeFilter[]", "signature": "getFilters()", "body_content": "{\r\n    return this.fastJsonConfig.getSerializeFilters();\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.getFilters", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.getFilters()", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializeFilter[]"}
{"java_doc": "", "method_name": "setFilters", "return_type": "void", "signature": "setFilters(SerializeFilter[])", "body_content": "{\r\n    this.fastJsonConfig.setSerializeFilters(filters);\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.setFilters", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.setFilters(com.alibaba.fastjson.serializer.SerializeFilter...)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "addSerializeFilter", "return_type": "void", "signature": "addSerializeFilter(SerializeFilter)", "body_content": "{\r\n    if (filter == null) {\r\n        return;\r\n    }\r\n    int length = this.fastJsonConfig.getSerializeFilters().length;\r\n    SerializeFilter[] filters = new SerializeFilter[length + 1];\r\n    System.arraycopy(this.fastJsonConfig.getSerializeFilters(), 0, filters, 0, length);\r\n    filters[filters.length - 1] = filter;\r\n    this.fastJsonConfig.setSerializeFilters(filters);\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.addSerializeFilter", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.addSerializeFilter(com.alibaba.fastjson.serializer.SerializeFilter)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "supports", "return_type": "boolean", "signature": "supports(Class)", "body_content": "{\r\n    return true;\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.supports", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.supports(java.lang.Class<?>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "// \r\nreadInternal", "return_type": "// \r\nObject", "signature": "readInternal(Class, HttpInputMessage)", "body_content": "{\r\n    InputStream in = inputMessage.getBody();\r\n    return JSON.parseObject(in, fastJsonConfig.getCharset(), clazz, fastJsonConfig.getFeatures());\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.readInternal", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.readInternal(java.lang.Class<? extends java.lang.Object>, org.springframework.http.HttpInputMessage)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "writeInternal", "return_type": "void", "signature": "writeInternal(Object, HttpOutputMessage)", "body_content": "{\r\n    HttpHeaders headers = outputMessage.getHeaders();\r\n    ByteArrayOutputStream outnew = new ByteArrayOutputStream();\r\n    int len = // \r\n    JSON.// \r\n    writeJSONString(// \r\n    outnew, // \r\n    fastJsonConfig.getCharset(), // \r\n    obj, // \r\n    fastJsonConfig.getSerializeConfig(), // \r\n    fastJsonConfig.getSerializeFilters(), // \r\n    fastJsonConfig.getDateFormat(), // \r\n    JSON.DEFAULT_GENERATE_FEATURE, fastJsonConfig.getSerializerFeatures());\r\n    headers.setContentLength(len);\r\n    OutputStream out = outputMessage.getBody();\r\n    outnew.writeTo(out);\r\n    outnew.close();\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.writeInternal", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.writeInternal(java.lang.Object, org.springframework.http.HttpOutputMessage)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "canRead", "return_type": "boolean", "signature": "canRead(Type, Class, MediaType)", "body_content": "{\r\n    return super.canRead(contextClass, mediaType);\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.canRead", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "canWrite", "return_type": "boolean", "signature": "canWrite(Type, Class, MediaType)", "body_content": "{\r\n    return super.canWrite(contextClass, mediaType);\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.canWrite", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.canWrite(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "// \r\nread", "return_type": "// \r\nObject", "signature": "read(Type, Class, HttpInputMessage)", "body_content": "{\r\n    InputStream in = inputMessage.getBody();\r\n    return JSON.parseObject(in, fastJsonConfig.getCharset(), type, fastJsonConfig.getFeatures());\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.read", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "// \r\nwrite", "return_type": "// \r\nvoid", "signature": "write(Object, Type, MediaType, HttpOutputMessage)", "body_content": "{\r\n    HttpHeaders headers = outputMessage.getHeaders();\r\n    if (headers.getContentType() == null) {\r\n        if (contentType == null || contentType.isWildcardType() || contentType.isWildcardSubtype()) {\r\n            contentType = getDefaultContentType(t);\r\n        }\r\n        if (contentType != null) {\r\n            headers.setContentType(contentType);\r\n        }\r\n    }\r\n    if (headers.getContentLength() == -1) {\r\n        Long contentLength = getContentLength(t, headers.getContentType());\r\n        if (contentLength != null) {\r\n            headers.setContentLength(contentLength);\r\n        }\r\n    }\r\n    writeInternal(t, outputMessage);\r\n    outputMessage.getBody().flush();\r\n}", "class_name": "FastJsonHttpMessageConverter", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.write", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.write(java.lang.Object, java.lang.reflect.Type, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "translate", "return_type": "String", "signature": "translate(String)", "body_content": "{\r\n    switch(this) {\r\n        case SnakeCase:\r\n            {\r\n                StringBuilder buf = new StringBuilder();\r\n                for (int i = 0; i < propertyName.length(); ++i) {\r\n                    char ch = propertyName.charAt(i);\r\n                    if (ch >= 'A' && ch <= 'Z') {\r\n                        char ch_ucase = (char) (ch + 32);\r\n                        if (i > 0) {\r\n                            buf.append('_');\r\n                        }\r\n                        buf.append(ch_ucase);\r\n                    } else {\r\n                        buf.append(ch);\r\n                    }\r\n                }\r\n                return buf.toString();\r\n            }\r\n        case KebabCase:\r\n            {\r\n                StringBuilder buf = new StringBuilder();\r\n                for (int i = 0; i < propertyName.length(); ++i) {\r\n                    char ch = propertyName.charAt(i);\r\n                    if (ch >= 'A' && ch <= 'Z') {\r\n                        char ch_ucase = (char) (ch + 32);\r\n                        if (i > 0) {\r\n                            buf.append('-');\r\n                        }\r\n                        buf.append(ch_ucase);\r\n                    } else {\r\n                        buf.append(ch);\r\n                    }\r\n                }\r\n                return buf.toString();\r\n            }\r\n        case PascalCase:\r\n            {\r\n                char ch = propertyName.charAt(0);\r\n                if (ch >= 'a' && ch <= 'z') {\r\n                    char[] chars = propertyName.toCharArray();\r\n                    chars[0] -= 32;\r\n                    return new String(chars);\r\n                }\r\n                return propertyName;\r\n            }\r\n        case CamelCase:\r\n            {\r\n                char ch = propertyName.charAt(0);\r\n                if (ch >= 'A' && ch <= 'Z') {\r\n                    char[] chars = propertyName.toCharArray();\r\n                    chars[0] += 32;\r\n                    return new String(chars);\r\n                }\r\n                return propertyName;\r\n            }\r\n        default:\r\n            return propertyName;\r\n    }\r\n}", "class_name": "PropertyNamingStrategy", "qualified_method_name": "com.alibaba.fastjson.PropertyNamingStrategy.translate", "qualified_signature": "com.alibaba.fastjson.PropertyNamingStrategy.translate(java.lang.String)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getAutowiredFor", "return_type": "Set<Type>", "signature": "getAutowiredFor()", "body_content": "", "class_name": "AutowiredObjectDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer.getAutowiredFor", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer.getAutowiredFor()", "qualified_return_type": "java.util.Set<java.lang.reflect.Type>"}
{"java_doc": "", "method_name": "writeAfter", "return_type": "char", "signature": "writeAfter(JSONSerializer, Object, char)", "body_content": "{\r\n    serializerLocal.set(serializer);\r\n    seperatorLocal.set(seperator);\r\n    writeAfter(object);\r\n    serializerLocal.set(null);\r\n    return seperatorLocal.get();\r\n}", "class_name": "AfterFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.AfterFilter.writeAfter", "qualified_signature": "com.alibaba.fastjson.serializer.AfterFilter.writeAfter(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, char)", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "writeKeyValue", "return_type": "void", "signature": "writeKeyValue(String, Object)", "body_content": "{\r\n    JSONSerializer serializer = serializerLocal.get();\r\n    char seperator = seperatorLocal.get();\r\n    serializer.writeKeyValue(seperator, key, value);\r\n    if (seperator != ',') {\r\n        seperatorLocal.set(COMMA);\r\n    }\r\n}", "class_name": "AfterFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.AfterFilter.writeKeyValue", "qualified_signature": "com.alibaba.fastjson.serializer.AfterFilter.writeKeyValue(java.lang.String, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeAfter", "return_type": "void", "signature": "writeAfter(Object)", "body_content": "", "class_name": "AfterFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.AfterFilter.writeAfter", "qualified_signature": "com.alibaba.fastjson.serializer.AfterFilter.writeAfter(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull(SerializerFeature.WriteNullListAsEmpty);\r\n        return;\r\n    }\r\n    Type elementType = null;\r\n    if (out.isEnabled(SerializerFeature.WriteClassName)) {\r\n        if (fieldType instanceof ParameterizedType) {\r\n            ParameterizedType param = (ParameterizedType) fieldType;\r\n            elementType = param.getActualTypeArguments()[0];\r\n        }\r\n    }\r\n    Collection<?> collection = (Collection<?>) object;\r\n    SerialContext context = serializer.context;\r\n    serializer.setContext(context, object, fieldName, 0);\r\n    if (out.isEnabled(SerializerFeature.WriteClassName)) {\r\n        if (HashSet.class == collection.getClass()) {\r\n            out.append(\"Set\");\r\n        } else if (TreeSet.class == collection.getClass()) {\r\n            out.append(\"TreeSet\");\r\n        }\r\n    }\r\n    try {\r\n        int i = 0;\r\n        out.append('[');\r\n        for (Object item : collection) {\r\n            if (i++ != 0) {\r\n                out.append(',');\r\n            }\r\n            if (item == null) {\r\n                out.writeNull();\r\n                continue;\r\n            }\r\n            Class<?> clazz = item.getClass();\r\n            if (clazz == Integer.class) {\r\n                out.writeInt(((Integer) item).intValue());\r\n                continue;\r\n            }\r\n            if (clazz == Long.class) {\r\n                out.writeLong(((Long) item).longValue());\r\n                if (out.isEnabled(SerializerFeature.WriteClassName)) {\r\n                    out.write('L');\r\n                }\r\n                continue;\r\n            }\r\n            ObjectSerializer itemSerializer = serializer.getObjectWriter(clazz);\r\n            itemSerializer.write(serializer, item, i - 1, elementType, 0);\r\n        }\r\n        out.append(']');\r\n    } finally {\r\n        serializer.context = context;\r\n    }\r\n}", "class_name": "CollectionCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.CollectionCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.CollectionCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    if (parser.lexer.token() == JSONToken.NULL) {\r\n        parser.lexer.nextToken(JSONToken.COMMA);\r\n        return null;\r\n    }\r\n    if (type == JSONArray.class) {\r\n        JSONArray array = new JSONArray();\r\n        parser.parseArray(array);\r\n        return (T) array;\r\n    }\r\n    Collection list = TypeUtils.createCollection(type);\r\n    Type itemType = null;\r\n    if (type instanceof ParameterizedType) {\r\n        itemType = ((ParameterizedType) type).getActualTypeArguments()[0];\r\n    } else {\r\n        Class<?> clazz = null;\r\n        if (// \r\n        type instanceof Class<?> && !(clazz = (Class<?>) type).getName().startsWith(\"java.\")) {\r\n            Type superClass = clazz.getGenericSuperclass();\r\n            if (superClass instanceof ParameterizedType) {\r\n                itemType = ((ParameterizedType) superClass).getActualTypeArguments()[0];\r\n            }\r\n        }\r\n        if (itemType == null) {\r\n            itemType = Object.class;\r\n        }\r\n    }\r\n    parser.parseArray(itemType, list, fieldName);\r\n    return (T) list;\r\n}", "class_name": "CollectionCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.CollectionCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.CollectionCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LBRACKET;\r\n}", "class_name": "CollectionCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.CollectionCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.CollectionCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "processExtra", "return_type": "void", "signature": "processExtra(String, Object)", "body_content": "", "class_name": "ExtraProcessable", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ExtraProcessable.processExtra", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ExtraProcessable.processExtra(java.lang.String, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "run", "return_type": "Object", "signature": "run()", "body_content": "{\r\n    return ASMClassLoader.class.getProtectionDomain();\r\n}", "class_name": "ASMClassLoader", "qualified_method_name": "com.alibaba.fastjson.util.ASMClassLoader.Anonymous-9f1ae562-bf09-4786-ad9a-07ea39774ffa.run", "qualified_signature": "com.alibaba.fastjson.util.ASMClassLoader.Anonymous-25d0f22f-0eae-45d4-99dc-48e8fb8fa953.run()", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "getParentClassLoader", "return_type": "ClassLoader", "signature": "getParentClassLoader()", "body_content": "{\r\n    ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\r\n    if (contextClassLoader != null) {\r\n        try {\r\n            contextClassLoader.loadClass(JSON.class.getName());\r\n            return contextClassLoader;\r\n        } catch (ClassNotFoundException e) {\r\n            // skip\r\n        }\r\n    }\r\n    return JSON.class.getClassLoader();\r\n}", "class_name": "ASMClassLoader", "qualified_method_name": "com.alibaba.fastjson.util.ASMClassLoader.getParentClassLoader", "qualified_signature": "com.alibaba.fastjson.util.ASMClassLoader.getParentClassLoader()", "qualified_return_type": "java.lang.ClassLoader"}
{"java_doc": "", "method_name": "loadClass", "return_type": "Class<?>", "signature": "loadClass(String, boolean)", "body_content": "{\r\n    Class<?> mappingClass = classMapping.get(name);\r\n    if (mappingClass != null) {\r\n        return mappingClass;\r\n    }\r\n    try {\r\n        return super.loadClass(name, resolve);\r\n    } catch (ClassNotFoundException e) {\r\n        throw e;\r\n    }\r\n}", "class_name": "ASMClassLoader", "qualified_method_name": "com.alibaba.fastjson.util.ASMClassLoader.loadClass", "qualified_signature": "com.alibaba.fastjson.util.ASMClassLoader.loadClass(java.lang.String, boolean)", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "defineClassPublic", "return_type": "Class<?>", "signature": "defineClassPublic(String, byte[], int, int)", "body_content": "{\r\n    Class<?> clazz = defineClass(name, b, off, len, DOMAIN);\r\n    return clazz;\r\n}", "class_name": "ASMClassLoader", "qualified_method_name": "com.alibaba.fastjson.util.ASMClassLoader.defineClassPublic", "qualified_signature": "com.alibaba.fastjson.util.ASMClassLoader.defineClassPublic(java.lang.String, byte[], int, int)", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "isExternalClass", "return_type": "boolean", "signature": "isExternalClass(Class)", "body_content": "{\r\n    ClassLoader classLoader = clazz.getClassLoader();\r\n    if (classLoader == null) {\r\n        return false;\r\n    }\r\n    ClassLoader current = this;\r\n    while (current != null) {\r\n        if (current == classLoader) {\r\n            return false;\r\n        }\r\n        current = current.getParent();\r\n    }\r\n    return true;\r\n}", "class_name": "ASMClassLoader", "qualified_method_name": "com.alibaba.fastjson.util.ASMClassLoader.isExternalClass", "qualified_signature": "com.alibaba.fastjson.util.ASMClassLoader.isExternalClass(java.lang.Class<?>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    if (type instanceof GenericArrayType) {\r\n        Type componentType = ((GenericArrayType) type).getGenericComponentType();\r\n        if (componentType instanceof TypeVariable) {\r\n            TypeVariable<?> componentVar = (TypeVariable<?>) componentType;\r\n            componentType = componentVar.getBounds()[0];\r\n        }\r\n        List<Object> list = new ArrayList<Object>();\r\n        parser.parseArray(componentType, list);\r\n        Class<?> componentClass;\r\n        if (componentType instanceof Class) {\r\n            componentClass = (Class<?>) componentType;\r\n            Object[] array = (Object[]) Array.newInstance(componentClass, list.size());\r\n            list.toArray(array);\r\n            return (T) array;\r\n        } else {\r\n            return (T) list.toArray();\r\n        }\r\n    }\r\n    if (type instanceof Class && type != Object.class && type != Serializable.class) {\r\n        return (T) parser.parseObject(type);\r\n    }\r\n    return (T) parser.parse(fieldName);\r\n}", "class_name": "JavaObjectDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LBRACE;\r\n}", "class_name": "JavaObjectDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull();\r\n        return;\r\n    }\r\n    Map<?, ?> map = (Map<?, ?>) object;\r\n    // if (out.isEnabled(SerializerFeature.SortField)) {\r\n    // if ((!(map instanceof SortedMap)) && !(map instanceof LinkedHashMap)) {\r\n    // try {\r\n    // map = new TreeMap(map);\r\n    // } catch (Exception ex) {\r\n    // // skip\r\n    // }\r\n    // }\r\n    // }\r\n    if (serializer.containsReference(object)) {\r\n        serializer.writeReference(object);\r\n        return;\r\n    }\r\n    SerialContext parent = serializer.context;\r\n    serializer.setContext(parent, object, fieldName, 0);\r\n    try {\r\n        out.write('{');\r\n        serializer.incrementIndent();\r\n        Class<?> preClazz = null;\r\n        ObjectSerializer preWriter = null;\r\n        boolean first = true;\r\n        if (out.isEnabled(SerializerFeature.WriteClassName)) {\r\n            String typeKey = serializer.config.typeKey;\r\n            Class<?> mapClass = map.getClass();\r\n            boolean containsKey = (mapClass == JSONObject.class || mapClass == HashMap.class || mapClass == LinkedHashMap.class) && map.containsKey(typeKey);\r\n            if (!containsKey) {\r\n                out.writeFieldName(typeKey);\r\n                out.writeString(object.getClass().getName());\r\n                first = false;\r\n            }\r\n        }\r\n        for (Map.Entry entry : map.entrySet()) {\r\n            Object value = entry.getValue();\r\n            Object entryKey = entry.getKey();\r\n            {\r\n                List<PropertyPreFilter> preFilters = serializer.propertyPreFilters;\r\n                if (preFilters != null && preFilters.size() > 0) {\r\n                    if (entryKey == null || entryKey instanceof String) {\r\n                        if (!this.applyName(serializer, object, (String) entryKey)) {\r\n                            continue;\r\n                        }\r\n                    } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\r\n                        String strKey = JSON.toJSONString(entryKey);\r\n                        if (!this.applyName(serializer, object, strKey)) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            {\r\n                List<PropertyPreFilter> preFilters = this.propertyPreFilters;\r\n                if (preFilters != null && preFilters.size() > 0) {\r\n                    if (entryKey == null || entryKey instanceof String) {\r\n                        if (!this.applyName(serializer, object, (String) entryKey)) {\r\n                            continue;\r\n                        }\r\n                    } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\r\n                        String strKey = JSON.toJSONString(entryKey);\r\n                        if (!this.applyName(serializer, object, strKey)) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            {\r\n                List<PropertyFilter> propertyFilters = serializer.propertyFilters;\r\n                if (propertyFilters != null && propertyFilters.size() > 0) {\r\n                    if (entryKey == null || entryKey instanceof String) {\r\n                        if (!this.apply(serializer, object, (String) entryKey, value)) {\r\n                            continue;\r\n                        }\r\n                    } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\r\n                        String strKey = JSON.toJSONString(entryKey);\r\n                        if (!this.apply(serializer, object, strKey, value)) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            {\r\n                List<PropertyFilter> propertyFilters = this.propertyFilters;\r\n                if (propertyFilters != null && propertyFilters.size() > 0) {\r\n                    if (entryKey == null || entryKey instanceof String) {\r\n                        if (!this.apply(serializer, object, (String) entryKey, value)) {\r\n                            continue;\r\n                        }\r\n                    } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\r\n                        String strKey = JSON.toJSONString(entryKey);\r\n                        if (!this.apply(serializer, object, strKey, value)) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            {\r\n                List<NameFilter> nameFilters = serializer.nameFilters;\r\n                if (nameFilters != null && nameFilters.size() > 0) {\r\n                    if (entryKey == null || entryKey instanceof String) {\r\n                        entryKey = this.processKey(serializer, object, (String) entryKey, value);\r\n                    } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\r\n                        String strKey = JSON.toJSONString(entryKey);\r\n                        entryKey = this.processKey(serializer, object, strKey, value);\r\n                    }\r\n                }\r\n            }\r\n            {\r\n                List<NameFilter> nameFilters = this.nameFilters;\r\n                if (nameFilters != null && nameFilters.size() > 0) {\r\n                    if (entryKey == null || entryKey instanceof String) {\r\n                        entryKey = this.processKey(serializer, object, (String) entryKey, value);\r\n                    } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\r\n                        String strKey = JSON.toJSONString(entryKey);\r\n                        entryKey = this.processKey(serializer, object, strKey, value);\r\n                    }\r\n                }\r\n            }\r\n            {\r\n                List<ValueFilter> valueFilters = serializer.valueFilters;\r\n                List<ContextValueFilter> contextValueFilters = this.contextValueFilters;\r\n                if (// \r\n                (valueFilters != null && valueFilters.size() > 0) || (contextValueFilters != null && contextValueFilters.size() > 0)) {\r\n                    if (entryKey == null || entryKey instanceof String) {\r\n                        value = this.processValue(serializer, null, object, (String) entryKey, value);\r\n                    } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\r\n                        String strKey = JSON.toJSONString(entryKey);\r\n                        value = this.processValue(serializer, null, object, strKey, value);\r\n                    }\r\n                }\r\n            }\r\n            {\r\n                List<ValueFilter> valueFilters = this.valueFilters;\r\n                List<ContextValueFilter> contextValueFilters = this.contextValueFilters;\r\n                if (// \r\n                (valueFilters != null && valueFilters.size() > 0) || (contextValueFilters != null && contextValueFilters.size() > 0)) {\r\n                    if (entryKey == null || entryKey instanceof String) {\r\n                        value = this.processValue(serializer, null, object, (String) entryKey, value);\r\n                    } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\r\n                        String strKey = JSON.toJSONString(entryKey);\r\n                        value = this.processValue(serializer, null, object, strKey, value);\r\n                    }\r\n                }\r\n            }\r\n            if (value == null) {\r\n                if (!out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (entryKey instanceof String) {\r\n                String key = (String) entryKey;\r\n                if (!first) {\r\n                    out.write(',');\r\n                }\r\n                if (out.isEnabled(SerializerFeature.PrettyFormat)) {\r\n                    serializer.println();\r\n                }\r\n                out.writeFieldName(key, true);\r\n            } else {\r\n                if (!first) {\r\n                    out.write(',');\r\n                }\r\n                if (out.isEnabled(SerializerFeature.BrowserCompatible) || out.isEnabled(SerializerFeature.WriteNonStringKeyAsString) || out.isEnabled(SerializerFeature.BrowserSecure)) {\r\n                    String strEntryKey = JSON.toJSONString(entryKey);\r\n                    serializer.write(strEntryKey);\r\n                } else {\r\n                    serializer.write(entryKey);\r\n                }\r\n                out.write(':');\r\n            }\r\n            first = false;\r\n            if (value == null) {\r\n                out.writeNull();\r\n                continue;\r\n            }\r\n            Class<?> clazz = value.getClass();\r\n            if (clazz == preClazz) {\r\n                preWriter.write(serializer, value, entryKey, null, 0);\r\n            } else {\r\n                preClazz = clazz;\r\n                preWriter = serializer.getObjectWriter(clazz);\r\n                preWriter.write(serializer, value, entryKey, null, 0);\r\n            }\r\n        }\r\n    } finally {\r\n        serializer.context = parent;\r\n    }\r\n    serializer.decrementIdent();\r\n    if (out.isEnabled(SerializerFeature.PrettyFormat) && map.size() > 0) {\r\n        serializer.println();\r\n    }\r\n    out.write('}');\r\n}", "class_name": "MapSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.MapSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.MapSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "genFieldNameChars", "return_type": "char[]", "signature": "genFieldNameChars()", "body_content": "{\r\n    int nameLen = this.name.length();\r\n    char[] name_chars = new char[nameLen + 3];\r\n    this.name.getChars(0, this.name.length(), name_chars, 1);\r\n    name_chars[0] = '\"';\r\n    name_chars[nameLen + 1] = '\"';\r\n    name_chars[nameLen + 2] = ':';\r\n    return name_chars;\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.genFieldNameChars", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.genFieldNameChars()", "qualified_return_type": "char[]"}
{"java_doc": "", "method_name": "getAnnation", "return_type": "T", "signature": "getAnnation(Class)", "body_content": "{\r\n    if (annotationClass == JSONField.class) {\r\n        return (T) getAnnotation();\r\n    }\r\n    T annotatition = null;\r\n    if (method != null) {\r\n        annotatition = method.getAnnotation(annotationClass);\r\n    }\r\n    if (annotatition == null && field != null) {\r\n        annotatition = field.getAnnotation(annotationClass);\r\n    }\r\n    return annotatition;\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.getAnnation", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.getAnnation(java.lang.Class<T>)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFieldType", "return_type": "Type", "signature": "getFieldType(Class, Type, Type)", "body_content": "{\r\n    if (clazz == null || type == null) {\r\n        return fieldType;\r\n    }\r\n    if (fieldType instanceof GenericArrayType) {\r\n        GenericArrayType genericArrayType = (GenericArrayType) fieldType;\r\n        Type componentType = genericArrayType.getGenericComponentType();\r\n        Type componentTypeX = getFieldType(clazz, type, componentType);\r\n        if (componentType != componentTypeX) {\r\n            Type fieldTypeX = Array.newInstance(TypeUtils.getClass(componentTypeX), 0).getClass();\r\n            return fieldTypeX;\r\n        }\r\n        return fieldType;\r\n    }\r\n    if (!TypeUtils.isGenericParamType(type)) {\r\n        return fieldType;\r\n    }\r\n    if (fieldType instanceof TypeVariable) {\r\n        ParameterizedType paramType = (ParameterizedType) TypeUtils.getGenericParamType(type);\r\n        Class<?> parameterizedClass = TypeUtils.getClass(paramType);\r\n        final TypeVariable<?> typeVar = (TypeVariable<?>) fieldType;\r\n        TypeVariable<?>[] typeVariables = parameterizedClass.getTypeParameters();\r\n        for (int i = 0; i < typeVariables.length; ++i) {\r\n            if (typeVariables[i].getName().equals(typeVar.getName())) {\r\n                fieldType = paramType.getActualTypeArguments()[i];\r\n                return fieldType;\r\n            }\r\n        }\r\n    }\r\n    if (fieldType instanceof ParameterizedType) {\r\n        ParameterizedType parameterizedFieldType = (ParameterizedType) fieldType;\r\n        Type[] arguments = parameterizedFieldType.getActualTypeArguments();\r\n        boolean changed = false;\r\n        TypeVariable<?>[] typeVariables = null;\r\n        Type[] actualTypes = null;\r\n        ParameterizedType paramType = null;\r\n        if (type instanceof ParameterizedType) {\r\n            paramType = (ParameterizedType) type;\r\n            typeVariables = clazz.getTypeParameters();\r\n        } else if (clazz.getGenericSuperclass() instanceof ParameterizedType) {\r\n            paramType = (ParameterizedType) clazz.getGenericSuperclass();\r\n            typeVariables = clazz.getSuperclass().getTypeParameters();\r\n        }\r\n        for (int i = 0; i < arguments.length && paramType != null; ++i) {\r\n            Type feildTypeArguement = arguments[i];\r\n            if (feildTypeArguement instanceof TypeVariable) {\r\n                TypeVariable<?> typeVar = (TypeVariable<?>) feildTypeArguement;\r\n                for (int j = 0; j < typeVariables.length; ++j) {\r\n                    if (typeVariables[j].getName().equals(typeVar.getName())) {\r\n                        if (actualTypes == null) {\r\n                            actualTypes = paramType.getActualTypeArguments();\r\n                        }\r\n                        arguments[i] = actualTypes[j];\r\n                        changed = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (changed) {\r\n            fieldType = new ParameterizedTypeImpl(arguments, parameterizedFieldType.getOwnerType(), parameterizedFieldType.getRawType());\r\n            return fieldType;\r\n        }\r\n    }\r\n    return fieldType;\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.getFieldType", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.getFieldType(java.lang.Class<?>, java.lang.reflect.Type, java.lang.reflect.Type)", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "", "method_name": "getInheritGenericType", "return_type": "Type", "signature": "getInheritGenericType(Class, TypeVariable)", "body_content": "{\r\n    Type type = null;\r\n    GenericDeclaration gd = tv.getGenericDeclaration();\r\n    do {\r\n        type = clazz.getGenericSuperclass();\r\n        if (type == null) {\r\n            return null;\r\n        }\r\n        if (type instanceof ParameterizedType) {\r\n            ParameterizedType ptype = (ParameterizedType) type;\r\n            if (ptype.getRawType() == gd) {\r\n                TypeVariable<?>[] tvs = gd.getTypeParameters();\r\n                Type[] types = ptype.getActualTypeArguments();\r\n                for (int i = 0; i < tvs.length; i++) {\r\n                    if (tvs[i] == tv)\r\n                        return types[i];\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n        clazz = TypeUtils.getClass(type);\r\n    } while (type != null);\r\n    return null;\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.getInheritGenericType", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.getInheritGenericType(java.lang.Class<?>, java.lang.reflect.TypeVariable<?>)", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "", "method_name": "toString", "return_type": "String", "signature": "toString()", "body_content": "{\r\n    return this.name;\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.toString", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.toString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getMember", "return_type": "Member", "signature": "getMember()", "body_content": "{\r\n    if (method != null) {\r\n        return method;\r\n    } else {\r\n        return field;\r\n    }\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.getMember", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.getMember()", "qualified_return_type": "java.lang.reflect.Member"}
{"java_doc": "", "method_name": "getDeclaredClass", "return_type": "Class<?>", "signature": "getDeclaredClass()", "body_content": "{\r\n    if (this.method != null) {\r\n        return this.method.getDeclaringClass();\r\n    }\r\n    if (this.field != null) {\r\n        return this.field.getDeclaringClass();\r\n    }\r\n    return null;\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.getDeclaredClass", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.getDeclaredClass()", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "compareTo", "return_type": "int", "signature": "compareTo(FieldInfo)", "body_content": "{\r\n    if (this.ordinal < o.ordinal) {\r\n        return -1;\r\n    }\r\n    if (this.ordinal > o.ordinal) {\r\n        return 1;\r\n    }\r\n    int result = this.name.compareTo(o.name);\r\n    if (result != 0) {\r\n        return result;\r\n    }\r\n    Class<?> thisDeclaringClass = this.getDeclaredClass();\r\n    Class<?> otherDeclaringClass = o.getDeclaredClass();\r\n    if (thisDeclaringClass != null && otherDeclaringClass != null && thisDeclaringClass != otherDeclaringClass) {\r\n        if (thisDeclaringClass.isAssignableFrom(otherDeclaringClass)) {\r\n            return -1;\r\n        }\r\n        if (otherDeclaringClass.isAssignableFrom(thisDeclaringClass)) {\r\n            return 1;\r\n        }\r\n    }\r\n    boolean isSampeType = this.field != null && this.field.getType() == this.fieldClass;\r\n    boolean oSameType = o.field != null && o.field.getType() == o.fieldClass;\r\n    if (isSampeType && !oSameType) {\r\n        return 1;\r\n    }\r\n    if (oSameType && !isSampeType) {\r\n        return -1;\r\n    }\r\n    if (o.fieldClass.isPrimitive() && !this.fieldClass.isPrimitive()) {\r\n        return 1;\r\n    }\r\n    if (this.fieldClass.isPrimitive() && !o.fieldClass.isPrimitive()) {\r\n        return -1;\r\n    }\r\n    if (o.fieldClass.getName().startsWith(\"java.\") && !this.fieldClass.getName().startsWith(\"java.\")) {\r\n        return 1;\r\n    }\r\n    if (this.fieldClass.getName().startsWith(\"java.\") && !o.fieldClass.getName().startsWith(\"java.\")) {\r\n        return -1;\r\n    }\r\n    return this.fieldClass.getName().compareTo(o.fieldClass.getName());\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.compareTo", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.compareTo(com.alibaba.fastjson.util.FieldInfo)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "getAnnotation", "return_type": "JSONField", "signature": "getAnnotation()", "body_content": "{\r\n    if (this.fieldAnnotation != null) {\r\n        return this.fieldAnnotation;\r\n    }\r\n    return this.methodAnnotation;\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.getAnnotation", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.getAnnotation()", "qualified_return_type": "com.alibaba.fastjson.annotation.JSONField"}
{"java_doc": "", "method_name": "getFormat", "return_type": "String", "signature": "getFormat()", "body_content": "{\r\n    return format;\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.getFormat", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.getFormat()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "get", "return_type": "Object", "signature": "get(Object)", "body_content": "{\r\n    if (method != null) {\r\n        Object value = method.invoke(javaObject, new Object[0]);\r\n        return value;\r\n    }\r\n    return field.get(javaObject);\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.get", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.get(java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "set", "return_type": "void", "signature": "set(Object, Object)", "body_content": "{\r\n    if (method != null) {\r\n        method.invoke(javaObject, new Object[] { value });\r\n        return;\r\n    }\r\n    field.set(javaObject, value);\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.set", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.set(java.lang.Object, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setAccessible", "return_type": "void", "signature": "setAccessible()", "body_content": "{\r\n    if (method != null) {\r\n        TypeUtils.setAccessible(method);\r\n        return;\r\n    }\r\n    TypeUtils.setAccessible(field);\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.setAccessible", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.setAccessible()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "alternateName", "return_type": "boolean", "signature": "alternateName(String)", "body_content": "{\r\n    for (String item : this.alternateNames) {\r\n        if (item.equals(name)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "class_name": "FieldInfo", "qualified_method_name": "com.alibaba.fastjson.util.FieldInfo.alternateName", "qualified_signature": "com.alibaba.fastjson.util.FieldInfo.alternateName(java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull(SerializerFeature.WriteNullListAsEmpty);\r\n        return;\r\n    }\r\n    Object[] array = (Object[]) object;\r\n    int size = array.length;\r\n    SerialContext context = serializer.context;\r\n    serializer.setContext(context, object, fieldName, 0);\r\n    try {\r\n        out.append('[');\r\n        for (int i = 0; i < size; ++i) {\r\n            if (i != 0) {\r\n                out.append(',');\r\n            }\r\n            Object item = array[i];\r\n            if (item == null) {\r\n                out.append(\"null\");\r\n            } else if (item.getClass() == componentType) {\r\n                compObjectSerializer.write(serializer, item, i, null, 0);\r\n            } else {\r\n                ObjectSerializer itemSerializer = serializer.getObjectWriter(item.getClass());\r\n                itemSerializer.write(serializer, item, i, null, 0);\r\n            }\r\n        }\r\n        out.append(']');\r\n    } finally {\r\n        serializer.context = context;\r\n    }\r\n}", "class_name": "ArraySerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.ArraySerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.ArraySerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "get", "return_type": "V", "signature": "get(K)", "body_content": "{\r\n    final int hash = System.identityHashCode(key);\r\n    final int bucket = hash & indexMask;\r\n    for (Entry<K, V> entry = buckets[bucket]; entry != null; entry = entry.next) {\r\n        if (key == entry.key) {\r\n            return (V) entry.value;\r\n        }\r\n    }\r\n    return null;\r\n}", "class_name": "IdentityHashMap", "qualified_method_name": "com.alibaba.fastjson.util.IdentityHashMap.get", "qualified_signature": "com.alibaba.fastjson.util.IdentityHashMap.get(K)", "qualified_return_type": "V"}
{"java_doc": "", "method_name": "put", "return_type": "boolean", "signature": "put(K, V)", "body_content": "{\r\n    final int hash = System.identityHashCode(key);\r\n    final int bucket = hash & indexMask;\r\n    for (Entry<K, V> entry = buckets[bucket]; entry != null; entry = entry.next) {\r\n        if (key == entry.key) {\r\n            entry.value = value;\r\n            return true;\r\n        }\r\n    }\r\n    Entry<K, V> entry = new Entry<K, V>(key, value, hash, buckets[bucket]);\r\n    // 并发是处理时会可能导致缓存丢失，但不影响正确性\r\n    buckets[bucket] = entry;\r\n    return false;\r\n}", "class_name": "IdentityHashMap", "qualified_method_name": "com.alibaba.fastjson.util.IdentityHashMap.put", "qualified_signature": "com.alibaba.fastjson.util.IdentityHashMap.put(K, V)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getMask", "return_type": "int", "signature": "getMask()", "body_content": "{\r\n    return mask;\r\n}", "class_name": "Feature", "qualified_method_name": "com.alibaba.fastjson.parser.Feature.getMask", "qualified_signature": "com.alibaba.fastjson.parser.Feature.getMask()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "isEnabled", "return_type": "boolean", "signature": "isEnabled(int, Feature)", "body_content": "{\r\n    return (features & feature.mask) != 0;\r\n}", "class_name": "Feature", "qualified_method_name": "com.alibaba.fastjson.parser.Feature.isEnabled", "qualified_signature": "com.alibaba.fastjson.parser.Feature.isEnabled(int, com.alibaba.fastjson.parser.Feature)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "config", "return_type": "int", "signature": "config(int, Feature, boolean)", "body_content": "{\r\n    if (state) {\r\n        features |= feature.mask;\r\n    } else {\r\n        features &= ~feature.mask;\r\n    }\r\n    return features;\r\n}", "class_name": "Feature", "qualified_method_name": "com.alibaba.fastjson.parser.Feature.config", "qualified_signature": "com.alibaba.fastjson.parser.Feature.config(int, com.alibaba.fastjson.parser.Feature, boolean)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "of", "return_type": "int", "signature": "of(Feature[])", "body_content": "{\r\n    if (features == null) {\r\n        return 0;\r\n    }\r\n    int value = 0;\r\n    for (Feature feature : features) {\r\n        value |= feature.mask;\r\n    }\r\n    return value;\r\n}", "class_name": "Feature", "qualified_method_name": "com.alibaba.fastjson.parser.Feature.of", "qualified_signature": "com.alibaba.fastjson.parser.Feature.of(com.alibaba.fastjson.parser.Feature[])", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    if (object == null) {\r\n        serializer.out.writeNull();\r\n        return;\r\n    }\r\n    Date date = (Date) object;\r\n    JSONObject json = new JSONObject();\r\n    json.put(\"date\", date.getDate());\r\n    json.put(\"day\", date.getDay());\r\n    json.put(\"hours\", date.getHours());\r\n    json.put(\"minutes\", date.getMinutes());\r\n    json.put(\"month\", date.getMonth());\r\n    json.put(\"seconds\", date.getSeconds());\r\n    json.put(\"time\", date.getTime());\r\n    json.put(\"timezoneOffset\", date.getTimezoneOffset());\r\n    json.put(\"year\", date.getYear());\r\n    serializer.write(json);\r\n}", "class_name": "JSONLibDataFormatSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.NULL) {\r\n        lexer.nextToken();\r\n        return null;\r\n    }\r\n    if (parser.getResolveStatus() == DefaultJSONParser.TypeNameRedirect) {\r\n        parser.setResolveStatus(DefaultJSONParser.NONE);\r\n    } else {\r\n        if (lexer.token() != JSONToken.LBRACE) {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n    }\r\n    Throwable cause = null;\r\n    Class<?> exClass = null;\r\n    if (type != null && type instanceof Class) {\r\n        Class<?> clazz = (Class<?>) type;\r\n        if (Throwable.class.isAssignableFrom(clazz)) {\r\n            exClass = clazz;\r\n        }\r\n    }\r\n    String message = null;\r\n    StackTraceElement[] stackTrace = null;\r\n    Map<String, Object> otherValues = new HashMap<String, Object>();\r\n    for (; ; ) {\r\n        // lexer.scanSymbol\r\n        String key = lexer.scanSymbol(parser.getSymbolTable());\r\n        if (key == null) {\r\n            if (lexer.token() == JSONToken.RBRACE) {\r\n                lexer.nextToken(JSONToken.COMMA);\r\n                break;\r\n            }\r\n            if (lexer.token() == JSONToken.COMMA) {\r\n                if (lexer.isEnabled(Feature.AllowArbitraryCommas)) {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);\r\n        if (JSON.DEFAULT_TYPE_KEY.equals(key)) {\r\n            if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                String exClassName = lexer.stringVal();\r\n                exClass = TypeUtils.loadClass(exClassName, parser.getConfig().getDefaultClassLoader());\r\n            } else {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n            lexer.nextToken(JSONToken.COMMA);\r\n        } else if (\"message\".equals(key)) {\r\n            if (lexer.token() == JSONToken.NULL) {\r\n                message = null;\r\n            } else if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                message = lexer.stringVal();\r\n            } else {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n            lexer.nextToken();\r\n        } else if (\"cause\".equals(key)) {\r\n            cause = deserialze(parser, null, \"cause\");\r\n        } else if (\"stackTrace\".equals(key)) {\r\n            stackTrace = parser.parseObject(StackTraceElement[].class);\r\n        } else {\r\n            // TODO\r\n            otherValues.put(key, parser.parse());\r\n        }\r\n        if (lexer.token() == JSONToken.RBRACE) {\r\n            lexer.nextToken(JSONToken.COMMA);\r\n            break;\r\n        }\r\n    }\r\n    Throwable ex = null;\r\n    if (exClass == null) {\r\n        ex = new Exception(message, cause);\r\n    } else {\r\n        try {\r\n            ex = createException(message, cause, exClass);\r\n            if (ex == null) {\r\n                ex = new Exception(message, cause);\r\n            }\r\n        } catch (Exception e) {\r\n            throw new JSONException(\"create instance error\", e);\r\n        }\r\n    }\r\n    if (stackTrace != null) {\r\n        ex.setStackTrace(stackTrace);\r\n    }\r\n    return (T) ex;\r\n}", "class_name": "ThrowableDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "createException", "return_type": "Throwable", "signature": "createException(String, Throwable, Class)", "body_content": "{\r\n    Constructor<?> defaultConstructor = null;\r\n    Constructor<?> messageConstructor = null;\r\n    Constructor<?> causeConstructor = null;\r\n    for (Constructor<?> constructor : exClass.getConstructors()) {\r\n        Class<?>[] types = constructor.getParameterTypes();\r\n        if (types.length == 0) {\r\n            defaultConstructor = constructor;\r\n            continue;\r\n        }\r\n        if (types.length == 1 && types[0] == String.class) {\r\n            messageConstructor = constructor;\r\n            continue;\r\n        }\r\n        if (types.length == 2 && types[0] == String.class && types[1] == Throwable.class) {\r\n            causeConstructor = constructor;\r\n            continue;\r\n        }\r\n    }\r\n    if (causeConstructor != null) {\r\n        return (Throwable) causeConstructor.newInstance(message, cause);\r\n    }\r\n    if (messageConstructor != null) {\r\n        return (Throwable) messageConstructor.newInstance(message);\r\n    }\r\n    if (defaultConstructor != null) {\r\n        return (Throwable) defaultConstructor.newInstance();\r\n    }\r\n    return null;\r\n}", "class_name": "ThrowableDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer.createException", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer.createException(java.lang.String, java.lang.Throwable, java.lang.Class<?>)", "qualified_return_type": "java.lang.Throwable"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LBRACE;\r\n}", "class_name": "ThrowableDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "\r\n@return JSON text\r\n", "method_name": "toJSONString", "return_type": "String", "signature": "toJSONString()", "body_content": "", "class_name": "JSONAware", "qualified_method_name": "com.alibaba.fastjson.JSONAware.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSONAware.toJSONString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "\r\n@since 1.2.9\r\n", "method_name": "getMaxLevel", "return_type": "int", "signature": "getMaxLevel()", "body_content": "{\r\n    return maxLevel;\r\n}", "class_name": "SimplePropertyPreFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.SimplePropertyPreFilter.getMaxLevel", "qualified_signature": "com.alibaba.fastjson.serializer.SimplePropertyPreFilter.getMaxLevel()", "qualified_return_type": "int"}
{"java_doc": "\r\n@since 1.2.9\r\n", "method_name": "setMaxLevel", "return_type": "void", "signature": "setMaxLevel(int)", "body_content": "{\r\n    this.maxLevel = maxLevel;\r\n}", "class_name": "SimplePropertyPreFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.SimplePropertyPreFilter.setMaxLevel", "qualified_signature": "com.alibaba.fastjson.serializer.SimplePropertyPreFilter.setMaxLevel(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getClazz", "return_type": "Class<?>", "signature": "getClazz()", "body_content": "{\r\n    return clazz;\r\n}", "class_name": "SimplePropertyPreFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.SimplePropertyPreFilter.getClazz", "qualified_signature": "com.alibaba.fastjson.serializer.SimplePropertyPreFilter.getClazz()", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "getIncludes", "return_type": "Set<String>", "signature": "getIncludes()", "body_content": "{\r\n    return includes;\r\n}", "class_name": "SimplePropertyPreFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.SimplePropertyPreFilter.getIncludes", "qualified_signature": "com.alibaba.fastjson.serializer.SimplePropertyPreFilter.getIncludes()", "qualified_return_type": "java.util.Set<java.lang.String>"}
{"java_doc": "", "method_name": "getExcludes", "return_type": "Set<String>", "signature": "getExcludes()", "body_content": "{\r\n    return excludes;\r\n}", "class_name": "SimplePropertyPreFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.SimplePropertyPreFilter.getExcludes", "qualified_signature": "com.alibaba.fastjson.serializer.SimplePropertyPreFilter.getExcludes()", "qualified_return_type": "java.util.Set<java.lang.String>"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONSerializer, Object, String)", "body_content": "{\r\n    if (source == null) {\r\n        return true;\r\n    }\r\n    if (clazz != null && !clazz.isInstance(source)) {\r\n        return true;\r\n    }\r\n    if (this.excludes.contains(name)) {\r\n        return false;\r\n    }\r\n    if (maxLevel > 0) {\r\n        int level = 0;\r\n        SerialContext context = serializer.context;\r\n        while (context != null) {\r\n            level++;\r\n            if (level > maxLevel) {\r\n                return false;\r\n            }\r\n            context = context.parent;\r\n        }\r\n    }\r\n    if (includes.size() == 0 || includes.contains(name)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}", "class_name": "SimplePropertyPreFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.SimplePropertyPreFilter.apply", "qualified_signature": "com.alibaba.fastjson.serializer.SimplePropertyPreFilter.apply(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    if (type == OptionalInt.class) {\r\n        Object obj = parser.parseObject(Integer.class);\r\n        Integer value = TypeUtils.castToInt(obj);\r\n        if (value == null) {\r\n            return (T) OptionalInt.empty();\r\n        } else {\r\n            return (T) OptionalInt.of(value);\r\n        }\r\n    }\r\n    if (type == OptionalLong.class) {\r\n        Object obj = parser.parseObject(Long.class);\r\n        Long value = TypeUtils.castToLong(obj);\r\n        if (value == null) {\r\n            return (T) OptionalLong.empty();\r\n        } else {\r\n            return (T) OptionalLong.of(value);\r\n        }\r\n    }\r\n    if (type == OptionalDouble.class) {\r\n        Object obj = parser.parseObject(Double.class);\r\n        Double value = TypeUtils.castToDouble(obj);\r\n        if (value == null) {\r\n            return (T) OptionalDouble.empty();\r\n        } else {\r\n            return (T) OptionalDouble.of(value);\r\n        }\r\n    }\r\n    type = TypeUtils.unwrapOptional(type);\r\n    Object value = parser.parseObject(type);\r\n    if (value == null) {\r\n        return (T) Optional.empty();\r\n    }\r\n    return (T) Optional.of(value);\r\n}", "class_name": "OptionalCodec", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.OptionalCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.OptionalCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LBRACE;\r\n}", "class_name": "OptionalCodec", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.OptionalCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.OptionalCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    if (object == null) {\r\n        serializer.writeNull();\r\n        return;\r\n    }\r\n    if (object instanceof Optional) {\r\n        Optional<?> optional = (Optional<?>) object;\r\n        Object value = optional.isPresent() ? optional.get() : null;\r\n        serializer.write(value);\r\n        return;\r\n    }\r\n    if (object instanceof OptionalDouble) {\r\n        OptionalDouble optional = (OptionalDouble) object;\r\n        if (optional.isPresent()) {\r\n            double value = optional.getAsDouble();\r\n            serializer.write(value);\r\n        } else {\r\n            serializer.writeNull();\r\n        }\r\n        return;\r\n    }\r\n    if (object instanceof OptionalInt) {\r\n        OptionalInt optional = (OptionalInt) object;\r\n        if (optional.isPresent()) {\r\n            int value = optional.getAsInt();\r\n            serializer.out.writeInt(value);\r\n        } else {\r\n            serializer.writeNull();\r\n        }\r\n        return;\r\n    }\r\n    if (object instanceof OptionalLong) {\r\n        OptionalLong optional = (OptionalLong) object;\r\n        if (optional.isPresent()) {\r\n            long value = optional.getAsLong();\r\n            serializer.out.writeLong(value);\r\n        } else {\r\n            serializer.writeNull();\r\n        }\r\n        return;\r\n    }\r\n    throw new JSONException(\"not support optional : \" + object.getClass());\r\n}", "class_name": "OptionalCodec", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.OptionalCodec.write", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.OptionalCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    JSONAware aware = (JSONAware) object;\r\n    out.write(aware.toJSONString());\r\n}", "class_name": "JSONAwareSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONAwareSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.JSONAwareSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.COMMA) {\r\n        lexer.nextToken(JSONToken.LITERAL_STRING);\r\n        if (lexer.token() != JSONToken.LITERAL_STRING) {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        lexer.nextTokenWithColon(JSONToken.LITERAL_INT);\r\n        if (lexer.token() != JSONToken.LITERAL_INT) {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        long time = lexer.longValue();\r\n        lexer.nextToken(JSONToken.RBRACE);\r\n        if (lexer.token() != JSONToken.RBRACE) {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return (T) new java.sql.Time(time);\r\n    }\r\n    Object val = parser.parse();\r\n    if (val == null) {\r\n        return null;\r\n    }\r\n    if (val instanceof java.sql.Time) {\r\n        return (T) val;\r\n    } else if (val instanceof Number) {\r\n        return (T) new java.sql.Time(((Number) val).longValue());\r\n    } else if (val instanceof String) {\r\n        String strVal = (String) val;\r\n        if (strVal.length() == 0) {\r\n            return null;\r\n        }\r\n        long longVal;\r\n        JSONScanner dateLexer = new JSONScanner(strVal);\r\n        if (dateLexer.scanISO8601DateIfMatch()) {\r\n            longVal = dateLexer.getCalendar().getTimeInMillis();\r\n        } else {\r\n            boolean isDigit = true;\r\n            for (int i = 0; i < strVal.length(); ++i) {\r\n                char ch = strVal.charAt(i);\r\n                if (ch < '0' || ch > '9') {\r\n                    isDigit = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (!isDigit) {\r\n                dateLexer.close();\r\n                return (T) java.sql.Time.valueOf(strVal);\r\n            }\r\n            longVal = Long.parseLong(strVal);\r\n        }\r\n        dateLexer.close();\r\n        return (T) new java.sql.Time(longVal);\r\n    }\r\n    throw new JSONException(\"parse error\");\r\n}", "class_name": "TimeDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.TimeDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.TimeDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_INT;\r\n}", "class_name": "TimeDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.TimeDeserializer.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.TimeDeserializer.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "cast", "return_type": "T", "signature": "cast(DefaultJSONParser, Type, Object, Object)", "body_content": "{\r\n    if (timestamp) {\r\n        return castTimestamp(parser, clazz, fieldName, val);\r\n    }\r\n    if (val == null) {\r\n        return null;\r\n    }\r\n    if (val instanceof java.util.Date) {\r\n        val = new java.sql.Date(((Date) val).getTime());\r\n    } else if (val instanceof Number) {\r\n        val = (T) new java.sql.Date(((Number) val).longValue());\r\n    } else if (val instanceof String) {\r\n        String strVal = (String) val;\r\n        if (strVal.length() == 0) {\r\n            return null;\r\n        }\r\n        long longVal;\r\n        JSONScanner dateLexer = new JSONScanner(strVal);\r\n        try {\r\n            if (dateLexer.scanISO8601DateIfMatch()) {\r\n                longVal = dateLexer.getCalendar().getTimeInMillis();\r\n            } else {\r\n                DateFormat dateFormat = parser.getDateFormat();\r\n                try {\r\n                    java.util.Date date = (java.util.Date) dateFormat.parse(strVal);\r\n                    java.sql.Date sqlDate = new java.sql.Date(date.getTime());\r\n                    return (T) sqlDate;\r\n                } catch (ParseException e) {\r\n                    // skip\r\n                }\r\n                longVal = Long.parseLong(strVal);\r\n            }\r\n        } finally {\r\n            dateLexer.close();\r\n        }\r\n        return (T) new java.sql.Date(longVal);\r\n    } else {\r\n        throw new JSONException(\"parse error : \" + val);\r\n    }\r\n    return (T) val;\r\n}", "class_name": "SqlDateDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer.cast", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer.cast(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "castTimestamp", "return_type": "T", "signature": "castTimestamp(DefaultJSONParser, Type, Object, Object)", "body_content": "{\r\n    if (val == null) {\r\n        return null;\r\n    }\r\n    if (val instanceof java.util.Date) {\r\n        return (T) new java.sql.Timestamp(((Date) val).getTime());\r\n    }\r\n    if (val instanceof Number) {\r\n        return (T) new java.sql.Timestamp(((Number) val).longValue());\r\n    }\r\n    if (val instanceof String) {\r\n        String strVal = (String) val;\r\n        if (strVal.length() == 0) {\r\n            return null;\r\n        }\r\n        long longVal;\r\n        JSONScanner dateLexer = new JSONScanner(strVal);\r\n        try {\r\n            if (dateLexer.scanISO8601DateIfMatch()) {\r\n                longVal = dateLexer.getCalendar().getTimeInMillis();\r\n            } else {\r\n                DateFormat dateFormat = parser.getDateFormat();\r\n                try {\r\n                    java.util.Date date = (java.util.Date) dateFormat.parse(strVal);\r\n                    java.sql.Timestamp sqlDate = new java.sql.Timestamp(date.getTime());\r\n                    return (T) sqlDate;\r\n                } catch (ParseException e) {\r\n                    // skip\r\n                }\r\n                longVal = Long.parseLong(strVal);\r\n            }\r\n        } finally {\r\n            dateLexer.close();\r\n        }\r\n        return (T) new java.sql.Timestamp(longVal);\r\n    }\r\n    throw new JSONException(\"parse error\");\r\n}", "class_name": "SqlDateDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer.castTimestamp", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer.castTimestamp(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_INT;\r\n}", "class_name": "SqlDateDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull(SerializerFeature.WriteNullNumberAsZero);\r\n        return;\r\n    }\r\n    float floatValue = ((Float) object).floatValue();\r\n    out.writeFloat(floatValue, true);\r\n}", "class_name": "FloatCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.FloatCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.FloatCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    return (T) deserialze(parser);\r\n}", "class_name": "FloatCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.FloatCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.FloatCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser)", "body_content": "{\r\n    final JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.LITERAL_INT) {\r\n        String val = lexer.numberString();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return (T) Float.valueOf(Float.parseFloat(val));\r\n    }\r\n    if (lexer.token() == JSONToken.LITERAL_FLOAT) {\r\n        float val = lexer.floatValue();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return (T) Float.valueOf(val);\r\n    }\r\n    Object value = parser.parse();\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    return (T) TypeUtils.castToFloat(value);\r\n}", "class_name": "FloatCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.FloatCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.FloatCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_INT;\r\n}", "class_name": "FloatCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.FloatCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.FloatCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "Returns the Java type corresponding to the given type descriptor.\r\n\r\n@param typeDescriptor a type descriptor.\r\n@return the Java type corresponding to the given type descriptor.\r\n", "method_name": "getType", "return_type": "Type", "signature": "getType(String)", "body_content": "{\r\n    return getType(typeDescriptor.toCharArray(), 0);\r\n}", "class_name": "Type", "qualified_method_name": "com.alibaba.fastjson.asm.Type.getType", "qualified_signature": "com.alibaba.fastjson.asm.Type.getType(java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.asm.Type"}
{"java_doc": "", "method_name": "getArgumentsAndReturnSizes", "return_type": "int", "signature": "getArgumentsAndReturnSizes(String)", "body_content": "{\r\n    int n = 1;\r\n    int c = 1;\r\n    while (true) {\r\n        char car = desc.charAt(c++);\r\n        if (car == ')') {\r\n            car = desc.charAt(c);\r\n            return n << 2 | (car == 'V' ? 0 : (car == 'D' || car == 'J' ? 2 : 1));\r\n        } else if (car == 'L') {\r\n            while (desc.charAt(c++) != ';') {\r\n            }\r\n            n += 1;\r\n            // } else if (car == '[') {\r\n            // while ((car = desc.charAt(c)) == '[') {\r\n            // ++c;\r\n            // }\r\n            // if (car == 'D' || car == 'J') {\r\n            // n -= 1;\r\n            // }\r\n        } else if (car == 'D' || car == 'J') {\r\n            n += 2;\r\n        } else {\r\n            n += 1;\r\n        }\r\n    }\r\n}", "class_name": "Type", "qualified_method_name": "com.alibaba.fastjson.asm.Type.getArgumentsAndReturnSizes", "qualified_signature": "com.alibaba.fastjson.asm.Type.getArgumentsAndReturnSizes(java.lang.String)", "qualified_return_type": "int"}
{"java_doc": "Returns the Java type corresponding to the given type descriptor.\r\n\r\n@param buf a buffer containing a type descriptor.\r\n@param off the offset of this descriptor in the previous buffer.\r\n@return the Java type corresponding to the given type descriptor.\r\n", "method_name": "getType", "return_type": "Type", "signature": "getType(char[], int)", "body_content": "{\r\n    int len;\r\n    switch(buf[off]) {\r\n        case 'V':\r\n            return VOID_TYPE;\r\n        case 'Z':\r\n            return BOOLEAN_TYPE;\r\n        case 'C':\r\n            return CHAR_TYPE;\r\n        case 'B':\r\n            return BYTE_TYPE;\r\n        case 'S':\r\n            return SHORT_TYPE;\r\n        case 'I':\r\n            return INT_TYPE;\r\n        case 'F':\r\n            return FLOAT_TYPE;\r\n        case 'J':\r\n            return LONG_TYPE;\r\n        case 'D':\r\n            return DOUBLE_TYPE;\r\n        case '[':\r\n            len = 1;\r\n            while (buf[off + len] == '[') {\r\n                ++len;\r\n            }\r\n            if (buf[off + len] == 'L') {\r\n                ++len;\r\n                while (buf[off + len] != ';') {\r\n                    ++len;\r\n                }\r\n            }\r\n            return new Type(9, /*ARRAY*/\r\n            buf, off, len + 1);\r\n        // case 'L':\r\n        default:\r\n            len = 1;\r\n            while (buf[off + len] != ';') {\r\n                ++len;\r\n            }\r\n            return new Type(10, /*OBJECT*/\r\n            buf, off + 1, len - 1);\r\n    }\r\n}", "class_name": "Type", "qualified_method_name": "com.alibaba.fastjson.asm.Type.getType", "qualified_signature": "com.alibaba.fastjson.asm.Type.getType(char[], int)", "qualified_return_type": "com.alibaba.fastjson.asm.Type"}
{"java_doc": "", "method_name": "getInternalName", "return_type": "String", "signature": "getInternalName()", "body_content": "{\r\n    return new String(buf, off, len);\r\n}", "class_name": "Type", "qualified_method_name": "com.alibaba.fastjson.asm.Type.getInternalName", "qualified_signature": "com.alibaba.fastjson.asm.Type.getInternalName()", "qualified_return_type": "java.lang.String"}
{"java_doc": "Returns the descriptor corresponding to this Java type.\r\n\r\n@return the descriptor corresponding to this Java type.\r\n", "method_name": "getDescriptor", "return_type": "String", "signature": "getDescriptor()", "body_content": "{\r\n    return new String(this.buf, off, len);\r\n}", "class_name": "Type", "qualified_method_name": "com.alibaba.fastjson.asm.Type.getDescriptor", "qualified_signature": "com.alibaba.fastjson.asm.Type.getDescriptor()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "process", "return_type": "String", "signature": "process(Object, String, Object)", "body_content": "", "class_name": "NameFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.NameFilter.process", "qualified_signature": "com.alibaba.fastjson.serializer.NameFilter.process(java.lang.Object, java.lang.String, java.lang.Object)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getDateFormatPattern", "return_type": "String", "signature": "getDateFormatPattern()", "body_content": "{\r\n    if (dateFormat instanceof SimpleDateFormat) {\r\n        return ((SimpleDateFormat) dateFormat).toPattern();\r\n    }\r\n    return dateFormatPattern;\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.getDateFormatPattern", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.getDateFormatPattern()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getDateFormat", "return_type": "DateFormat", "signature": "getDateFormat()", "body_content": "{\r\n    if (dateFormat == null) {\r\n        if (dateFormatPattern != null) {\r\n            dateFormat = new SimpleDateFormat(dateFormatPattern, locale);\r\n            dateFormat.setTimeZone(timeZone);\r\n        }\r\n    }\r\n    return dateFormat;\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.getDateFormat", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.getDateFormat()", "qualified_return_type": "java.text.DateFormat"}
{"java_doc": "", "method_name": "setDateFormat", "return_type": "void", "signature": "setDateFormat(DateFormat)", "body_content": "{\r\n    this.dateFormat = dateFormat;\r\n    if (dateFormatPattern != null) {\r\n        dateFormatPattern = null;\r\n    }\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.setDateFormat", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.setDateFormat(java.text.DateFormat)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setDateFormat", "return_type": "void", "signature": "setDateFormat(String)", "body_content": "{\r\n    this.dateFormatPattern = dateFormat;\r\n    if (this.dateFormat != null) {\r\n        this.dateFormat = null;\r\n    }\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.setDateFormat", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.setDateFormat(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getContext", "return_type": "SerialContext", "signature": "getContext()", "body_content": "{\r\n    return context;\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.getContext", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.getContext()", "qualified_return_type": "com.alibaba.fastjson.serializer.SerialContext"}
{"java_doc": "", "method_name": "setContext", "return_type": "void", "signature": "setContext(SerialContext)", "body_content": "{\r\n    this.context = context;\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.setContext", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.setContext(com.alibaba.fastjson.serializer.SerialContext)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setContext", "return_type": "void", "signature": "setContext(SerialContext, Object, Object, int)", "body_content": "{\r\n    this.setContext(parent, object, fieldName, features, 0);\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.setContext", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.setContext(com.alibaba.fastjson.serializer.SerialContext, java.lang.Object, java.lang.Object, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setContext", "return_type": "void", "signature": "setContext(SerialContext, Object, Object, int, int)", "body_content": "{\r\n    if (out.disableCircularReferenceDetect) {\r\n        return;\r\n    }\r\n    this.context = new SerialContext(parent, object, fieldName, features, fieldFeatures);\r\n    if (references == null) {\r\n        references = new IdentityHashMap<Object, SerialContext>();\r\n    }\r\n    this.references.put(object, context);\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.setContext", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.setContext(com.alibaba.fastjson.serializer.SerialContext, java.lang.Object, java.lang.Object, int, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setContext", "return_type": "void", "signature": "setContext(Object, Object)", "body_content": "{\r\n    this.setContext(context, object, fieldName, 0);\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.setContext", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.setContext(java.lang.Object, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "popContext", "return_type": "void", "signature": "popContext()", "body_content": "{\r\n    if (context != null) {\r\n        this.context = this.context.parent;\r\n    }\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.popContext", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.popContext()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "isWriteClassName", "return_type": "boolean", "signature": "isWriteClassName(Type, Object)", "body_content": "{\r\n    return // \r\n    out.isEnabled(SerializerFeature.WriteClassName) && (// \r\n    fieldType != null || // \r\n    (!out.isEnabled(SerializerFeature.NotWriteRootClassName)) || context.parent != null);\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.isWriteClassName", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.isWriteClassName(java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "containsReference", "return_type": "boolean", "signature": "containsReference(Object)", "body_content": "{\r\n    if (references == null) {\r\n        return false;\r\n    }\r\n    SerialContext refContext = references.get(value);\r\n    if (refContext == null) {\r\n        return false;\r\n    }\r\n    Object fieldName = refContext.fieldName;\r\n    return fieldName == null || fieldName instanceof Integer || fieldName instanceof String;\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.containsReference", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.containsReference(java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "writeReference", "return_type": "void", "signature": "writeReference(Object)", "body_content": "{\r\n    SerialContext context = this.context;\r\n    Object current = context.object;\r\n    if (object == current) {\r\n        out.write(\"{\\\"$ref\\\":\\\"@\\\"}\");\r\n        return;\r\n    }\r\n    SerialContext parentContext = context.parent;\r\n    if (parentContext != null) {\r\n        if (object == parentContext.object) {\r\n            out.write(\"{\\\"$ref\\\":\\\"..\\\"}\");\r\n            return;\r\n        }\r\n    }\r\n    SerialContext rootContext = context;\r\n    for (; ; ) {\r\n        if (rootContext.parent == null) {\r\n            break;\r\n        }\r\n        rootContext = rootContext.parent;\r\n    }\r\n    if (object == rootContext.object) {\r\n        out.write(\"{\\\"$ref\\\":\\\"$\\\"}\");\r\n    } else {\r\n        out.write(\"{\\\"$ref\\\":\\\"\");\r\n        out.write(references.get(object).toString());\r\n        out.write(\"\\\"}\");\r\n    }\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.writeReference", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.writeReference(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "checkValue", "return_type": "boolean", "signature": "checkValue(SerializeFilterable)", "body_content": "{\r\n    return // \r\n    (valueFilters != null && valueFilters.size() > 0) || // \r\n    (contextValueFilters != null && contextValueFilters.size() > 0) || (filterable.valueFilters != null && filterable.valueFilters.size() > 0) || (filterable.contextValueFilters != null && filterable.contextValueFilters.size() > 0) || out.writeNonStringValueAsString;\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.checkValue", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.checkValue(com.alibaba.fastjson.serializer.SerializeFilterable)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "hasNameFilters", "return_type": "boolean", "signature": "hasNameFilters(SerializeFilterable)", "body_content": "{\r\n    return // \r\n    (nameFilters != null && nameFilters.size() > 0) || (filterable.nameFilters != null && filterable.nameFilters.size() > 0);\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.hasNameFilters", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.hasNameFilters(com.alibaba.fastjson.serializer.SerializeFilterable)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getIndentCount", "return_type": "int", "signature": "getIndentCount()", "body_content": "{\r\n    return indentCount;\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.getIndentCount", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.getIndentCount()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "incrementIndent", "return_type": "void", "signature": "incrementIndent()", "body_content": "{\r\n    indentCount++;\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.incrementIndent", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.incrementIndent()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "decrementIdent", "return_type": "void", "signature": "decrementIdent()", "body_content": "{\r\n    indentCount--;\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.decrementIdent", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.decrementIdent()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "println", "return_type": "void", "signature": "println()", "body_content": "{\r\n    out.write('\\n');\r\n    for (int i = 0; i < indentCount; ++i) {\r\n        out.write(indent);\r\n    }\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.println", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.println()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getWriter", "return_type": "SerializeWriter", "signature": "getWriter()", "body_content": "{\r\n    return out;\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.getWriter", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.getWriter()", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializeWriter"}
{"java_doc": "", "method_name": "toString", "return_type": "String", "signature": "toString()", "body_content": "{\r\n    return out.toString();\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.toString", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.toString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "config", "return_type": "void", "signature": "config(SerializerFeature, boolean)", "body_content": "{\r\n    out.config(feature, state);\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.config", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.config(com.alibaba.fastjson.serializer.SerializerFeature, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "isEnabled", "return_type": "boolean", "signature": "isEnabled(SerializerFeature)", "body_content": "{\r\n    return out.isEnabled(feature);\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.isEnabled", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.isEnabled(com.alibaba.fastjson.serializer.SerializerFeature)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "writeNull", "return_type": "void", "signature": "writeNull()", "body_content": "{\r\n    this.out.writeNull();\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.writeNull", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.writeNull()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getMapping", "return_type": "SerializeConfig", "signature": "getMapping()", "body_content": "{\r\n    return config;\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.getMapping", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.getMapping()", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializeConfig"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(Writer, Object)", "body_content": "{\r\n    SerializeWriter writer = new SerializeWriter();\r\n    try {\r\n        JSONSerializer serializer = new JSONSerializer(writer);\r\n        serializer.write(object);\r\n        writer.writeTo(out);\r\n    } catch (IOException ex) {\r\n        throw new JSONException(ex.getMessage(), ex);\r\n    } finally {\r\n        writer.close();\r\n    }\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.write(java.io.Writer, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(SerializeWriter, Object)", "body_content": "{\r\n    JSONSerializer serializer = new JSONSerializer(out);\r\n    serializer.write(object);\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.write(com.alibaba.fastjson.serializer.SerializeWriter, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(Object)", "body_content": "{\r\n    if (object == null) {\r\n        out.writeNull();\r\n        return;\r\n    }\r\n    Class<?> clazz = object.getClass();\r\n    ObjectSerializer writer = getObjectWriter(clazz);\r\n    try {\r\n        writer.write(this, object, null, null, 0);\r\n    } catch (IOException e) {\r\n        throw new JSONException(e.getMessage(), e);\r\n    }\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.write(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeWithFieldName", "return_type": "void", "signature": "writeWithFieldName(Object, Object)", "body_content": "{\r\n    writeWithFieldName(object, fieldName, null, 0);\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.writeWithFieldName", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.writeWithFieldName(java.lang.Object, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeKeyValue", "return_type": "void", "signature": "writeKeyValue(char, String, Object)", "body_content": "{\r\n    if (seperator != '\\0') {\r\n        out.write(seperator);\r\n    }\r\n    out.writeFieldName(key);\r\n    write(value);\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.writeKeyValue", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.writeKeyValue(char, java.lang.String, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeWithFieldName", "return_type": "void", "signature": "writeWithFieldName(Object, Object, Type, int)", "body_content": "{\r\n    try {\r\n        if (object == null) {\r\n            out.writeNull();\r\n            return;\r\n        }\r\n        Class<?> clazz = object.getClass();\r\n        ObjectSerializer writer = getObjectWriter(clazz);\r\n        writer.write(this, object, fieldName, fieldType, fieldFeatures);\r\n    } catch (IOException e) {\r\n        throw new JSONException(e.getMessage(), e);\r\n    }\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.writeWithFieldName", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.writeWithFieldName(java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeWithFormat", "return_type": "void", "signature": "writeWithFormat(Object, String)", "body_content": "{\r\n    if (object instanceof Date) {\r\n        DateFormat dateFormat = this.getDateFormat();\r\n        if (dateFormat == null) {\r\n            dateFormat = new SimpleDateFormat(format, locale);\r\n            dateFormat.setTimeZone(timeZone);\r\n        }\r\n        String text = dateFormat.format((Date) object);\r\n        out.writeString(text);\r\n        return;\r\n    }\r\n    write(object);\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.writeWithFormat", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.writeWithFormat(java.lang.Object, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(String)", "body_content": "{\r\n    StringCodec.instance.write(this, text);\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.write(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getObjectWriter", "return_type": "ObjectSerializer", "signature": "getObjectWriter(Class)", "body_content": "{\r\n    return config.getObjectWriter(clazz);\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.getObjectWriter", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.getObjectWriter(java.lang.Class<?>)", "qualified_return_type": "com.alibaba.fastjson.serializer.ObjectSerializer"}
{"java_doc": "", "method_name": "close", "return_type": "void", "signature": "close()", "body_content": "{\r\n    this.out.close();\r\n}", "class_name": "JSONSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializer.close", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializer.close()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    if (type == JSONObject.class && parser.getFieldTypeResolver() == null) {\r\n        return (T) parser.parseObject();\r\n    }\r\n    final JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.NULL) {\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return null;\r\n    }\r\n    Map<Object, Object> map = createMap(type);\r\n    ParseContext context = parser.getContext();\r\n    try {\r\n        parser.setContext(context, map, fieldName);\r\n        return (T) deserialze(parser, type, fieldName, map);\r\n    } finally {\r\n        parser.setContext(context);\r\n    }\r\n}", "class_name": "MapDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.MapDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.MapDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "deserialze", "return_type": "Object", "signature": "deserialze(DefaultJSONParser, Type, Object, Map)", "body_content": "{\r\n    if (type instanceof ParameterizedType) {\r\n        ParameterizedType parameterizedType = (ParameterizedType) type;\r\n        Type keyType = parameterizedType.getActualTypeArguments()[0];\r\n        Type valueType = parameterizedType.getActualTypeArguments()[1];\r\n        if (String.class == keyType) {\r\n            return parseMap(parser, (Map<String, Object>) map, valueType, fieldName);\r\n        } else {\r\n            return parseMap(parser, map, keyType, valueType, fieldName);\r\n        }\r\n    } else {\r\n        return parser.parseObject(map, fieldName);\r\n    }\r\n}", "class_name": "MapDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.MapDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.MapDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.util.Map)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "parseMap", "return_type": "Map", "signature": "parseMap(DefaultJSONParser, Map, Type, Object)", "body_content": "{\r\n    JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() != JSONToken.LBRACE) {\r\n        throw new JSONException(\"syntax error, expect {, actual \" + lexer.token());\r\n    }\r\n    ParseContext context = parser.getContext();\r\n    try {\r\n        for (int i = 0; ; ++i) {\r\n            lexer.skipWhitespace();\r\n            char ch = lexer.getCurrent();\r\n            if (lexer.isEnabled(Feature.AllowArbitraryCommas)) {\r\n                while (ch == ',') {\r\n                    lexer.next();\r\n                    lexer.skipWhitespace();\r\n                    ch = lexer.getCurrent();\r\n                }\r\n            }\r\n            String key;\r\n            if (ch == '\"') {\r\n                key = lexer.scanSymbol(parser.getSymbolTable(), '\"');\r\n                lexer.skipWhitespace();\r\n                ch = lexer.getCurrent();\r\n                if (ch != ':') {\r\n                    throw new JSONException(\"expect ':' at \" + lexer.pos());\r\n                }\r\n            } else if (ch == '}') {\r\n                lexer.next();\r\n                lexer.resetStringPosition();\r\n                lexer.nextToken(JSONToken.COMMA);\r\n                return map;\r\n            } else if (ch == '\\'') {\r\n                if (!lexer.isEnabled(Feature.AllowSingleQuotes)) {\r\n                    throw new JSONException(\"syntax error\");\r\n                }\r\n                key = lexer.scanSymbol(parser.getSymbolTable(), '\\'');\r\n                lexer.skipWhitespace();\r\n                ch = lexer.getCurrent();\r\n                if (ch != ':') {\r\n                    throw new JSONException(\"expect ':' at \" + lexer.pos());\r\n                }\r\n            } else {\r\n                if (!lexer.isEnabled(Feature.AllowUnQuotedFieldNames)) {\r\n                    throw new JSONException(\"syntax error\");\r\n                }\r\n                key = lexer.scanSymbolUnQuoted(parser.getSymbolTable());\r\n                lexer.skipWhitespace();\r\n                ch = lexer.getCurrent();\r\n                if (ch != ':') {\r\n                    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \" + ch);\r\n                }\r\n            }\r\n            lexer.next();\r\n            lexer.skipWhitespace();\r\n            ch = lexer.getCurrent();\r\n            lexer.resetStringPosition();\r\n            if (key == JSON.DEFAULT_TYPE_KEY && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {\r\n                String typeName = lexer.scanSymbol(parser.getSymbolTable(), '\"');\r\n                Class<?> clazz = TypeUtils.loadClass(typeName, parser.getConfig().getDefaultClassLoader());\r\n                if (Map.class.isAssignableFrom(clazz)) {\r\n                    lexer.nextToken(JSONToken.COMMA);\r\n                    if (lexer.token() == JSONToken.RBRACE) {\r\n                        lexer.nextToken(JSONToken.COMMA);\r\n                        return map;\r\n                    }\r\n                    continue;\r\n                }\r\n                ObjectDeserializer deserializer = parser.getConfig().getDeserializer(clazz);\r\n                lexer.nextToken(JSONToken.COMMA);\r\n                parser.setResolveStatus(DefaultJSONParser.TypeNameRedirect);\r\n                if (context != null && !(fieldName instanceof Integer)) {\r\n                    parser.popContext();\r\n                }\r\n                return (Map) deserializer.deserialze(parser, clazz, fieldName);\r\n            }\r\n            Object value;\r\n            lexer.nextToken();\r\n            if (i != 0) {\r\n                parser.setContext(context);\r\n            }\r\n            if (lexer.token() == JSONToken.NULL) {\r\n                value = null;\r\n                lexer.nextToken();\r\n            } else {\r\n                value = parser.parseObject(valueType, key);\r\n            }\r\n            map.put(key, value);\r\n            parser.checkMapResolve(map, key);\r\n            parser.setContext(context, value, key);\r\n            parser.setContext(context);\r\n            final int tok = lexer.token();\r\n            if (tok == JSONToken.EOF || tok == JSONToken.RBRACKET) {\r\n                return map;\r\n            }\r\n            if (tok == JSONToken.RBRACE) {\r\n                lexer.nextToken();\r\n                return map;\r\n            }\r\n        }\r\n    } finally {\r\n        parser.setContext(context);\r\n    }\r\n}", "class_name": "MapDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.MapDeserializer.parseMap", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.MapDeserializer.parseMap(com.alibaba.fastjson.parser.DefaultJSONParser, java.util.Map<java.lang.String, java.lang.Object>, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "java.util.Map"}
{"java_doc": "", "method_name": "parseMap", "return_type": "Object", "signature": "parseMap(DefaultJSONParser, Map, Type, Type, Object)", "body_content": "{\r\n    JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\r\n        throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());\r\n    }\r\n    ObjectDeserializer keyDeserializer = parser.getConfig().getDeserializer(keyType);\r\n    ObjectDeserializer valueDeserializer = parser.getConfig().getDeserializer(valueType);\r\n    lexer.nextToken(keyDeserializer.getFastMatchToken());\r\n    ParseContext context = parser.getContext();\r\n    try {\r\n        for (; ; ) {\r\n            if (lexer.token() == JSONToken.RBRACE) {\r\n                lexer.nextToken(JSONToken.COMMA);\r\n                break;\r\n            }\r\n            if (// \r\n            lexer.token() == JSONToken.LITERAL_STRING && // \r\n            lexer.isRef() && // \r\n            !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {\r\n                Object object = null;\r\n                lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);\r\n                if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                    String ref = lexer.stringVal();\r\n                    if (\"..\".equals(ref)) {\r\n                        ParseContext parentContext = context.parent;\r\n                        object = parentContext.object;\r\n                    } else if (\"$\".equals(ref)) {\r\n                        ParseContext rootContext = context;\r\n                        while (rootContext.parent != null) {\r\n                            rootContext = rootContext.parent;\r\n                        }\r\n                        object = rootContext.object;\r\n                    } else {\r\n                        parser.addResolveTask(new ResolveTask(context, ref));\r\n                        parser.setResolveStatus(DefaultJSONParser.NeedToResolve);\r\n                    }\r\n                } else {\r\n                    throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\r\n                }\r\n                lexer.nextToken(JSONToken.RBRACE);\r\n                if (lexer.token() != JSONToken.RBRACE) {\r\n                    throw new JSONException(\"illegal ref\");\r\n                }\r\n                lexer.nextToken(JSONToken.COMMA);\r\n                // parser.setContext(context, map, fieldName);\r\n                // parser.setContext(context);\r\n                return object;\r\n            }\r\n            if (// \r\n            map.size() == 0 && // \r\n            lexer.token() == JSONToken.LITERAL_STRING && // \r\n            JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal()) && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {\r\n                lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);\r\n                lexer.nextToken(JSONToken.COMMA);\r\n                if (lexer.token() == JSONToken.RBRACE) {\r\n                    lexer.nextToken();\r\n                    return map;\r\n                }\r\n                lexer.nextToken(keyDeserializer.getFastMatchToken());\r\n            }\r\n            Object key = keyDeserializer.deserialze(parser, keyType, null);\r\n            if (lexer.token() != JSONToken.COLON) {\r\n                throw new JSONException(\"syntax error, expect :, actual \" + lexer.token());\r\n            }\r\n            lexer.nextToken(valueDeserializer.getFastMatchToken());\r\n            Object value = valueDeserializer.deserialze(parser, valueType, key);\r\n            parser.checkMapResolve(map, key);\r\n            map.put(key, value);\r\n            if (lexer.token() == JSONToken.COMMA) {\r\n                lexer.nextToken(keyDeserializer.getFastMatchToken());\r\n            }\r\n        }\r\n    } finally {\r\n        parser.setContext(context);\r\n    }\r\n    return map;\r\n}", "class_name": "MapDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.MapDeserializer.parseMap", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.MapDeserializer.parseMap(com.alibaba.fastjson.parser.DefaultJSONParser, java.util.Map<java.lang.Object, java.lang.Object>, java.lang.reflect.Type, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "createMap", "return_type": "Map<Object, Object>", "signature": "createMap(Type)", "body_content": "{\r\n    if (type == Properties.class) {\r\n        return new Properties();\r\n    }\r\n    if (type == Hashtable.class) {\r\n        return new Hashtable();\r\n    }\r\n    if (type == IdentityHashMap.class) {\r\n        return new IdentityHashMap();\r\n    }\r\n    if (type == SortedMap.class || type == TreeMap.class) {\r\n        return new TreeMap();\r\n    }\r\n    if (type == ConcurrentMap.class || type == ConcurrentHashMap.class) {\r\n        return new ConcurrentHashMap();\r\n    }\r\n    if (type == Map.class || type == HashMap.class) {\r\n        return new HashMap();\r\n    }\r\n    if (type == LinkedHashMap.class) {\r\n        return new LinkedHashMap();\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        ParameterizedType parameterizedType = (ParameterizedType) type;\r\n        Type rawType = parameterizedType.getRawType();\r\n        if (EnumMap.class.equals(rawType)) {\r\n            Type[] actualArgs = parameterizedType.getActualTypeArguments();\r\n            return new EnumMap((Class) actualArgs[0]);\r\n        }\r\n        return createMap(rawType);\r\n    }\r\n    Class<?> clazz = (Class<?>) type;\r\n    if (clazz.isInterface()) {\r\n        throw new JSONException(\"unsupport type \" + type);\r\n    }\r\n    try {\r\n        return (Map<Object, Object>) clazz.newInstance();\r\n    } catch (Exception e) {\r\n        throw new JSONException(\"unsupport type \" + type, e);\r\n    }\r\n}", "class_name": "MapDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.MapDeserializer.createMap", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.MapDeserializer.createMap(java.lang.reflect.Type)", "qualified_return_type": "java.util.Map<java.lang.Object, java.lang.Object>"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LBRACE;\r\n}", "class_name": "MapDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.MapDeserializer.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.MapDeserializer.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "getFieldDeserializer", "return_type": "FieldDeserializer", "signature": "getFieldDeserializer(String)", "body_content": "{\r\n    if (key == null) {\r\n        return null;\r\n    }\r\n    int low = 0;\r\n    int high = sortedFieldDeserializers.length - 1;\r\n    while (low <= high) {\r\n        int mid = (low + high) >>> 1;\r\n        String fieldName = sortedFieldDeserializers[mid].fieldInfo.name;\r\n        int cmp = fieldName.compareTo(key);\r\n        if (cmp < 0) {\r\n            low = mid + 1;\r\n        } else if (cmp > 0) {\r\n            high = mid - 1;\r\n        } else {\r\n            // key found\r\n            return sortedFieldDeserializers[mid];\r\n        }\r\n    }\r\n    // key not found.\r\n    return null;\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.getFieldDeserializer", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.getFieldDeserializer(java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer"}
{"java_doc": "", "method_name": "createInstance", "return_type": "Object", "signature": "createInstance(DefaultJSONParser, Type)", "body_content": "{\r\n    if (type instanceof Class) {\r\n        if (clazz.isInterface()) {\r\n            Class<?> clazz = (Class<?>) type;\r\n            ClassLoader loader = Thread.currentThread().getContextClassLoader();\r\n            final JSONObject obj = new JSONObject();\r\n            Object proxy = Proxy.newProxyInstance(loader, new Class<?>[] { clazz }, obj);\r\n            return proxy;\r\n        }\r\n    }\r\n    if (beanInfo.defaultConstructor == null) {\r\n        return null;\r\n    }\r\n    Object object;\r\n    try {\r\n        Constructor<?> constructor = beanInfo.defaultConstructor;\r\n        if (beanInfo.defaultConstructorParameterSize == 0) {\r\n            object = constructor.newInstance();\r\n        } else {\r\n            ParseContext context = parser.getContext();\r\n            String parentName = context.object.getClass().getName();\r\n            String typeName = \"\";\r\n            if (type instanceof Class) {\r\n                typeName = ((Class<?>) type).getName();\r\n            }\r\n            if (parentName.length() != typeName.lastIndexOf('$') - 1) {\r\n                char[] typeChars = typeName.toCharArray();\r\n                StringBuilder clsNameBuilder = new StringBuilder();\r\n                clsNameBuilder.append(parentName).append(\"$\");\r\n                Map<String, Object> outterCached = new HashMap<String, Object>();\r\n                // outtest\r\n                outterCached.put(parentName, context.object);\r\n                for (int i = parentName.length() + 1; i <= typeName.lastIndexOf('$'); i++) {\r\n                    char thisChar = typeChars[i];\r\n                    if (thisChar == '$') {\r\n                        String clsName = clsNameBuilder.toString();\r\n                        Object outter = outterCached.get(parentName);\r\n                        Class<?> clazz;\r\n                        try {\r\n                            clazz = Class.forName(parentName);\r\n                            if (outter != null) {\r\n                                Class<?> innerCls = Class.forName(clsName);\r\n                                Constructor<?> innerClsConstructor = innerCls.getDeclaredConstructor(clazz);\r\n                                if (!innerClsConstructor.isAccessible()) {\r\n                                    innerClsConstructor.setAccessible(true);\r\n                                }\r\n                                Object inner = innerClsConstructor.newInstance(outter);\r\n                                outterCached.put(clsName, inner);\r\n                                parentName = clsName;\r\n                            }\r\n                        } catch (ClassNotFoundException e) {\r\n                            throw new JSONException(\"unable to find class \" + parentName);\r\n                        } catch (NoSuchMethodException e) {\r\n                            // no default contrutor\r\n                            throw new RuntimeException(e);\r\n                        } catch (InvocationTargetException e) {\r\n                            throw new RuntimeException(\"can not instantiate \" + clsName);\r\n                        } catch (IllegalAccessException e) {\r\n                            throw new RuntimeException(e);\r\n                        } catch (InstantiationException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                    clsNameBuilder.append(thisChar);\r\n                }\r\n                object = constructor.newInstance(outterCached.get(parentName));\r\n            } else {\r\n                object = constructor.newInstance(context.object);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        throw new JSONException(\"create instance error, class \" + clazz.getName(), e);\r\n    }\r\n    if (// \r\n    parser != null && parser.lexer.isEnabled(Feature.InitStringFieldAsEmpty)) {\r\n        for (FieldInfo fieldInfo : beanInfo.fields) {\r\n            if (fieldInfo.fieldClass == String.class) {\r\n                try {\r\n                    fieldInfo.set(object, \"\");\r\n                } catch (Exception e) {\r\n                    throw new JSONException(\"create instance error, class \" + clazz.getName(), e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return object;\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.createInstance", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.createInstance(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    return deserialze(parser, type, fieldName, 0);\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object, int)", "body_content": "{\r\n    return deserialze(parser, type, fieldName, null, features);\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, int)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "deserialzeArrayMapping", "return_type": "T", "signature": "deserialzeArrayMapping(DefaultJSONParser, Type, Object, Object)", "body_content": "{\r\n    // xxx\r\n    final JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() != JSONToken.LBRACKET) {\r\n        throw new JSONException(\"error\");\r\n    }\r\n    object = createInstance(parser, type);\r\n    for (int i = 0, size = sortedFieldDeserializers.length; i < size; ++i) {\r\n        final char seperator = (i == size - 1) ? ']' : ',';\r\n        FieldDeserializer fieldDeser = sortedFieldDeserializers[i];\r\n        Class<?> fieldClass = fieldDeser.fieldInfo.fieldClass;\r\n        if (fieldClass == int.class) {\r\n            int value = lexer.scanInt(seperator);\r\n            fieldDeser.setValue(object, value);\r\n        } else if (fieldClass == String.class) {\r\n            String value = lexer.scanString(seperator);\r\n            fieldDeser.setValue(object, value);\r\n        } else if (fieldClass == long.class) {\r\n            long value = lexer.scanLong(seperator);\r\n            fieldDeser.setValue(object, value);\r\n        } else if (fieldClass.isEnum()) {\r\n            char ch = lexer.getCurrent();\r\n            Object value;\r\n            if (ch == '\\\"' || ch == 'n') {\r\n                value = lexer.scanEnum(fieldClass, parser.getSymbolTable(), seperator);\r\n            } else if (ch >= '0' && ch <= '9') {\r\n                int ordinal = lexer.scanInt(seperator);\r\n                EnumDeserializer enumDeser = (EnumDeserializer) ((DefaultFieldDeserializer) fieldDeser).getFieldValueDeserilizer(parser.getConfig());\r\n                value = enumDeser.valueOf(ordinal);\r\n            } else {\r\n                value = scanEnum(lexer, seperator);\r\n            }\r\n            fieldDeser.setValue(object, value);\r\n        } else if (fieldClass == boolean.class) {\r\n            boolean value = lexer.scanBoolean(seperator);\r\n            fieldDeser.setValue(object, value);\r\n        } else if (fieldClass == float.class) {\r\n            float value = lexer.scanFloat(seperator);\r\n            fieldDeser.setValue(object, value);\r\n        } else if (fieldClass == double.class) {\r\n            double value = lexer.scanDouble(seperator);\r\n            fieldDeser.setValue(object, value);\r\n        } else if (fieldClass == java.util.Date.class && lexer.getCurrent() == '1') {\r\n            long longValue = lexer.scanLong(seperator);\r\n            fieldDeser.setValue(object, new java.util.Date(longValue));\r\n        } else {\r\n            lexer.nextToken(JSONToken.LBRACKET);\r\n            Object value = parser.parseObject(fieldDeser.fieldInfo.fieldType);\r\n            fieldDeser.setValue(object, value);\r\n            check(lexer, seperator == ']' ? JSONToken.RBRACKET : JSONToken.COMMA);\r\n            // parser.accept(seperator == ']' ? JSONToken.RBRACKET : JSONToken.COMMA);\r\n        }\r\n    }\r\n    lexer.nextToken(JSONToken.COMMA);\r\n    return (T) object;\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialzeArrayMapping", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialzeArrayMapping(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "check", "return_type": "void", "signature": "check(JSONLexer, int)", "body_content": "{\r\n    if (lexer.token() != token) {\r\n        throw new JSONException(\"syntax error\");\r\n    }\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.check", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.check(com.alibaba.fastjson.parser.JSONLexer, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "scanEnum", "return_type": "Enum<?>", "signature": "scanEnum(JSONLexer, char)", "body_content": "{\r\n    throw new JSONException(\"illegal enum. \" + lexer.info());\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.scanEnum", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.scanEnum(com.alibaba.fastjson.parser.JSONLexer, char)", "qualified_return_type": "java.lang.Enum<?>"}
{"java_doc": "", "method_name": "// \r\ndeserialze", "return_type": "// \r\nT", "signature": "deserialze(DefaultJSONParser, Type, Object, Object, int)", "body_content": "{\r\n    if (type == JSON.class || type == JSONObject.class) {\r\n        return (T) parser.parse();\r\n    }\r\n    // xxx\r\n    final JSONLexerBase lexer = (JSONLexerBase) parser.lexer;\r\n    int token = lexer.token();\r\n    if (token == JSONToken.NULL) {\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return null;\r\n    }\r\n    ParseContext context = parser.getContext();\r\n    if (object != null && context != null) {\r\n        context = context.parent;\r\n    }\r\n    ParseContext childContext = null;\r\n    try {\r\n        Map<String, Object> fieldValues = null;\r\n        if (token == JSONToken.RBRACE) {\r\n            lexer.nextToken(JSONToken.COMMA);\r\n            if (object == null) {\r\n                object = createInstance(parser, type);\r\n            }\r\n            return (T) object;\r\n        }\r\n        if (token == JSONToken.LBRACKET) {\r\n            final int mask = Feature.SupportArrayToBean.mask;\r\n            boolean isSupportArrayToBean = // \r\n            (beanInfo.parserFeatures & mask) != 0 || // \r\n            lexer.isEnabled(Feature.SupportArrayToBean) || (features & mask) != 0;\r\n            if (isSupportArrayToBean) {\r\n                return deserialzeArrayMapping(parser, type, fieldName, object);\r\n            }\r\n        }\r\n        if (token != JSONToken.LBRACE && token != JSONToken.COMMA) {\r\n            if (lexer.isBlankInput()) {\r\n                return null;\r\n            }\r\n            if (token == JSONToken.LITERAL_STRING) {\r\n                String strVal = lexer.stringVal();\r\n                if (strVal.length() == 0) {\r\n                    lexer.nextToken();\r\n                    return null;\r\n                }\r\n            }\r\n            if (token == JSONToken.LBRACKET && lexer.getCurrent() == ']') {\r\n                lexer.next();\r\n                lexer.nextToken();\r\n                return null;\r\n            }\r\n            StringBuffer buf = // \r\n            (new StringBuffer()).append(// \r\n            \"syntax error, expect {, actual \").append(// \r\n            lexer.tokenName()).append(// \r\n            \", pos \").append(// \r\n            lexer.pos());\r\n            if (fieldName instanceof String) {\r\n                // \r\n                buf.append(// \r\n                \", fieldName \").append(fieldName);\r\n            }\r\n            throw new JSONException(buf.toString());\r\n        }\r\n        if (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) {\r\n            parser.resolveStatus = DefaultJSONParser.NONE;\r\n        }\r\n        for (int fieldIndex = 0; ; fieldIndex++) {\r\n            String key = null;\r\n            FieldDeserializer fieldDeser = null;\r\n            FieldInfo fieldInfo = null;\r\n            Class<?> fieldClass = null;\r\n            if (fieldIndex < sortedFieldDeserializers.length) {\r\n                fieldDeser = sortedFieldDeserializers[fieldIndex];\r\n                fieldInfo = fieldDeser.fieldInfo;\r\n                fieldClass = fieldInfo.fieldClass;\r\n            }\r\n            boolean matchField = false;\r\n            boolean valueParsed = false;\r\n            Object fieldValue = null;\r\n            if (fieldDeser != null) {\r\n                char[] name_chars = fieldInfo.name_chars;\r\n                if (fieldClass == int.class || fieldClass == Integer.class) {\r\n                    fieldValue = lexer.scanFieldInt(name_chars);\r\n                    if (lexer.matchStat > 0) {\r\n                        matchField = true;\r\n                        valueParsed = true;\r\n                    } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\r\n                        continue;\r\n                    }\r\n                } else if (fieldClass == long.class || fieldClass == Long.class) {\r\n                    fieldValue = lexer.scanFieldLong(name_chars);\r\n                    if (lexer.matchStat > 0) {\r\n                        matchField = true;\r\n                        valueParsed = true;\r\n                    } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\r\n                        continue;\r\n                    }\r\n                } else if (fieldClass == String.class) {\r\n                    fieldValue = lexer.scanFieldString(name_chars);\r\n                    if (lexer.matchStat > 0) {\r\n                        matchField = true;\r\n                        valueParsed = true;\r\n                    } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\r\n                        continue;\r\n                    }\r\n                } else if (fieldClass == boolean.class || fieldClass == Boolean.class) {\r\n                    fieldValue = lexer.scanFieldBoolean(name_chars);\r\n                    if (lexer.matchStat > 0) {\r\n                        matchField = true;\r\n                        valueParsed = true;\r\n                    } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\r\n                        continue;\r\n                    }\r\n                } else if (fieldClass == float.class || fieldClass == Float.class) {\r\n                    fieldValue = lexer.scanFieldFloat(name_chars);\r\n                    if (lexer.matchStat > 0) {\r\n                        matchField = true;\r\n                        valueParsed = true;\r\n                    } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\r\n                        continue;\r\n                    }\r\n                } else if (fieldClass == double.class || fieldClass == Double.class) {\r\n                    fieldValue = lexer.scanFieldDouble(name_chars);\r\n                    if (lexer.matchStat > 0) {\r\n                        matchField = true;\r\n                        valueParsed = true;\r\n                    } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\r\n                        continue;\r\n                    }\r\n                } else if (// \r\n                fieldClass.isEnum() && parser.getConfig().getDeserializer(fieldClass) instanceof EnumDeserializer) {\r\n                    String enumName = lexer.scanFieldSymbol(name_chars, parser.symbolTable);\r\n                    if (lexer.matchStat > 0) {\r\n                        matchField = true;\r\n                        valueParsed = true;\r\n                        fieldValue = Enum.valueOf((Class<Enum>) fieldClass, enumName);\r\n                    } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\r\n                        continue;\r\n                    }\r\n                } else if (lexer.matchField(name_chars)) {\r\n                    matchField = true;\r\n                } else {\r\n                    continue;\r\n                }\r\n            }\r\n            if (!matchField) {\r\n                key = lexer.scanSymbol(parser.symbolTable);\r\n                if (key == null) {\r\n                    token = lexer.token();\r\n                    if (token == JSONToken.RBRACE) {\r\n                        lexer.nextToken(JSONToken.COMMA);\r\n                        break;\r\n                    }\r\n                    if (token == JSONToken.COMMA) {\r\n                        if (lexer.isEnabled(Feature.AllowArbitraryCommas)) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n                if (\"$ref\" == key) {\r\n                    lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);\r\n                    token = lexer.token();\r\n                    if (token == JSONToken.LITERAL_STRING) {\r\n                        String ref = lexer.stringVal();\r\n                        if (\"@\".equals(ref)) {\r\n                            object = context.object;\r\n                        } else if (\"..\".equals(ref)) {\r\n                            ParseContext parentContext = context.parent;\r\n                            if (parentContext.object != null) {\r\n                                object = parentContext.object;\r\n                            } else {\r\n                                parser.addResolveTask(new ResolveTask(parentContext, ref));\r\n                                parser.resolveStatus = DefaultJSONParser.NeedToResolve;\r\n                            }\r\n                        } else if (\"$\".equals(ref)) {\r\n                            ParseContext rootContext = context;\r\n                            while (rootContext.parent != null) {\r\n                                rootContext = rootContext.parent;\r\n                            }\r\n                            if (rootContext.object != null) {\r\n                                object = rootContext.object;\r\n                            } else {\r\n                                parser.addResolveTask(new ResolveTask(rootContext, ref));\r\n                                parser.resolveStatus = DefaultJSONParser.NeedToResolve;\r\n                            }\r\n                        } else {\r\n                            parser.addResolveTask(new ResolveTask(context, ref));\r\n                            parser.resolveStatus = DefaultJSONParser.NeedToResolve;\r\n                        }\r\n                    } else {\r\n                        throw new JSONException(\"illegal ref, \" + JSONToken.name(token));\r\n                    }\r\n                    lexer.nextToken(JSONToken.RBRACE);\r\n                    if (lexer.token() != JSONToken.RBRACE) {\r\n                        throw new JSONException(\"illegal ref\");\r\n                    }\r\n                    lexer.nextToken(JSONToken.COMMA);\r\n                    parser.setContext(context, object, fieldName);\r\n                    return (T) object;\r\n                }\r\n                if (JSON.DEFAULT_TYPE_KEY == key) {\r\n                    lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);\r\n                    if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                        String typeName = lexer.stringVal();\r\n                        lexer.nextToken(JSONToken.COMMA);\r\n                        if (typeName.equals(beanInfo.typeName)) {\r\n                            if (lexer.token() == JSONToken.RBRACE) {\r\n                                lexer.nextToken();\r\n                                break;\r\n                            }\r\n                            continue;\r\n                        }\r\n                        ParserConfig config = parser.getConfig();\r\n                        ObjectDeserializer deserizer = getSeeAlso(config, this.beanInfo, typeName);\r\n                        Class<?> userType = null;\r\n                        if (deserizer == null) {\r\n                            userType = TypeUtils.loadClass(typeName, config.getDefaultClassLoader());\r\n                            Class<?> expectClass = TypeUtils.getClass(type);\r\n                            if (expectClass == null || (userType != null && expectClass.isAssignableFrom(userType))) {\r\n                                deserizer = parser.getConfig().getDeserializer(userType);\r\n                            } else {\r\n                                throw new JSONException(\"type not match\");\r\n                            }\r\n                        }\r\n                        return (T) deserizer.deserialze(parser, userType, fieldName);\r\n                    } else {\r\n                        throw new JSONException(\"syntax error\");\r\n                    }\r\n                }\r\n            }\r\n            if (object == null && fieldValues == null) {\r\n                object = createInstance(parser, type);\r\n                if (object == null) {\r\n                    fieldValues = new HashMap<String, Object>(this.fieldDeserializers.length);\r\n                }\r\n                childContext = parser.setContext(context, object, fieldName);\r\n            }\r\n            if (matchField) {\r\n                if (!valueParsed) {\r\n                    fieldDeser.parseField(parser, object, type, fieldValues);\r\n                } else {\r\n                    if (object == null) {\r\n                        fieldValues.put(fieldInfo.name, fieldValue);\r\n                    } else if (fieldValue == null) {\r\n                        if (// \r\n                        fieldClass != int.class && // \r\n                        fieldClass != long.class && // \r\n                        fieldClass != float.class && // \r\n                        fieldClass != double.class && // \r\n                        fieldClass != boolean.class) {\r\n                            fieldDeser.setValue(object, fieldValue);\r\n                        }\r\n                    } else {\r\n                        fieldDeser.setValue(object, fieldValue);\r\n                    }\r\n                    if (lexer.matchStat == JSONLexer.END) {\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                boolean match = parseField(parser, key, object, type, fieldValues);\r\n                if (!match) {\r\n                    if (lexer.token() == JSONToken.RBRACE) {\r\n                        lexer.nextToken();\r\n                        break;\r\n                    }\r\n                    continue;\r\n                } else if (lexer.token() == JSONToken.COLON) {\r\n                    throw new JSONException(\"syntax error, unexpect token ':'\");\r\n                }\r\n            }\r\n            if (lexer.token() == JSONToken.COMMA) {\r\n                continue;\r\n            }\r\n            if (lexer.token() == JSONToken.RBRACE) {\r\n                lexer.nextToken(JSONToken.COMMA);\r\n                break;\r\n            }\r\n            if (lexer.token() == JSONToken.IDENTIFIER || lexer.token() == JSONToken.ERROR) {\r\n                throw new JSONException(\"syntax error, unexpect token \" + JSONToken.name(lexer.token()));\r\n            }\r\n        }\r\n        if (object == null) {\r\n            if (fieldValues == null) {\r\n                object = createInstance(parser, type);\r\n                if (childContext == null) {\r\n                    childContext = parser.setContext(context, object, fieldName);\r\n                }\r\n                return (T) object;\r\n            }\r\n            FieldInfo[] fieldInfoList = beanInfo.fields;\r\n            int size = fieldInfoList.length;\r\n            Object[] params = new Object[size];\r\n            for (int i = 0; i < size; ++i) {\r\n                FieldInfo fieldInfo = fieldInfoList[i];\r\n                Object param = fieldValues.get(fieldInfo.name);\r\n                if (param == null) {\r\n                    Type fieldType = fieldInfo.fieldType;\r\n                    if (fieldType == byte.class) {\r\n                        param = (byte) 0;\r\n                    } else if (fieldType == short.class) {\r\n                        param = (short) 0;\r\n                    } else if (fieldType == int.class) {\r\n                        param = 0;\r\n                    } else if (fieldType == long.class) {\r\n                        param = 0L;\r\n                    } else if (fieldType == float.class) {\r\n                        param = 0F;\r\n                    } else if (fieldType == double.class) {\r\n                        param = 0D;\r\n                    } else if (fieldType == boolean.class) {\r\n                        param = Boolean.FALSE;\r\n                    }\r\n                }\r\n                params[i] = param;\r\n            }\r\n            if (beanInfo.creatorConstructor != null) {\r\n                try {\r\n                    object = beanInfo.creatorConstructor.newInstance(params);\r\n                } catch (Exception e) {\r\n                    throw new JSONException(\"create instance error, \" + beanInfo.creatorConstructor.toGenericString(), e);\r\n                }\r\n            } else if (beanInfo.factoryMethod != null) {\r\n                try {\r\n                    object = beanInfo.factoryMethod.invoke(null, params);\r\n                } catch (Exception e) {\r\n                    throw new JSONException(\"create factory method error, \" + beanInfo.factoryMethod.toString(), e);\r\n                }\r\n            }\r\n        }\r\n        Method buildMethod = beanInfo.buildMethod;\r\n        if (buildMethod == null) {\r\n            return (T) object;\r\n        }\r\n        Object builtObj;\r\n        try {\r\n            builtObj = buildMethod.invoke(object);\r\n        } catch (Exception e) {\r\n            throw new JSONException(\"build object error\", e);\r\n        }\r\n        return (T) builtObj;\r\n    } finally {\r\n        if (childContext != null) {\r\n            childContext.object = object;\r\n        }\r\n        parser.setContext(context);\r\n    }\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.Object, int)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseField", "return_type": "boolean", "signature": "parseField(DefaultJSONParser, String, Object, Type, Map)", "body_content": "{\r\n    // xxx\r\n    JSONLexer lexer = parser.lexer;\r\n    FieldDeserializer fieldDeserializer = smartMatch(key);\r\n    if (fieldDeserializer == null) {\r\n        if (!lexer.isEnabled(Feature.IgnoreNotMatch)) {\r\n            throw new JSONException(\"setter not found, class \" + clazz.getName() + \", property \" + key);\r\n        }\r\n        parser.parseExtra(object, key);\r\n        return false;\r\n    }\r\n    lexer.nextTokenWithColon(fieldDeserializer.getFastMatchToken());\r\n    fieldDeserializer.parseField(parser, object, objectType, fieldValues);\r\n    return true;\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseField", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseField(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.String, java.lang.Object, java.lang.reflect.Type, java.util.Map<java.lang.String, java.lang.Object>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "smartMatch", "return_type": "FieldDeserializer", "signature": "smartMatch(String)", "body_content": "{\r\n    if (key == null) {\r\n        return null;\r\n    }\r\n    FieldDeserializer fieldDeserializer = getFieldDeserializer(key);\r\n    if (fieldDeserializer == null) {\r\n        boolean startsWithIs = key.startsWith(\"is\");\r\n        for (FieldDeserializer fieldDeser : sortedFieldDeserializers) {\r\n            FieldInfo fieldInfo = fieldDeser.fieldInfo;\r\n            Class<?> fieldClass = fieldInfo.fieldClass;\r\n            String fieldName = fieldInfo.name;\r\n            if (fieldName.equalsIgnoreCase(key)) {\r\n                fieldDeserializer = fieldDeser;\r\n                break;\r\n            }\r\n            if (// \r\n            startsWithIs && // \r\n            (fieldClass == boolean.class || fieldClass == Boolean.class) && fieldName.equalsIgnoreCase(key.substring(2))) {\r\n                fieldDeserializer = fieldDeser;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (fieldDeserializer == null) {\r\n        boolean snakeOrkebab = false;\r\n        String key2 = null;\r\n        for (int i = 0; i < key.length(); ++i) {\r\n            char ch = key.charAt(i);\r\n            if (ch == '_') {\r\n                snakeOrkebab = true;\r\n                key2 = key.replaceAll(\"_\", \"\");\r\n                break;\r\n            } else if (ch == '-') {\r\n                snakeOrkebab = true;\r\n                key2 = key.replaceAll(\"-\", \"\");\r\n                break;\r\n            }\r\n        }\r\n        if (snakeOrkebab) {\r\n            fieldDeserializer = getFieldDeserializer(key2);\r\n            if (fieldDeserializer == null) {\r\n                for (FieldDeserializer fieldDeser : sortedFieldDeserializers) {\r\n                    if (fieldDeser.fieldInfo.name.equalsIgnoreCase(key2)) {\r\n                        fieldDeserializer = fieldDeser;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (fieldDeserializer == null) {\r\n        for (FieldDeserializer fieldDeser : sortedFieldDeserializers) {\r\n            if (fieldDeser.fieldInfo.alternateName(key)) {\r\n                fieldDeserializer = fieldDeser;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return fieldDeserializer;\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.smartMatch", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.smartMatch(java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LBRACE;\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "// \r\ncreateInstance", "return_type": "// \r\nObject", "signature": "createInstance(Map, ParserConfig)", "body_content": "{\r\n    Object object = null;\r\n    if (beanInfo.creatorConstructor == null && beanInfo.buildMethod == null && beanInfo.factoryMethod == null) {\r\n        object = createInstance(null, clazz);\r\n        for (Map.Entry<String, Object> entry : map.entrySet()) {\r\n            String key = entry.getKey();\r\n            Object value = entry.getValue();\r\n            FieldDeserializer fieldDeser = smartMatch(key);\r\n            if (fieldDeser == null) {\r\n                continue;\r\n            }\r\n            Method method = fieldDeser.fieldInfo.method;\r\n            if (method != null) {\r\n                Type paramType = method.getGenericParameterTypes()[0];\r\n                value = TypeUtils.cast(value, paramType, config);\r\n                method.invoke(object, new Object[] { value });\r\n            } else {\r\n                Field field = fieldDeser.fieldInfo.field;\r\n                Type paramType = fieldDeser.fieldInfo.fieldType;\r\n                value = TypeUtils.cast(value, paramType, config);\r\n                field.set(object, value);\r\n            }\r\n        }\r\n        return object;\r\n    }\r\n    FieldInfo[] fieldInfoList = beanInfo.fields;\r\n    int size = fieldInfoList.length;\r\n    Object[] params = new Object[size];\r\n    for (int i = 0; i < size; ++i) {\r\n        FieldInfo fieldInfo = fieldInfoList[i];\r\n        params[i] = map.get(fieldInfo.name);\r\n    }\r\n    if (beanInfo.creatorConstructor != null) {\r\n        try {\r\n            object = beanInfo.creatorConstructor.newInstance(params);\r\n        } catch (Exception e) {\r\n            throw new JSONException(\"create instance error, \" + beanInfo.creatorConstructor.toGenericString(), e);\r\n        }\r\n    } else if (beanInfo.factoryMethod != null) {\r\n        try {\r\n            object = beanInfo.factoryMethod.invoke(null, params);\r\n        } catch (Exception e) {\r\n            throw new JSONException(\"create factory method error, \" + beanInfo.factoryMethod.toString(), e);\r\n        }\r\n    }\r\n    return object;\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.createInstance", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.createInstance(java.util.Map<java.lang.String, java.lang.Object>, com.alibaba.fastjson.parser.ParserConfig)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "getFieldType", "return_type": "Type", "signature": "getFieldType(int)", "body_content": "{\r\n    return sortedFieldDeserializers[ordinal].fieldInfo.fieldType;\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.getFieldType", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.getFieldType(int)", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "", "method_name": "parseRest", "return_type": "Object", "signature": "parseRest(DefaultJSONParser, Type, Object, Object, int)", "body_content": "{\r\n    Object value = deserialze(parser, type, fieldName, instance, features);\r\n    return value;\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.Object, int)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "getSeeAlso", "return_type": "JavaBeanDeserializer", "signature": "getSeeAlso(ParserConfig, JavaBeanInfo, String)", "body_content": "{\r\n    if (beanInfo.jsonType == null) {\r\n        return null;\r\n    }\r\n    for (Class<?> seeAlsoClass : beanInfo.jsonType.seeAlso()) {\r\n        ObjectDeserializer seeAlsoDeser = config.getDeserializer(seeAlsoClass);\r\n        if (seeAlsoDeser instanceof JavaBeanDeserializer) {\r\n            JavaBeanDeserializer seeAlsoJavaBeanDeser = (JavaBeanDeserializer) seeAlsoDeser;\r\n            JavaBeanInfo subBeanInfo = seeAlsoJavaBeanDeser.beanInfo;\r\n            if (subBeanInfo.typeName.equals(typeName)) {\r\n                return seeAlsoJavaBeanDeser;\r\n            }\r\n            JavaBeanDeserializer subSeeAlso = getSeeAlso(config, subBeanInfo, typeName);\r\n            if (subSeeAlso != null) {\r\n                return subSeeAlso;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.getSeeAlso", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.getSeeAlso(com.alibaba.fastjson.parser.ParserConfig, com.alibaba.fastjson.util.JavaBeanInfo, java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer"}
{"java_doc": "", "method_name": "// \r\nparseArray", "return_type": "// \r\nvoid", "signature": "parseArray(Collection, ObjectDeserializer, DefaultJSONParser, Type, Object)", "body_content": "{\r\n    final JSONLexerBase lexer = (JSONLexerBase) parser.lexer;\r\n    int token = lexer.token();\r\n    if (token == JSONToken.NULL) {\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        token = lexer.token();\r\n        return;\r\n    }\r\n    if (token != JSONToken.LBRACKET) {\r\n        parser.throwException(token);\r\n    }\r\n    char ch = lexer.getCurrent();\r\n    if (ch == '[') {\r\n        lexer.next();\r\n        lexer.setToken(JSONToken.LBRACKET);\r\n    } else {\r\n        lexer.nextToken(JSONToken.LBRACKET);\r\n    }\r\n    if (lexer.token() == JSONToken.RBRACKET) {\r\n        lexer.nextToken();\r\n        return;\r\n    }\r\n    int index = 0;\r\n    for (; ; ) {\r\n        Object item = deser.deserialze(parser, type, index);\r\n        collection.add(item);\r\n        index++;\r\n        if (lexer.token() == JSONToken.COMMA) {\r\n            ch = lexer.getCurrent();\r\n            if (ch == '[') {\r\n                lexer.next();\r\n                lexer.setToken(JSONToken.LBRACKET);\r\n            } else {\r\n                lexer.nextToken(JSONToken.LBRACKET);\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    token = lexer.token();\r\n    if (token != JSONToken.RBRACKET) {\r\n        parser.throwException(token);\r\n    }\r\n    ch = lexer.getCurrent();\r\n    if (ch == ',') {\r\n        lexer.next();\r\n        lexer.setToken(JSONToken.COMMA);\r\n    } else {\r\n        lexer.nextToken(JSONToken.COMMA);\r\n    }\r\n    // parser.accept(JSONToken.RBRACKET, JSONToken.COMMA);\r\n}", "class_name": "JavaBeanDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseArray", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseArray(java.util.Collection, com.alibaba.fastjson.parser.deserializer.ObjectDeserializer, com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    out.writeEnum((Enum<?>) object);\r\n}", "class_name": "EnumSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.EnumSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.EnumSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "decode", "return_type": "String[]", "signature": "decode(String)", "body_content": "{\r\n    return JSON.parseObject(content, String[].class);\r\n}", "class_name": "FastjsonSockJsMessageCodec", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastjsonSockJsMessageCodec.decode", "qualified_signature": "com.alibaba.fastjson.support.spring.FastjsonSockJsMessageCodec.decode(java.lang.String)", "qualified_return_type": "java.lang.String[]"}
{"java_doc": "", "method_name": "decodeInputStream", "return_type": "String[]", "signature": "decodeInputStream(InputStream)", "body_content": "{\r\n    return JSON.parseObject(content, String[].class);\r\n}", "class_name": "FastjsonSockJsMessageCodec", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastjsonSockJsMessageCodec.decodeInputStream", "qualified_signature": "com.alibaba.fastjson.support.spring.FastjsonSockJsMessageCodec.decodeInputStream(java.io.InputStream)", "qualified_return_type": "java.lang.String[]"}
{"java_doc": "", "method_name": "applyJsonQuoting", "return_type": "char[]", "signature": "applyJsonQuoting(String)", "body_content": "{\r\n    SerializeWriter out = new SerializeWriter();\r\n    try {\r\n        JSONSerializer serializer = new JSONSerializer(out);\r\n        serializer.write(content);\r\n        return out.toCharArrayForSpringWebSocket();\r\n    } finally {\r\n        out.close();\r\n    }\r\n}", "class_name": "FastjsonSockJsMessageCodec", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastjsonSockJsMessageCodec.applyJsonQuoting", "qualified_signature": "com.alibaba.fastjson.support.spring.FastjsonSockJsMessageCodec.applyJsonQuoting(java.lang.String)", "qualified_return_type": "char[]"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    if (object == null) {\r\n        SerializeWriter out = serializer.out;\r\n        out.writeNull(SerializerFeature.WriteNullStringAsEmpty);\r\n        return;\r\n    }\r\n    serializer.write(object.toString());\r\n}", "class_name": "AppendableSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.AppendableSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.AppendableSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "Puts a reference to this label in the bytecode of a method. If the position of the label is known, the offset is\r\ncomputed and written directly. Otherwise, a null offset is written and a new forward reference is declared for\r\nthis label.\r\n\r\n@param owner the code writer that calls this method.\r\n@param out the bytecode of the method.\r\n@param source the position of first byte of the bytecode instruction that contains this label.\r\n@param wideOffset <tt>true</tt> if the reference must be stored in 4 bytes, or <tt>false</tt> if it must be\r\nstored with 2 bytes.\r\n@throws IllegalArgumentException if this label has not been created by the given code writer.\r\n", "method_name": "put", "return_type": "void", "signature": "put(MethodWriter, ByteVector, int)", "body_content": "{\r\n    if ((status & 2) == 0) {\r\n        addReference(source, out.length);\r\n        out.putShort(-1);\r\n    } else {\r\n        out.putShort(position - source);\r\n    }\r\n}", "class_name": "Label", "qualified_method_name": "com.alibaba.fastjson.asm.Label.put", "qualified_signature": "com.alibaba.fastjson.asm.Label.put(com.alibaba.fastjson.asm.MethodWriter, com.alibaba.fastjson.asm.ByteVector, int)", "qualified_return_type": "void"}
{"java_doc": "Adds a forward reference to this label. This method must be called only for a true forward reference, i.e. only\r\nif this label is not resolved yet. For backward references, the offset of the reference can be, and must be,\r\ncomputed and stored directly.\r\n\r\n@param sourcePosition the position of the referencing instruction. This position will be used to compute the\r\noffset of this forward reference.\r\n@param referencePosition the position where the offset for this forward reference must be stored.\r\n", "method_name": "addReference", "return_type": "void", "signature": "addReference(int, int)", "body_content": "{\r\n    if (srcAndRefPositions == null) {\r\n        srcAndRefPositions = new int[6];\r\n    }\r\n    if (referenceCount >= srcAndRefPositions.length) {\r\n        int[] a = new int[srcAndRefPositions.length + 6];\r\n        System.arraycopy(srcAndRefPositions, 0, a, 0, srcAndRefPositions.length);\r\n        srcAndRefPositions = a;\r\n    }\r\n    srcAndRefPositions[referenceCount++] = sourcePosition;\r\n    srcAndRefPositions[referenceCount++] = referencePosition;\r\n}", "class_name": "Label", "qualified_method_name": "com.alibaba.fastjson.asm.Label.addReference", "qualified_signature": "com.alibaba.fastjson.asm.Label.addReference(int, int)", "qualified_return_type": "void"}
{"java_doc": "Resolves all forward references to this label. This method must be called when this label is added to the\r\nbytecode of the method, i.e. when its position becomes known. This method fills in the blanks that where left in\r\nthe bytecode by each forward reference previously added to this label.\r\n\r\n@param owner the code writer that calls this method.\r\n@param position the position of this label in the bytecode.\r\n@param data the bytecode of the method.\r\n@return <tt>true</tt> if a blank that was left for this label was to small to store the offset. In such a case\r\nthe corresponding jump instruction is replaced with a pseudo instruction (using unused opcodes) using an unsigned\r\ntwo bytes offset. These pseudo instructions will need to be replaced with true instructions with wider offsets (4\r\nbytes instead of 2). This is done in {@link MethodWriter#resizeInstructions}.\r\n@throws IllegalArgumentException if this label has already been resolved, or if it has not been created by the\r\ngiven code writer.\r\n", "method_name": "resolve", "return_type": "void", "signature": "resolve(MethodWriter, int, byte[])", "body_content": "{\r\n    this.status |= 2;\r\n    this.position = position;\r\n    int i = 0;\r\n    while (i < referenceCount) {\r\n        int source = srcAndRefPositions[i++];\r\n        int reference = srcAndRefPositions[i++];\r\n        int offset = position - source;\r\n        data[reference++] = (byte) (offset >>> 8);\r\n        data[reference] = (byte) offset;\r\n    }\r\n}", "class_name": "Label", "qualified_method_name": "com.alibaba.fastjson.asm.Label.resolve", "qualified_signature": "com.alibaba.fastjson.asm.Label.resolve(com.alibaba.fastjson.asm.MethodWriter, int, byte[])", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setTimzeZone", "return_type": "void", "signature": "setTimzeZone(TimeZone)", "body_content": "{\r\n    this.parser.lexer.setTimeZone(timezone);\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.setTimzeZone", "qualified_signature": "com.alibaba.fastjson.JSONReader.setTimzeZone(java.util.TimeZone)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setLocale", "return_type": "void", "signature": "setLocale(Locale)", "body_content": "{\r\n    this.parser.lexer.setLocale(locale);\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.setLocale", "qualified_signature": "com.alibaba.fastjson.JSONReader.setLocale(java.util.Locale)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "config", "return_type": "void", "signature": "config(Feature, boolean)", "body_content": "{\r\n    this.parser.config(feature, state);\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.config", "qualified_signature": "com.alibaba.fastjson.JSONReader.config(com.alibaba.fastjson.parser.Feature, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getLocal", "return_type": "Locale", "signature": "getLocal()", "body_content": "{\r\n    return this.parser.lexer.getLocale();\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.getLocal", "qualified_signature": "com.alibaba.fastjson.JSONReader.getLocal()", "qualified_return_type": "java.util.Locale"}
{"java_doc": "", "method_name": "getTimzeZone", "return_type": "TimeZone", "signature": "getTimzeZone()", "body_content": "{\r\n    return this.parser.lexer.getTimeZone();\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.getTimzeZone", "qualified_signature": "com.alibaba.fastjson.JSONReader.getTimzeZone()", "qualified_return_type": "java.util.TimeZone"}
{"java_doc": "", "method_name": "startObject", "return_type": "void", "signature": "startObject()", "body_content": "{\r\n    if (context == null) {\r\n        context = new JSONStreamContext(null, JSONStreamContext.StartObject);\r\n    } else {\r\n        startStructure();\r\n        context = new JSONStreamContext(context, JSONStreamContext.StartObject);\r\n    }\r\n    this.parser.accept(JSONToken.LBRACE, JSONToken.IDENTIFIER);\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.startObject", "qualified_signature": "com.alibaba.fastjson.JSONReader.startObject()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "endObject", "return_type": "void", "signature": "endObject()", "body_content": "{\r\n    this.parser.accept(JSONToken.RBRACE);\r\n    endStructure();\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.endObject", "qualified_signature": "com.alibaba.fastjson.JSONReader.endObject()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "startArray", "return_type": "void", "signature": "startArray()", "body_content": "{\r\n    if (context == null) {\r\n        context = new JSONStreamContext(null, StartArray);\r\n    } else {\r\n        startStructure();\r\n        context = new JSONStreamContext(context, StartArray);\r\n    }\r\n    this.parser.accept(JSONToken.LBRACKET);\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.startArray", "qualified_signature": "com.alibaba.fastjson.JSONReader.startArray()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "endArray", "return_type": "void", "signature": "endArray()", "body_content": "{\r\n    this.parser.accept(JSONToken.RBRACKET);\r\n    endStructure();\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.endArray", "qualified_signature": "com.alibaba.fastjson.JSONReader.endArray()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "startStructure", "return_type": "void", "signature": "startStructure()", "body_content": "{\r\n    final int state = context.state;\r\n    switch(state) {\r\n        case PropertyKey:\r\n            parser.accept(JSONToken.COLON);\r\n            break;\r\n        case PropertyValue:\r\n        case ArrayValue:\r\n            parser.accept(JSONToken.COMMA);\r\n            break;\r\n        case StartArray:\r\n        case StartObject:\r\n            break;\r\n        default:\r\n            throw new JSONException(\"illegal state : \" + context.state);\r\n    }\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.startStructure", "qualified_signature": "com.alibaba.fastjson.JSONReader.startStructure()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "endStructure", "return_type": "void", "signature": "endStructure()", "body_content": "{\r\n    context = context.parent;\r\n    if (context == null) {\r\n        return;\r\n    }\r\n    final int state = context.state;\r\n    int newState = -1;\r\n    switch(state) {\r\n        case PropertyKey:\r\n            newState = PropertyValue;\r\n            break;\r\n        case StartArray:\r\n            newState = ArrayValue;\r\n            break;\r\n        case PropertyValue:\r\n        case StartObject:\r\n            newState = PropertyKey;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    if (newState != -1) {\r\n        context.state = newState;\r\n    }\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.endStructure", "qualified_signature": "com.alibaba.fastjson.JSONReader.endStructure()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "hasNext", "return_type": "boolean", "signature": "hasNext()", "body_content": "{\r\n    if (context == null) {\r\n        throw new JSONException(\"context is null\");\r\n    }\r\n    final int token = parser.lexer.token();\r\n    final int state = context.state;\r\n    switch(state) {\r\n        case StartArray:\r\n        case ArrayValue:\r\n            return token != JSONToken.RBRACKET;\r\n        case StartObject:\r\n        case PropertyValue:\r\n            return token != JSONToken.RBRACE;\r\n        default:\r\n            throw new JSONException(\"illegal state : \" + state);\r\n    }\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.hasNext", "qualified_signature": "com.alibaba.fastjson.JSONReader.hasNext()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "peek", "return_type": "int", "signature": "peek()", "body_content": "{\r\n    return parser.lexer.token();\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.peek", "qualified_signature": "com.alibaba.fastjson.JSONReader.peek()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "close", "return_type": "void", "signature": "close()", "body_content": "{\r\n    parser.close();\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.close", "qualified_signature": "com.alibaba.fastjson.JSONReader.close()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "readInteger", "return_type": "Integer", "signature": "readInteger()", "body_content": "{\r\n    Object object;\r\n    if (context == null) {\r\n        object = parser.parse();\r\n    } else {\r\n        readBefore();\r\n        object = parser.parse();\r\n        readAfter();\r\n    }\r\n    return TypeUtils.castToInt(object);\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.readInteger", "qualified_signature": "com.alibaba.fastjson.JSONReader.readInteger()", "qualified_return_type": "java.lang.Integer"}
{"java_doc": "", "method_name": "readLong", "return_type": "Long", "signature": "readLong()", "body_content": "{\r\n    Object object;\r\n    if (context == null) {\r\n        object = parser.parse();\r\n    } else {\r\n        readBefore();\r\n        object = parser.parse();\r\n        readAfter();\r\n    }\r\n    return TypeUtils.castToLong(object);\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.readLong", "qualified_signature": "com.alibaba.fastjson.JSONReader.readLong()", "qualified_return_type": "java.lang.Long"}
{"java_doc": "", "method_name": "readString", "return_type": "String", "signature": "readString()", "body_content": "{\r\n    Object object;\r\n    if (context == null) {\r\n        object = parser.parse();\r\n    } else {\r\n        readBefore();\r\n        JSONLexer lexer = parser.lexer;\r\n        if (context.state == JSONStreamContext.StartObject && lexer.token() == JSONToken.IDENTIFIER) {\r\n            object = lexer.stringVal();\r\n            lexer.nextToken();\r\n        } else {\r\n            object = parser.parse();\r\n        }\r\n        readAfter();\r\n    }\r\n    return TypeUtils.castToString(object);\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.readString", "qualified_signature": "com.alibaba.fastjson.JSONReader.readString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "readObject", "return_type": "T", "signature": "readObject(TypeReference)", "body_content": "{\r\n    return readObject(typeRef.getType());\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.readObject", "qualified_signature": "com.alibaba.fastjson.JSONReader.readObject(com.alibaba.fastjson.TypeReference<T>)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "readObject", "return_type": "T", "signature": "readObject(Type)", "body_content": "{\r\n    if (context == null) {\r\n        return parser.parseObject(type);\r\n    }\r\n    readBefore();\r\n    T object = parser.parseObject(type);\r\n    readAfter();\r\n    return object;\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.readObject", "qualified_signature": "com.alibaba.fastjson.JSONReader.readObject(java.lang.reflect.Type)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "readObject", "return_type": "T", "signature": "readObject(Class)", "body_content": "{\r\n    if (context == null) {\r\n        return parser.parseObject(type);\r\n    }\r\n    readBefore();\r\n    T object = parser.parseObject(type);\r\n    readAfter();\r\n    return object;\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.readObject", "qualified_signature": "com.alibaba.fastjson.JSONReader.readObject(java.lang.Class<T>)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "readObject", "return_type": "void", "signature": "readObject(Object)", "body_content": "{\r\n    if (context == null) {\r\n        parser.parseObject(object);\r\n        return;\r\n    }\r\n    readBefore();\r\n    parser.parseObject(object);\r\n    readAfter();\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.readObject", "qualified_signature": "com.alibaba.fastjson.JSONReader.readObject(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "readObject", "return_type": "Object", "signature": "readObject()", "body_content": "{\r\n    if (context == null) {\r\n        return parser.parse();\r\n    }\r\n    readBefore();\r\n    Object object;\r\n    switch(context.state) {\r\n        case StartObject:\r\n        case PropertyValue:\r\n            object = parser.parseKey();\r\n            break;\r\n        default:\r\n            object = parser.parse();\r\n            break;\r\n    }\r\n    readAfter();\r\n    return object;\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.readObject", "qualified_signature": "com.alibaba.fastjson.JSONReader.readObject()", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "readObject", "return_type": "Object", "signature": "readObject(Map)", "body_content": "{\r\n    if (context == null) {\r\n        return parser.parseObject(object);\r\n    }\r\n    readBefore();\r\n    Object value = parser.parseObject(object);\r\n    readAfter();\r\n    return value;\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.readObject", "qualified_signature": "com.alibaba.fastjson.JSONReader.readObject(java.util.Map)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "readBefore", "return_type": "void", "signature": "readBefore()", "body_content": "{\r\n    int state = context.state;\r\n    // before\r\n    switch(state) {\r\n        case PropertyKey:\r\n            parser.accept(JSONToken.COLON);\r\n            break;\r\n        case PropertyValue:\r\n            parser.accept(JSONToken.COMMA, JSONToken.IDENTIFIER);\r\n            break;\r\n        case ArrayValue:\r\n            parser.accept(JSONToken.COMMA);\r\n            break;\r\n        case StartObject:\r\n            break;\r\n        case StartArray:\r\n            break;\r\n        default:\r\n            throw new JSONException(\"illegal state : \" + state);\r\n    }\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.readBefore", "qualified_signature": "com.alibaba.fastjson.JSONReader.readBefore()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "readAfter", "return_type": "void", "signature": "readAfter()", "body_content": "{\r\n    int state = context.state;\r\n    int newStat = -1;\r\n    switch(state) {\r\n        case StartObject:\r\n            newStat = PropertyKey;\r\n            break;\r\n        case PropertyKey:\r\n            newStat = PropertyValue;\r\n            break;\r\n        case PropertyValue:\r\n            newStat = PropertyKey;\r\n            break;\r\n        case ArrayValue:\r\n            break;\r\n        case StartArray:\r\n            newStat = ArrayValue;\r\n            break;\r\n        default:\r\n            throw new JSONException(\"illegal state : \" + state);\r\n    }\r\n    if (newStat != -1) {\r\n        context.state = newStat;\r\n    }\r\n}", "class_name": "JSONReader", "qualified_method_name": "com.alibaba.fastjson.JSONReader.readAfter", "qualified_signature": "com.alibaba.fastjson.JSONReader.readAfter()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    Object item;\r\n    if (object instanceof AtomicReference) {\r\n        AtomicReference val = (AtomicReference) object;\r\n        item = val.get();\r\n    } else {\r\n        item = ((Reference) object).get();\r\n    }\r\n    serializer.write(item);\r\n}", "class_name": "ReferenceCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.ReferenceCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.ReferenceCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    ParameterizedType paramType = (ParameterizedType) type;\r\n    Type itemType = paramType.getActualTypeArguments()[0];\r\n    Object itemObject = parser.parseObject(itemType);\r\n    Type rawType = paramType.getRawType();\r\n    if (rawType == AtomicReference.class) {\r\n        return (T) new AtomicReference(itemObject);\r\n    }\r\n    if (rawType == WeakReference.class) {\r\n        return (T) new WeakReference(itemObject);\r\n    }\r\n    if (rawType == SoftReference.class) {\r\n        return (T) new SoftReference(itemObject);\r\n    }\r\n    throw new UnsupportedOperationException(rawType.toString());\r\n}", "class_name": "ReferenceCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.ReferenceCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.ReferenceCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LBRACE;\r\n}", "class_name": "ReferenceCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.ReferenceCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.ReferenceCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    if (object == null) {\r\n        serializer.out.writeNull();\r\n        return;\r\n    }\r\n    Date date = (Date) object;\r\n    SimpleDateFormat format = new SimpleDateFormat(pattern, serializer.locale);\r\n    format.setTimeZone(serializer.timeZone);\r\n    String text = format.format(date);\r\n    serializer.write(text);\r\n}", "class_name": "SimpleDateFormatSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.SimpleDateFormatSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.SimpleDateFormatSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "\r\n@since 1.1.16\r\n@return\r\n", "method_name": "getRelatedArray", "return_type": "Object", "signature": "getRelatedArray()", "body_content": "{\r\n    return relatedArray;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getRelatedArray", "qualified_signature": "com.alibaba.fastjson.JSONArray.getRelatedArray()", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "setRelatedArray", "return_type": "void", "signature": "setRelatedArray(Object)", "body_content": "{\r\n    this.relatedArray = relatedArray;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.setRelatedArray", "qualified_signature": "com.alibaba.fastjson.JSONArray.setRelatedArray(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getComponentType", "return_type": "Type", "signature": "getComponentType()", "body_content": "{\r\n    return componentType;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getComponentType", "qualified_signature": "com.alibaba.fastjson.JSONArray.getComponentType()", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "", "method_name": "setComponentType", "return_type": "void", "signature": "setComponentType(Type)", "body_content": "{\r\n    this.componentType = componentType;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.setComponentType", "qualified_signature": "com.alibaba.fastjson.JSONArray.setComponentType(java.lang.reflect.Type)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "size", "return_type": "int", "signature": "size()", "body_content": "{\r\n    return list.size();\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.size", "qualified_signature": "com.alibaba.fastjson.JSONArray.size()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "isEmpty", "return_type": "boolean", "signature": "isEmpty()", "body_content": "{\r\n    return list.isEmpty();\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.isEmpty", "qualified_signature": "com.alibaba.fastjson.JSONArray.isEmpty()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "contains", "return_type": "boolean", "signature": "contains(Object)", "body_content": "{\r\n    return list.contains(o);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.contains", "qualified_signature": "com.alibaba.fastjson.JSONArray.contains(java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "iterator", "return_type": "Iterator<Object>", "signature": "iterator()", "body_content": "{\r\n    return list.iterator();\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.iterator", "qualified_signature": "com.alibaba.fastjson.JSONArray.iterator()", "qualified_return_type": "java.util.Iterator<java.lang.Object>"}
{"java_doc": "", "method_name": "toArray", "return_type": "Object[]", "signature": "toArray()", "body_content": "{\r\n    return list.toArray();\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.toArray", "qualified_signature": "com.alibaba.fastjson.JSONArray.toArray()", "qualified_return_type": "java.lang.Object[]"}
{"java_doc": "", "method_name": "toArray", "return_type": "T[]", "signature": "toArray(T[])", "body_content": "{\r\n    return list.toArray(a);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.toArray", "qualified_signature": "com.alibaba.fastjson.JSONArray.toArray(T[])", "qualified_return_type": "T[]"}
{"java_doc": "", "method_name": "add", "return_type": "boolean", "signature": "add(Object)", "body_content": "{\r\n    return list.add(e);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.add", "qualified_signature": "com.alibaba.fastjson.JSONArray.add(java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "fluentAdd", "return_type": "JSONArray", "signature": "fluentAdd(Object)", "body_content": "{\r\n    list.add(e);\r\n    return this;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.fluentAdd", "qualified_signature": "com.alibaba.fastjson.JSONArray.fluentAdd(java.lang.Object)", "qualified_return_type": "com.alibaba.fastjson.JSONArray"}
{"java_doc": "", "method_name": "remove", "return_type": "boolean", "signature": "remove(Object)", "body_content": "{\r\n    return list.remove(o);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.remove", "qualified_signature": "com.alibaba.fastjson.JSONArray.remove(java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "fluentRemove", "return_type": "JSONArray", "signature": "fluentRemove(Object)", "body_content": "{\r\n    list.remove(o);\r\n    return this;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.fluentRemove", "qualified_signature": "com.alibaba.fastjson.JSONArray.fluentRemove(java.lang.Object)", "qualified_return_type": "com.alibaba.fastjson.JSONArray"}
{"java_doc": "", "method_name": "containsAll", "return_type": "boolean", "signature": "containsAll(Collection)", "body_content": "{\r\n    return list.containsAll(c);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.containsAll", "qualified_signature": "com.alibaba.fastjson.JSONArray.containsAll(java.util.Collection<?>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "addAll", "return_type": "boolean", "signature": "addAll(Collection)", "body_content": "{\r\n    return list.addAll(c);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.addAll", "qualified_signature": "com.alibaba.fastjson.JSONArray.addAll(java.util.Collection<? extends java.lang.Object>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "fluentAddAll", "return_type": "JSONArray", "signature": "fluentAddAll(Collection)", "body_content": "{\r\n    list.addAll(c);\r\n    return this;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.fluentAddAll", "qualified_signature": "com.alibaba.fastjson.JSONArray.fluentAddAll(java.util.Collection<? extends java.lang.Object>)", "qualified_return_type": "com.alibaba.fastjson.JSONArray"}
{"java_doc": "", "method_name": "addAll", "return_type": "boolean", "signature": "addAll(int, Collection)", "body_content": "{\r\n    return list.addAll(index, c);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.addAll", "qualified_signature": "com.alibaba.fastjson.JSONArray.addAll(int, java.util.Collection<? extends java.lang.Object>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "fluentAddAll", "return_type": "JSONArray", "signature": "fluentAddAll(int, Collection)", "body_content": "{\r\n    list.addAll(index, c);\r\n    return this;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.fluentAddAll", "qualified_signature": "com.alibaba.fastjson.JSONArray.fluentAddAll(int, java.util.Collection<? extends java.lang.Object>)", "qualified_return_type": "com.alibaba.fastjson.JSONArray"}
{"java_doc": "", "method_name": "removeAll", "return_type": "boolean", "signature": "removeAll(Collection)", "body_content": "{\r\n    return list.removeAll(c);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.removeAll", "qualified_signature": "com.alibaba.fastjson.JSONArray.removeAll(java.util.Collection<?>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "fluentRemoveAll", "return_type": "JSONArray", "signature": "fluentRemoveAll(Collection)", "body_content": "{\r\n    list.removeAll(c);\r\n    return this;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.fluentRemoveAll", "qualified_signature": "com.alibaba.fastjson.JSONArray.fluentRemoveAll(java.util.Collection<?>)", "qualified_return_type": "com.alibaba.fastjson.JSONArray"}
{"java_doc": "", "method_name": "retainAll", "return_type": "boolean", "signature": "retainAll(Collection)", "body_content": "{\r\n    return list.retainAll(c);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.retainAll", "qualified_signature": "com.alibaba.fastjson.JSONArray.retainAll(java.util.Collection<?>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "fluentRetainAll", "return_type": "JSONArray", "signature": "fluentRetainAll(Collection)", "body_content": "{\r\n    list.retainAll(c);\r\n    return this;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.fluentRetainAll", "qualified_signature": "com.alibaba.fastjson.JSONArray.fluentRetainAll(java.util.Collection<?>)", "qualified_return_type": "com.alibaba.fastjson.JSONArray"}
{"java_doc": "", "method_name": "clear", "return_type": "void", "signature": "clear()", "body_content": "{\r\n    list.clear();\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.clear", "qualified_signature": "com.alibaba.fastjson.JSONArray.clear()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "fluentClear", "return_type": "JSONArray", "signature": "fluentClear()", "body_content": "{\r\n    list.clear();\r\n    return this;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.fluentClear", "qualified_signature": "com.alibaba.fastjson.JSONArray.fluentClear()", "qualified_return_type": "com.alibaba.fastjson.JSONArray"}
{"java_doc": "", "method_name": "set", "return_type": "Object", "signature": "set(int, Object)", "body_content": "{\r\n    if (index == -1) {\r\n        list.add(element);\r\n        return null;\r\n    }\r\n    if (list.size() <= index) {\r\n        for (int i = list.size(); i < index; ++i) {\r\n            list.add(null);\r\n        }\r\n        list.add(element);\r\n        return null;\r\n    }\r\n    return list.set(index, element);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.set", "qualified_signature": "com.alibaba.fastjson.JSONArray.set(int, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "fluentSet", "return_type": "JSONArray", "signature": "fluentSet(int, Object)", "body_content": "{\r\n    set(index, element);\r\n    return this;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.fluentSet", "qualified_signature": "com.alibaba.fastjson.JSONArray.fluentSet(int, java.lang.Object)", "qualified_return_type": "com.alibaba.fastjson.JSONArray"}
{"java_doc": "", "method_name": "add", "return_type": "void", "signature": "add(int, Object)", "body_content": "{\r\n    list.add(index, element);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.add", "qualified_signature": "com.alibaba.fastjson.JSONArray.add(int, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "fluentAdd", "return_type": "JSONArray", "signature": "fluentAdd(int, Object)", "body_content": "{\r\n    list.add(index, element);\r\n    return this;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.fluentAdd", "qualified_signature": "com.alibaba.fastjson.JSONArray.fluentAdd(int, java.lang.Object)", "qualified_return_type": "com.alibaba.fastjson.JSONArray"}
{"java_doc": "", "method_name": "remove", "return_type": "Object", "signature": "remove(int)", "body_content": "{\r\n    return list.remove(index);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.remove", "qualified_signature": "com.alibaba.fastjson.JSONArray.remove(int)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "fluentRemove", "return_type": "JSONArray", "signature": "fluentRemove(int)", "body_content": "{\r\n    list.remove(index);\r\n    return this;\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.fluentRemove", "qualified_signature": "com.alibaba.fastjson.JSONArray.fluentRemove(int)", "qualified_return_type": "com.alibaba.fastjson.JSONArray"}
{"java_doc": "", "method_name": "indexOf", "return_type": "int", "signature": "indexOf(Object)", "body_content": "{\r\n    return list.indexOf(o);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.indexOf", "qualified_signature": "com.alibaba.fastjson.JSONArray.indexOf(java.lang.Object)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "lastIndexOf", "return_type": "int", "signature": "lastIndexOf(Object)", "body_content": "{\r\n    return list.lastIndexOf(o);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.lastIndexOf", "qualified_signature": "com.alibaba.fastjson.JSONArray.lastIndexOf(java.lang.Object)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "listIterator", "return_type": "ListIterator<Object>", "signature": "listIterator()", "body_content": "{\r\n    return list.listIterator();\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.listIterator", "qualified_signature": "com.alibaba.fastjson.JSONArray.listIterator()", "qualified_return_type": "java.util.ListIterator<java.lang.Object>"}
{"java_doc": "", "method_name": "listIterator", "return_type": "ListIterator<Object>", "signature": "listIterator(int)", "body_content": "{\r\n    return list.listIterator(index);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.listIterator", "qualified_signature": "com.alibaba.fastjson.JSONArray.listIterator(int)", "qualified_return_type": "java.util.ListIterator<java.lang.Object>"}
{"java_doc": "", "method_name": "subList", "return_type": "List<Object>", "signature": "subList(int, int)", "body_content": "{\r\n    return list.subList(fromIndex, toIndex);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.subList", "qualified_signature": "com.alibaba.fastjson.JSONArray.subList(int, int)", "qualified_return_type": "java.util.List<java.lang.Object>"}
{"java_doc": "", "method_name": "get", "return_type": "Object", "signature": "get(int)", "body_content": "{\r\n    return list.get(index);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.get", "qualified_signature": "com.alibaba.fastjson.JSONArray.get(int)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "getJSONObject", "return_type": "JSONObject", "signature": "getJSONObject(int)", "body_content": "{\r\n    Object value = list.get(index);\r\n    if (value instanceof JSONObject) {\r\n        return (JSONObject) value;\r\n    }\r\n    return (JSONObject) toJSON(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getJSONObject", "qualified_signature": "com.alibaba.fastjson.JSONArray.getJSONObject(int)", "qualified_return_type": "com.alibaba.fastjson.JSONObject"}
{"java_doc": "", "method_name": "getJSONArray", "return_type": "JSONArray", "signature": "getJSONArray(int)", "body_content": "{\r\n    Object value = list.get(index);\r\n    if (value instanceof JSONArray) {\r\n        return (JSONArray) value;\r\n    }\r\n    return (JSONArray) toJSON(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getJSONArray", "qualified_signature": "com.alibaba.fastjson.JSONArray.getJSONArray(int)", "qualified_return_type": "com.alibaba.fastjson.JSONArray"}
{"java_doc": "", "method_name": "getObject", "return_type": "T", "signature": "getObject(int, Class)", "body_content": "{\r\n    Object obj = list.get(index);\r\n    return TypeUtils.castToJavaBean(obj, clazz);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getObject", "qualified_signature": "com.alibaba.fastjson.JSONArray.getObject(int, java.lang.Class<T>)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getBoolean", "return_type": "Boolean", "signature": "getBoolean(int)", "body_content": "{\r\n    Object value = get(index);\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    return castToBoolean(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getBoolean", "qualified_signature": "com.alibaba.fastjson.JSONArray.getBoolean(int)", "qualified_return_type": "java.lang.Boolean"}
{"java_doc": "", "method_name": "getBooleanValue", "return_type": "boolean", "signature": "getBooleanValue(int)", "body_content": "{\r\n    Object value = get(index);\r\n    if (value == null) {\r\n        return false;\r\n    }\r\n    return castToBoolean(value).booleanValue();\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getBooleanValue", "qualified_signature": "com.alibaba.fastjson.JSONArray.getBooleanValue(int)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getByte", "return_type": "Byte", "signature": "getByte(int)", "body_content": "{\r\n    Object value = get(index);\r\n    return castToByte(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getByte", "qualified_signature": "com.alibaba.fastjson.JSONArray.getByte(int)", "qualified_return_type": "java.lang.Byte"}
{"java_doc": "", "method_name": "getByteValue", "return_type": "byte", "signature": "getByteValue(int)", "body_content": "{\r\n    Object value = get(index);\r\n    if (value == null) {\r\n        return 0;\r\n    }\r\n    return castToByte(value).byteValue();\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getByteValue", "qualified_signature": "com.alibaba.fastjson.JSONArray.getByteValue(int)", "qualified_return_type": "byte"}
{"java_doc": "", "method_name": "getShort", "return_type": "Short", "signature": "getShort(int)", "body_content": "{\r\n    Object value = get(index);\r\n    return castToShort(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getShort", "qualified_signature": "com.alibaba.fastjson.JSONArray.getShort(int)", "qualified_return_type": "java.lang.Short"}
{"java_doc": "", "method_name": "getShortValue", "return_type": "short", "signature": "getShortValue(int)", "body_content": "{\r\n    Object value = get(index);\r\n    if (value == null) {\r\n        return 0;\r\n    }\r\n    return castToShort(value).shortValue();\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getShortValue", "qualified_signature": "com.alibaba.fastjson.JSONArray.getShortValue(int)", "qualified_return_type": "short"}
{"java_doc": "", "method_name": "getInteger", "return_type": "Integer", "signature": "getInteger(int)", "body_content": "{\r\n    Object value = get(index);\r\n    return castToInt(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getInteger", "qualified_signature": "com.alibaba.fastjson.JSONArray.getInteger(int)", "qualified_return_type": "java.lang.Integer"}
{"java_doc": "", "method_name": "getIntValue", "return_type": "int", "signature": "getIntValue(int)", "body_content": "{\r\n    Object value = get(index);\r\n    if (value == null) {\r\n        return 0;\r\n    }\r\n    return castToInt(value).intValue();\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getIntValue", "qualified_signature": "com.alibaba.fastjson.JSONArray.getIntValue(int)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "getLong", "return_type": "Long", "signature": "getLong(int)", "body_content": "{\r\n    Object value = get(index);\r\n    return castToLong(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getLong", "qualified_signature": "com.alibaba.fastjson.JSONArray.getLong(int)", "qualified_return_type": "java.lang.Long"}
{"java_doc": "", "method_name": "getLongValue", "return_type": "long", "signature": "getLongValue(int)", "body_content": "{\r\n    Object value = get(index);\r\n    if (value == null) {\r\n        return 0L;\r\n    }\r\n    return castToLong(value).longValue();\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getLongValue", "qualified_signature": "com.alibaba.fastjson.JSONArray.getLongValue(int)", "qualified_return_type": "long"}
{"java_doc": "", "method_name": "getFloat", "return_type": "Float", "signature": "getFloat(int)", "body_content": "{\r\n    Object value = get(index);\r\n    return castToFloat(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getFloat", "qualified_signature": "com.alibaba.fastjson.JSONArray.getFloat(int)", "qualified_return_type": "java.lang.Float"}
{"java_doc": "", "method_name": "getFloatValue", "return_type": "float", "signature": "getFloatValue(int)", "body_content": "{\r\n    Object value = get(index);\r\n    if (value == null) {\r\n        return 0F;\r\n    }\r\n    return castToFloat(value).floatValue();\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getFloatValue", "qualified_signature": "com.alibaba.fastjson.JSONArray.getFloatValue(int)", "qualified_return_type": "float"}
{"java_doc": "", "method_name": "getDouble", "return_type": "Double", "signature": "getDouble(int)", "body_content": "{\r\n    Object value = get(index);\r\n    return castToDouble(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getDouble", "qualified_signature": "com.alibaba.fastjson.JSONArray.getDouble(int)", "qualified_return_type": "java.lang.Double"}
{"java_doc": "", "method_name": "getDoubleValue", "return_type": "double", "signature": "getDoubleValue(int)", "body_content": "{\r\n    Object value = get(index);\r\n    if (value == null) {\r\n        return 0D;\r\n    }\r\n    return castToDouble(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getDoubleValue", "qualified_signature": "com.alibaba.fastjson.JSONArray.getDoubleValue(int)", "qualified_return_type": "double"}
{"java_doc": "", "method_name": "getBigDecimal", "return_type": "BigDecimal", "signature": "getBigDecimal(int)", "body_content": "{\r\n    Object value = get(index);\r\n    return castToBigDecimal(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getBigDecimal", "qualified_signature": "com.alibaba.fastjson.JSONArray.getBigDecimal(int)", "qualified_return_type": "java.math.BigDecimal"}
{"java_doc": "", "method_name": "getBigInteger", "return_type": "BigInteger", "signature": "getBigInteger(int)", "body_content": "{\r\n    Object value = get(index);\r\n    return castToBigInteger(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getBigInteger", "qualified_signature": "com.alibaba.fastjson.JSONArray.getBigInteger(int)", "qualified_return_type": "java.math.BigInteger"}
{"java_doc": "", "method_name": "getString", "return_type": "String", "signature": "getString(int)", "body_content": "{\r\n    Object value = get(index);\r\n    return castToString(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getString", "qualified_signature": "com.alibaba.fastjson.JSONArray.getString(int)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getDate", "return_type": "java.util.Date", "signature": "getDate(int)", "body_content": "{\r\n    Object value = get(index);\r\n    return castToDate(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getDate", "qualified_signature": "com.alibaba.fastjson.JSONArray.getDate(int)", "qualified_return_type": "java.util.Date"}
{"java_doc": "", "method_name": "getSqlDate", "return_type": "java.sql.Date", "signature": "getSqlDate(int)", "body_content": "{\r\n    Object value = get(index);\r\n    return castToSqlDate(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getSqlDate", "qualified_signature": "com.alibaba.fastjson.JSONArray.getSqlDate(int)", "qualified_return_type": "java.sql.Date"}
{"java_doc": "", "method_name": "getTimestamp", "return_type": "java.sql.Timestamp", "signature": "getTimestamp(int)", "body_content": "{\r\n    Object value = get(index);\r\n    return castToTimestamp(value);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.getTimestamp", "qualified_signature": "com.alibaba.fastjson.JSONArray.getTimestamp(int)", "qualified_return_type": "java.sql.Timestamp"}
{"java_doc": "", "method_name": "clone", "return_type": "Object", "signature": "clone()", "body_content": "{\r\n    return new JSONArray(new ArrayList<Object>(list));\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.clone", "qualified_signature": "com.alibaba.fastjson.JSONArray.clone()", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "equals", "return_type": "boolean", "signature": "equals(Object)", "body_content": "{\r\n    return this.list.equals(obj);\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.equals", "qualified_signature": "com.alibaba.fastjson.JSONArray.equals(java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "hashCode", "return_type": "int", "signature": "hashCode()", "body_content": "{\r\n    return this.list.hashCode();\r\n}", "class_name": "JSONArray", "qualified_method_name": "com.alibaba.fastjson.JSONArray.hashCode", "qualified_signature": "com.alibaba.fastjson.JSONArray.hashCode()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    Boolean value = (Boolean) object;\r\n    if (value == null) {\r\n        out.writeNull(SerializerFeature.WriteNullBooleanAsFalse);\r\n        return;\r\n    }\r\n    if (value.booleanValue()) {\r\n        out.write(\"true\");\r\n    } else {\r\n        out.write(\"false\");\r\n    }\r\n}", "class_name": "BooleanCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.BooleanCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.BooleanCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    final JSONLexer lexer = parser.lexer;\r\n    Boolean boolObj;\r\n    if (lexer.token() == JSONToken.TRUE) {\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        boolObj = Boolean.TRUE;\r\n    } else if (lexer.token() == JSONToken.FALSE) {\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        boolObj = Boolean.FALSE;\r\n    } else if (lexer.token() == JSONToken.LITERAL_INT) {\r\n        int intValue = lexer.intValue();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        if (intValue == 1) {\r\n            boolObj = Boolean.TRUE;\r\n        } else {\r\n            boolObj = Boolean.FALSE;\r\n        }\r\n    } else {\r\n        Object value = parser.parse();\r\n        if (value == null) {\r\n            return null;\r\n        }\r\n        boolObj = TypeUtils.castToBoolean(value);\r\n    }\r\n    if (clazz == AtomicBoolean.class) {\r\n        return (T) new AtomicBoolean(boolObj.booleanValue());\r\n    }\r\n    return (T) boolObj;\r\n}", "class_name": "BooleanCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.BooleanCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.BooleanCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.TRUE;\r\n}", "class_name": "BooleanCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.BooleanCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.BooleanCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    boolean writeClassName = serializer.out.isEnabled(SerializerFeature.WriteClassName);\r\n    SerializeWriter out = serializer.out;\r\n    Type elementType = null;\r\n    if (writeClassName) {\r\n        if (fieldType instanceof ParameterizedType) {\r\n            ParameterizedType param = (ParameterizedType) fieldType;\r\n            elementType = param.getActualTypeArguments()[0];\r\n        }\r\n    }\r\n    if (object == null) {\r\n        out.writeNull(SerializerFeature.WriteNullListAsEmpty);\r\n        return;\r\n    }\r\n    List<?> list = (List<?>) object;\r\n    if (list.size() == 0) {\r\n        out.append(\"[]\");\r\n        return;\r\n    }\r\n    SerialContext context = serializer.context;\r\n    serializer.setContext(context, object, fieldName, 0);\r\n    ObjectSerializer itemSerializer = null;\r\n    try {\r\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\r\n            out.append('[');\r\n            serializer.incrementIndent();\r\n            int i = 0;\r\n            for (Object item : list) {\r\n                if (i != 0) {\r\n                    out.append(',');\r\n                }\r\n                serializer.println();\r\n                if (item != null) {\r\n                    if (serializer.containsReference(item)) {\r\n                        serializer.writeReference(item);\r\n                    } else {\r\n                        itemSerializer = serializer.getObjectWriter(item.getClass());\r\n                        SerialContext itemContext = new SerialContext(context, object, fieldName, 0, 0);\r\n                        serializer.context = itemContext;\r\n                        itemSerializer.write(serializer, item, i, elementType, 0);\r\n                    }\r\n                } else {\r\n                    serializer.out.writeNull();\r\n                }\r\n                i++;\r\n            }\r\n            serializer.decrementIdent();\r\n            serializer.println();\r\n            out.append(']');\r\n            return;\r\n        }\r\n        out.append('[');\r\n        for (int i = 0, size = list.size(); i < size; ++i) {\r\n            Object item = list.get(i);\r\n            if (i != 0) {\r\n                out.append(',');\r\n            }\r\n            if (item == null) {\r\n                out.append(\"null\");\r\n            } else {\r\n                Class<?> clazz = item.getClass();\r\n                if (clazz == Integer.class) {\r\n                    out.writeInt(((Integer) item).intValue());\r\n                } else if (clazz == Long.class) {\r\n                    long val = ((Long) item).longValue();\r\n                    if (writeClassName) {\r\n                        out.writeLong(val);\r\n                        out.write('L');\r\n                    } else {\r\n                        out.writeLong(val);\r\n                    }\r\n                } else {\r\n                    if (!out.disableCircularReferenceDetect) {\r\n                        SerialContext itemContext = new SerialContext(context, object, fieldName, 0, 0);\r\n                        serializer.context = itemContext;\r\n                    }\r\n                    if (serializer.containsReference(item)) {\r\n                        serializer.writeReference(item);\r\n                    } else {\r\n                        itemSerializer = serializer.getObjectWriter(item.getClass());\r\n                        itemSerializer.write(serializer, item, i, elementType, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        out.append(']');\r\n    } finally {\r\n        serializer.context = context;\r\n    }\r\n}", "class_name": "ListSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.ListSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.ListSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull(SerializerFeature.WriteNullListAsEmpty);\r\n        return;\r\n    }\r\n    Type elementType = null;\r\n    if (out.isEnabled(SerializerFeature.WriteClassName)) {\r\n        if (fieldType instanceof ParameterizedType) {\r\n            ParameterizedType param = (ParameterizedType) fieldType;\r\n            elementType = param.getActualTypeArguments()[0];\r\n        }\r\n    }\r\n    Enumeration<?> e = (Enumeration<?>) object;\r\n    SerialContext context = serializer.context;\r\n    serializer.setContext(context, object, fieldName, 0);\r\n    try {\r\n        int i = 0;\r\n        out.append('[');\r\n        while (e.hasMoreElements()) {\r\n            Object item = e.nextElement();\r\n            if (i++ != 0) {\r\n                out.append(',');\r\n            }\r\n            if (item == null) {\r\n                out.writeNull();\r\n                continue;\r\n            }\r\n            ObjectSerializer itemSerializer = serializer.getObjectWriter(item.getClass());\r\n            itemSerializer.write(serializer, item, i - 1, elementType, 0);\r\n        }\r\n        out.append(']');\r\n    } finally {\r\n        serializer.context = context;\r\n    }\r\n}", "class_name": "EnumerationSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.EnumerationSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.EnumerationSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeBefore", "return_type": "char", "signature": "writeBefore(JSONSerializer, Object, char)", "body_content": "{\r\n    serializerLocal.set(serializer);\r\n    seperatorLocal.set(seperator);\r\n    writeBefore(object);\r\n    serializerLocal.set(null);\r\n    return seperatorLocal.get();\r\n}", "class_name": "BeforeFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.BeforeFilter.writeBefore", "qualified_signature": "com.alibaba.fastjson.serializer.BeforeFilter.writeBefore(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, char)", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "writeKeyValue", "return_type": "void", "signature": "writeKeyValue(String, Object)", "body_content": "{\r\n    JSONSerializer serializer = serializerLocal.get();\r\n    char seperator = seperatorLocal.get();\r\n    serializer.writeKeyValue(seperator, key, value);\r\n    if (seperator != ',') {\r\n        seperatorLocal.set(COMMA);\r\n    }\r\n}", "class_name": "BeforeFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.BeforeFilter.writeKeyValue", "qualified_signature": "com.alibaba.fastjson.serializer.BeforeFilter.writeKeyValue(java.lang.String, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeBefore", "return_type": "void", "signature": "writeBefore(Object)", "body_content": "", "class_name": "BeforeFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.BeforeFilter.writeBefore", "qualified_signature": "com.alibaba.fastjson.serializer.BeforeFilter.writeBefore(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "createJavaBeanDeserializer", "return_type": "ObjectDeserializer", "signature": "createJavaBeanDeserializer(ParserConfig, JavaBeanInfo)", "body_content": "{\r\n    Class<?> clazz = beanInfo.clazz;\r\n    if (clazz.isPrimitive()) {\r\n        throw new IllegalArgumentException(\"not support type :\" + clazz.getName());\r\n    }\r\n    String className = \"FastjsonASMDeserializer_\" + seed.incrementAndGet() + \"_\" + clazz.getSimpleName();\r\n    String packageName = ASMDeserializerFactory.class.getPackage().getName();\r\n    String classNameType = packageName.replace('.', '/') + \"/\" + className;\r\n    String classNameFull = packageName + \".\" + className;\r\n    ClassWriter cw = new ClassWriter();\r\n    cw.visit(V1_5, ACC_PUBLIC + ACC_SUPER, classNameType, type(JavaBeanDeserializer.class), null);\r\n    _init(cw, new Context(classNameType, config, beanInfo, 3));\r\n    _createInstance(cw, new Context(classNameType, config, beanInfo, 3));\r\n    _deserialze(cw, new Context(classNameType, config, beanInfo, 5));\r\n    _deserialzeArrayMapping(cw, new Context(classNameType, config, beanInfo, 4));\r\n    byte[] code = cw.toByteArray();\r\n    Class<?> exampleClass = defineClassPublic(classNameFull, code, 0, code.length);\r\n    Constructor<?> constructor = exampleClass.getConstructor(ParserConfig.class, JavaBeanInfo.class);\r\n    Object instance = constructor.newInstance(config, beanInfo);\r\n    return (ObjectDeserializer) instance;\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.createJavaBeanDeserializer", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.createJavaBeanDeserializer(com.alibaba.fastjson.parser.ParserConfig, com.alibaba.fastjson.util.JavaBeanInfo)", "qualified_return_type": "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer"}
{"java_doc": "", "method_name": "defineClassPublic", "return_type": "Class<?>", "signature": "defineClassPublic(String, byte[], int, int)", "body_content": "{\r\n    return classLoader.defineClassPublic(name, b, off, len);\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.defineClassPublic", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.defineClassPublic(java.lang.String, byte[], int, int)", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "_setFlag", "return_type": "void", "signature": "_setFlag(MethodVisitor, Context, int)", "body_content": "{\r\n    String varName = \"_asm_flag_\" + (i / 32);\r\n    mw.visitVarInsn(ILOAD, context.var(varName));\r\n    mw.visitLdcInsn(1 << i);\r\n    mw.visitInsn(IOR);\r\n    mw.visitVarInsn(ISTORE, context.var(varName));\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._setFlag", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._setFlag(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_isFlag", "return_type": "void", "signature": "_isFlag(MethodVisitor, Context, int, Label)", "body_content": "{\r\n    mw.visitVarInsn(ILOAD, context.var(\"_asm_flag_\" + (i / 32)));\r\n    mw.visitLdcInsn(1 << i);\r\n    mw.visitInsn(IAND);\r\n    mw.visitJumpInsn(IFEQ, label);\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._isFlag", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._isFlag(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, int, com.alibaba.fastjson.asm.Label)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_deserialzeArrayMapping", "return_type": "void", "signature": "_deserialzeArrayMapping(ClassWriter, Context)", "body_content": "{\r\n    MethodVisitor mw = new MethodWriter(cw, ACC_PUBLIC, \"deserialzeArrayMapping\", \"(L\" + DefaultJSONParser + \";Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\", null, null);\r\n    defineVarLexer(context, mw);\r\n    _createInstance(context, mw);\r\n    FieldInfo[] sortedFieldInfoList = context.beanInfo.sortedFields;\r\n    int fieldListSize = sortedFieldInfoList.length;\r\n    for (int i = 0; i < fieldListSize; ++i) {\r\n        final boolean last = (i == fieldListSize - 1);\r\n        final char seperator = last ? ']' : ',';\r\n        FieldInfo fieldInfo = sortedFieldInfoList[i];\r\n        Class<?> fieldClass = fieldInfo.fieldClass;\r\n        Type fieldType = fieldInfo.fieldType;\r\n        if (// \r\n        fieldClass == byte.class || // \r\n        fieldClass == short.class || fieldClass == int.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanInt\", \"(C)I\");\r\n            mw.visitVarInsn(ISTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (fieldClass == long.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanLong\", \"(C)J\");\r\n            mw.visitVarInsn(LSTORE, context.var(fieldInfo.name + \"_asm\", 2));\r\n        } else if (fieldClass == boolean.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanBoolean\", \"(C)Z\");\r\n            mw.visitVarInsn(ISTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (fieldClass == float.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanFloat\", \"(C)F\");\r\n            mw.visitVarInsn(FSTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (fieldClass == double.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanDouble\", \"(C)D\");\r\n            mw.visitVarInsn(DSTORE, context.var(fieldInfo.name + \"_asm\", 2));\r\n        } else if (fieldClass == char.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanString\", \"(C)Ljava/lang/String;\");\r\n            mw.visitInsn(ICONST_0);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/String\", \"charAt\", \"(I)C\");\r\n            mw.visitVarInsn(ISTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (fieldClass == String.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanString\", \"(C)Ljava/lang/String;\");\r\n            mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (fieldClass.isEnum()) {\r\n            Label enumNumIf_ = new Label();\r\n            Label enumNumErr_ = new Label();\r\n            Label enumStore_ = new Label();\r\n            Label enumQuote_ = new Label();\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"getCurrent\", \"()C\");\r\n            mw.visitInsn(DUP);\r\n            mw.visitVarInsn(ISTORE, context.var(\"ch\"));\r\n            mw.visitLdcInsn((int) 'n');\r\n            mw.visitJumpInsn(IF_ICMPEQ, enumQuote_);\r\n            mw.visitVarInsn(ILOAD, context.var(\"ch\"));\r\n            mw.visitLdcInsn((int) '\\\"');\r\n            mw.visitJumpInsn(IF_ICMPNE, enumNumIf_);\r\n            mw.visitLabel(enumQuote_);\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldClass)));\r\n            mw.visitVarInsn(ALOAD, 1);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"getSymbolTable\", \"()\" + desc(SymbolTable.class));\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanEnum\", \"(Ljava/lang/Class;\" + desc(SymbolTable.class) + \"C)Ljava/lang/Enum;\");\r\n            mw.visitJumpInsn(GOTO, enumStore_);\r\n            // (ch >= '0' && ch <= '9') {\r\n            mw.visitLabel(enumNumIf_);\r\n            mw.visitVarInsn(ILOAD, context.var(\"ch\"));\r\n            mw.visitLdcInsn((int) '0');\r\n            mw.visitJumpInsn(IF_ICMPLT, enumNumErr_);\r\n            mw.visitVarInsn(ILOAD, context.var(\"ch\"));\r\n            mw.visitLdcInsn((int) '9');\r\n            mw.visitJumpInsn(IF_ICMPGT, enumNumErr_);\r\n            _getFieldDeser(context, mw, fieldInfo);\r\n            // cast\r\n            mw.visitTypeInsn(CHECKCAST, type(EnumDeserializer.class));\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanInt\", \"(C)I\");\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, type(EnumDeserializer.class), \"valueOf\", \"(I)Ljava/lang/Enum;\");\r\n            mw.visitJumpInsn(GOTO, enumStore_);\r\n            mw.visitLabel(enumNumErr_);\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, type(JavaBeanDeserializer.class), \"scanEnum\", \"(L\" + JSONLexerBase + \";C)Ljava/lang/Enum;\");\r\n            mw.visitLabel(enumStore_);\r\n            // cast\r\n            mw.visitTypeInsn(CHECKCAST, type(fieldClass));\r\n            mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (Collection.class.isAssignableFrom(fieldClass)) {\r\n            Class<?> itemClass = TypeUtils.getCollectionItemClass(fieldType);\r\n            if (itemClass == String.class) {\r\n                if (fieldClass == List.class || fieldClass == Collections.class || fieldClass == ArrayList.class) {\r\n                    mw.visitTypeInsn(NEW, type(ArrayList.class));\r\n                    mw.visitInsn(DUP);\r\n                    mw.visitMethodInsn(INVOKESPECIAL, type(ArrayList.class), \"<init>\", \"()V\");\r\n                } else {\r\n                    mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldClass)));\r\n                    mw.visitMethodInsn(INVOKESTATIC, type(TypeUtils.class), \"createCollection\", \"(Ljava/lang/Class;)Ljava/util/Collection;\");\r\n                }\r\n                mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n                mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n                mw.visitVarInsn(ALOAD, context.var(fieldInfo.name + \"_asm\"));\r\n                mw.visitVarInsn(BIPUSH, seperator);\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanStringArray\", \"(Ljava/util/Collection;C)V\");\r\n                Label valueNullEnd_ = new Label();\r\n                mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n                mw.visitFieldInsn(GETFIELD, JSONLexerBase, \"matchStat\", \"I\");\r\n                mw.visitLdcInsn(com.alibaba.fastjson.parser.JSONLexerBase.VALUE_NULL);\r\n                mw.visitJumpInsn(IF_ICMPNE, valueNullEnd_);\r\n                mw.visitInsn(ACONST_NULL);\r\n                mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n                mw.visitLabel(valueNullEnd_);\r\n            } else {\r\n                Label notError_ = new Label();\r\n                mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"token\", \"()I\");\r\n                mw.visitVarInsn(ISTORE, context.var(\"token\"));\r\n                mw.visitVarInsn(ILOAD, context.var(\"token\"));\r\n                int token = i == 0 ? JSONToken.LBRACKET : JSONToken.COMMA;\r\n                mw.visitLdcInsn(token);\r\n                mw.visitJumpInsn(IF_ICMPEQ, notError_);\r\n                // DefaultJSONParser\r\n                mw.visitVarInsn(ALOAD, 1);\r\n                mw.visitVarInsn(ILOAD, context.var(\"token\"));\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"throwException\", \"(I)V\");\r\n                mw.visitLabel(notError_);\r\n                Label quickElse_ = new Label(), quickEnd_ = new Label();\r\n                mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"getCurrent\", \"()C\");\r\n                mw.visitVarInsn(BIPUSH, '[');\r\n                mw.visitJumpInsn(IF_ICMPNE, quickElse_);\r\n                mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"next\", \"()C\");\r\n                mw.visitInsn(POP);\r\n                mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n                mw.visitLdcInsn(JSONToken.LBRACKET);\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"setToken\", \"(I)V\");\r\n                mw.visitJumpInsn(GOTO, quickEnd_);\r\n                mw.visitLabel(quickElse_);\r\n                mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n                mw.visitLdcInsn(JSONToken.LBRACKET);\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"nextToken\", \"(I)V\");\r\n                mw.visitLabel(quickEnd_);\r\n                _newCollection(mw, fieldClass, i, false);\r\n                mw.visitInsn(DUP);\r\n                mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n                _getCollectionFieldItemDeser(context, mw, fieldInfo, itemClass);\r\n                mw.visitVarInsn(ALOAD, 1);\r\n                mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(itemClass)));\r\n                mw.visitVarInsn(ALOAD, 3);\r\n                mw.visitMethodInsn(INVOKESTATIC, type(JavaBeanDeserializer.class), \"parseArray\", // \r\n                \"(Ljava/util/Collection;\" + // \r\n                desc(ObjectDeserializer.class) + \"L\" + DefaultJSONParser + // \r\n                \";\" + \"Ljava/lang/reflect/Type;Ljava/lang/Object;)V\");\r\n            }\r\n        } else if (fieldClass.isArray()) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitLdcInsn(com.alibaba.fastjson.parser.JSONToken.LBRACKET);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"nextToken\", \"(I)V\");\r\n            mw.visitVarInsn(ALOAD, Context.parser);\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitLdcInsn(i);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, type(JavaBeanDeserializer.class), \"getFieldType\", \"(I)Ljava/lang/reflect/Type;\");\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"parseObject\", \"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\");\r\n            // cast\r\n            mw.visitTypeInsn(CHECKCAST, type(fieldClass));\r\n            mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else {\r\n            Label objElseIf_ = new Label();\r\n            Label objEndIf_ = new Label();\r\n            if (fieldClass == java.util.Date.class) {\r\n                mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"getCurrent\", \"()C\");\r\n                mw.visitLdcInsn((int) '1');\r\n                mw.visitJumpInsn(IF_ICMPNE, objElseIf_);\r\n                mw.visitTypeInsn(NEW, type(java.util.Date.class));\r\n                mw.visitInsn(DUP);\r\n                mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n                mw.visitVarInsn(BIPUSH, seperator);\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanLong\", \"(C)J\");\r\n                mw.visitMethodInsn(INVOKESPECIAL, type(java.util.Date.class), \"<init>\", \"(J)V\");\r\n                mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n                mw.visitJumpInsn(GOTO, objEndIf_);\r\n            }\r\n            mw.visitLabel(objElseIf_);\r\n            _quickNextToken(context, mw, JSONToken.LBRACKET);\r\n            _deserObject(context, mw, fieldInfo, fieldClass, i);\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            if (!last) {\r\n                mw.visitLdcInsn(JSONToken.COMMA);\r\n            } else {\r\n                mw.visitLdcInsn(JSONToken.RBRACKET);\r\n            }\r\n            // \r\n            mw.// \r\n            visitMethodInsn(// \r\n            INVOKESPECIAL, // \r\n            type(JavaBeanDeserializer.class), \"check\", \"(\" + desc(JSONLexer.class) + \"I)V\");\r\n            mw.visitLabel(objEndIf_);\r\n            continue;\r\n        }\r\n    }\r\n    _batchSet(context, mw, false);\r\n    Label quickElse_ = new Label(), quickElseIf_ = new Label(), quickElseIfEOI_ = new Label(), quickEnd_ = new Label();\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"getCurrent\", \"()C\");\r\n    mw.visitInsn(DUP);\r\n    mw.visitVarInsn(ISTORE, context.var(\"ch\"));\r\n    mw.visitVarInsn(BIPUSH, ',');\r\n    mw.visitJumpInsn(IF_ICMPNE, quickElseIf_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"next\", \"()C\");\r\n    mw.visitInsn(POP);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(JSONToken.COMMA);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"setToken\", \"(I)V\");\r\n    mw.visitJumpInsn(GOTO, quickEnd_);\r\n    mw.visitLabel(quickElseIf_);\r\n    mw.visitVarInsn(ILOAD, context.var(\"ch\"));\r\n    mw.visitVarInsn(BIPUSH, ']');\r\n    mw.visitJumpInsn(IF_ICMPNE, quickElseIfEOI_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"next\", \"()C\");\r\n    mw.visitInsn(POP);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(JSONToken.RBRACKET);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"setToken\", \"(I)V\");\r\n    mw.visitJumpInsn(GOTO, quickEnd_);\r\n    mw.visitLabel(quickElseIfEOI_);\r\n    mw.visitVarInsn(ILOAD, context.var(\"ch\"));\r\n    mw.visitVarInsn(BIPUSH, (char) JSONLexer.EOI);\r\n    mw.visitJumpInsn(IF_ICMPNE, quickElse_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"next\", \"()C\");\r\n    mw.visitInsn(POP);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(JSONToken.EOF);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"setToken\", \"(I)V\");\r\n    mw.visitJumpInsn(GOTO, quickEnd_);\r\n    mw.visitLabel(quickElse_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(JSONToken.COMMA);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"nextToken\", \"(I)V\");\r\n    mw.visitLabel(quickEnd_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n    mw.visitInsn(ARETURN);\r\n    mw.visitMaxs(5, context.variantIndex);\r\n    mw.visitEnd();\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._deserialzeArrayMapping", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._deserialzeArrayMapping(com.alibaba.fastjson.asm.ClassWriter, com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_deserialze", "return_type": "void", "signature": "_deserialze(ClassWriter, Context)", "body_content": "{\r\n    if (context.fieldInfoList.length == 0) {\r\n        return;\r\n    }\r\n    for (FieldInfo fieldInfo : context.fieldInfoList) {\r\n        Class<?> fieldClass = fieldInfo.fieldClass;\r\n        Type fieldType = fieldInfo.fieldType;\r\n        if (fieldClass == char.class) {\r\n            return;\r\n        }\r\n        if (Collection.class.isAssignableFrom(fieldClass)) {\r\n            if (fieldType instanceof ParameterizedType) {\r\n                Type itemType = ((ParameterizedType) fieldType).getActualTypeArguments()[0];\r\n                if (itemType instanceof Class) {\r\n                    continue;\r\n                } else {\r\n                    return;\r\n                }\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    JavaBeanInfo beanInfo = context.beanInfo;\r\n    context.fieldInfoList = beanInfo.sortedFields;\r\n    MethodVisitor mw = new MethodWriter(cw, ACC_PUBLIC, \"deserialze\", \"(L\" + DefaultJSONParser + \";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\", null, null);\r\n    Label reset_ = new Label();\r\n    Label super_ = new Label();\r\n    Label return_ = new Label();\r\n    Label end_ = new Label();\r\n    defineVarLexer(context, mw);\r\n    {\r\n        Label next_ = new Label();\r\n        // isSupportArrayToBean\r\n        mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"token\", \"()I\");\r\n        mw.visitLdcInsn(JSONToken.LBRACKET);\r\n        mw.visitJumpInsn(IF_ICMPNE, next_);\r\n        if ((beanInfo.parserFeatures & Feature.SupportArrayToBean.mask) == 0) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(ILOAD, 4);\r\n            mw.visitLdcInsn(Feature.SupportArrayToBean.mask);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"isEnabled\", \"(II)Z\");\r\n            mw.visitJumpInsn(IFEQ, next_);\r\n        }\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitVarInsn(ALOAD, Context.parser);\r\n        mw.visitVarInsn(ALOAD, 2);\r\n        mw.visitVarInsn(ALOAD, 3);\r\n        // mw.visitVarInsn(ALOAD, 5);\r\n        mw.visitInsn(ACONST_NULL);\r\n        // \r\n        mw.// \r\n        visitMethodInsn(// \r\n        INVOKESPECIAL, // \r\n        context.className, // \r\n        \"deserialzeArrayMapping\", \"(L\" + DefaultJSONParser + \";Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\");\r\n        mw.visitInsn(ARETURN);\r\n        mw.visitLabel(next_);\r\n        // deserialzeArrayMapping\r\n    }\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(Feature.SortFeidFastMatch.mask);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"isEnabled\", \"(I)Z\");\r\n    mw.visitJumpInsn(IFEQ, super_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(context.clazz.getName());\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanType\", \"(Ljava/lang/String;)I\");\r\n    mw.visitLdcInsn(com.alibaba.fastjson.parser.JSONLexerBase.NOT_MATCH);\r\n    mw.visitJumpInsn(IF_ICMPEQ, super_);\r\n    // parser\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"getContext\", \"()\" + desc(ParseContext.class));\r\n    mw.visitVarInsn(ASTORE, context.var(\"mark_context\"));\r\n    // ParseContext context = parser.getContext();\r\n    mw.visitInsn(ICONST_0);\r\n    mw.visitVarInsn(ISTORE, context.var(\"matchedCount\"));\r\n    _createInstance(context, mw);\r\n    {\r\n        // parser\r\n        mw.visitVarInsn(ALOAD, 1);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"getContext\", \"()\" + desc(ParseContext.class));\r\n        mw.visitVarInsn(ASTORE, context.var(\"context\"));\r\n        // parser\r\n        mw.visitVarInsn(ALOAD, 1);\r\n        mw.visitVarInsn(ALOAD, context.var(\"context\"));\r\n        mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n        // fieldName\r\n        mw.visitVarInsn(ALOAD, 3);\r\n        // \r\n        mw.// \r\n        visitMethodInsn(// \r\n        INVOKEVIRTUAL, // \r\n        DefaultJSONParser, // \r\n        \"setContext\", \"(\" + desc(ParseContext.class) + \"Ljava/lang/Object;Ljava/lang/Object;)\" + desc(ParseContext.class));\r\n        mw.visitVarInsn(ASTORE, context.var(\"childContext\"));\r\n    }\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitFieldInsn(GETFIELD, JSONLexerBase, \"matchStat\", \"I\");\r\n    mw.visitLdcInsn(com.alibaba.fastjson.parser.JSONLexerBase.END);\r\n    mw.visitJumpInsn(IF_ICMPEQ, return_);\r\n    // UNKOWN\r\n    mw.visitInsn(ICONST_0);\r\n    mw.visitIntInsn(ISTORE, context.var(\"matchStat\"));\r\n    int fieldListSize = context.fieldInfoList.length;\r\n    for (int i = 0; i < fieldListSize; i += 32) {\r\n        mw.visitInsn(ICONST_0);\r\n        mw.visitVarInsn(ISTORE, context.var(\"_asm_flag_\" + (i / 32)));\r\n    }\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(Feature.InitStringFieldAsEmpty.mask);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"isEnabled\", \"(I)Z\");\r\n    mw.visitIntInsn(ISTORE, context.var(\"initStringFieldAsEmpty\"));\r\n    // declare and init\r\n    for (int i = 0; i < fieldListSize; ++i) {\r\n        FieldInfo fieldInfo = context.fieldInfoList[i];\r\n        Class<?> fieldClass = fieldInfo.fieldClass;\r\n        if (// \r\n        fieldClass == boolean.class || // \r\n        fieldClass == byte.class || // \r\n        fieldClass == short.class || fieldClass == int.class) {\r\n            mw.visitInsn(ICONST_0);\r\n            mw.visitVarInsn(ISTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (fieldClass == long.class) {\r\n            mw.visitInsn(LCONST_0);\r\n            mw.visitVarInsn(LSTORE, context.var(fieldInfo.name + \"_asm\", 2));\r\n        } else if (fieldClass == float.class) {\r\n            mw.visitInsn(FCONST_0);\r\n            mw.visitVarInsn(FSTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (fieldClass == double.class) {\r\n            mw.visitInsn(DCONST_0);\r\n            mw.visitVarInsn(DSTORE, context.var(fieldInfo.name + \"_asm\", 2));\r\n        } else {\r\n            if (fieldClass == String.class) {\r\n                Label flagEnd_ = new Label();\r\n                Label flagElse_ = new Label();\r\n                mw.visitVarInsn(ILOAD, context.var(\"initStringFieldAsEmpty\"));\r\n                mw.visitJumpInsn(IFEQ, flagElse_);\r\n                _setFlag(mw, context, i);\r\n                mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"stringDefaultValue\", \"()Ljava/lang/String;\");\r\n                mw.visitJumpInsn(GOTO, flagEnd_);\r\n                mw.visitLabel(flagElse_);\r\n                mw.visitInsn(ACONST_NULL);\r\n                mw.visitLabel(flagEnd_);\r\n            } else {\r\n                mw.visitInsn(ACONST_NULL);\r\n            }\r\n            // cast\r\n            mw.visitTypeInsn(CHECKCAST, type(fieldClass));\r\n            mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        }\r\n    }\r\n    for (int i = 0; i < fieldListSize; ++i) {\r\n        FieldInfo fieldInfo = context.fieldInfoList[i];\r\n        Class<?> fieldClass = fieldInfo.fieldClass;\r\n        Type fieldType = fieldInfo.fieldType;\r\n        Label notMatch_ = new Label();\r\n        if (fieldClass == boolean.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_prefix__\", \"[C\");\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanFieldBoolean\", \"([C)Z\");\r\n            mw.visitVarInsn(ISTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (fieldClass == byte.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_prefix__\", \"[C\");\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanFieldInt\", \"([C)I\");\r\n            mw.visitVarInsn(ISTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (fieldClass == short.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_prefix__\", \"[C\");\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanFieldInt\", \"([C)I\");\r\n            mw.visitVarInsn(ISTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (fieldClass == int.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_prefix__\", \"[C\");\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanFieldInt\", \"([C)I\");\r\n            mw.visitVarInsn(ISTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (fieldClass == long.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_prefix__\", \"[C\");\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanFieldLong\", \"([C)J\");\r\n            mw.visitVarInsn(LSTORE, context.var(fieldInfo.name + \"_asm\", 2));\r\n        } else if (fieldClass == float.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_prefix__\", \"[C\");\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanFieldFloat\", \"([C)F\");\r\n            mw.visitVarInsn(FSTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (fieldClass == double.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_prefix__\", \"[C\");\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanFieldDouble\", \"([C)D\");\r\n            mw.visitVarInsn(DSTORE, context.var(fieldInfo.name + \"_asm\", 2));\r\n        } else if (fieldClass == String.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_prefix__\", \"[C\");\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanFieldString\", \"([C)Ljava/lang/String;\");\r\n            mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        } else if (fieldClass.isEnum()) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_prefix__\", \"[C\");\r\n            Label enumNull_ = new Label();\r\n            mw.visitInsn(ACONST_NULL);\r\n            // cast\r\n            mw.visitTypeInsn(CHECKCAST, type(fieldClass));\r\n            mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n            mw.visitVarInsn(ALOAD, 1);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"getSymbolTable\", \"()\" + desc(SymbolTable.class));\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanFieldSymbol\", \"([C\" + desc(SymbolTable.class) + \")Ljava/lang/String;\");\r\n            mw.visitInsn(DUP);\r\n            mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm_enumName\"));\r\n            mw.visitJumpInsn(IFNULL, enumNull_);\r\n            mw.visitVarInsn(ALOAD, context.var(fieldInfo.name + \"_asm_enumName\"));\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, type(String.class), \"length\", \"()I\");\r\n            mw.visitJumpInsn(IFEQ, enumNull_);\r\n            mw.visitVarInsn(ALOAD, context.var(fieldInfo.name + \"_asm_enumName\"));\r\n            mw.visitMethodInsn(INVOKESTATIC, type(fieldClass), \"valueOf\", \"(Ljava/lang/String;)\" + desc(fieldClass));\r\n            mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n            mw.visitLabel(enumNull_);\r\n        } else if (Collection.class.isAssignableFrom(fieldClass)) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_prefix__\", \"[C\");\r\n            Class<?> itemClass = TypeUtils.getCollectionItemClass(fieldType);\r\n            if (itemClass == String.class) {\r\n                // cast\r\n                mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldClass)));\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"scanFieldStringArray\", \"([CLjava/lang/Class;)\" + desc(Collection.class));\r\n                mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n            } else {\r\n                _deserialze_list_obj(context, mw, reset_, fieldInfo, fieldClass, itemClass, i);\r\n                if (i == fieldListSize - 1) {\r\n                    _deserialize_endCheck(context, mw, reset_);\r\n                }\r\n                continue;\r\n            }\r\n        } else {\r\n            _deserialze_obj(context, mw, reset_, fieldInfo, fieldClass, i);\r\n            if (i == fieldListSize - 1) {\r\n                _deserialize_endCheck(context, mw, reset_);\r\n            }\r\n            continue;\r\n        }\r\n        mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n        mw.visitFieldInsn(GETFIELD, JSONLexerBase, \"matchStat\", \"I\");\r\n        Label flag_ = new Label();\r\n        // mw.visitInsn(DUP);\r\n        mw.visitJumpInsn(IFLE, flag_);\r\n        _setFlag(mw, context, i);\r\n        mw.visitLabel(flag_);\r\n        mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n        mw.visitFieldInsn(GETFIELD, JSONLexerBase, \"matchStat\", \"I\");\r\n        mw.visitInsn(DUP);\r\n        mw.visitVarInsn(ISTORE, context.var(\"matchStat\"));\r\n        mw.visitLdcInsn(com.alibaba.fastjson.parser.JSONLexerBase.NOT_MATCH);\r\n        mw.visitJumpInsn(IF_ICMPEQ, reset_);\r\n        mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n        mw.visitFieldInsn(GETFIELD, JSONLexerBase, \"matchStat\", \"I\");\r\n        mw.visitJumpInsn(IFLE, notMatch_);\r\n        // increment matchedCount\r\n        mw.visitVarInsn(ILOAD, context.var(\"matchedCount\"));\r\n        mw.visitInsn(ICONST_1);\r\n        mw.visitInsn(IADD);\r\n        mw.visitVarInsn(ISTORE, context.var(\"matchedCount\"));\r\n        mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n        mw.visitFieldInsn(GETFIELD, JSONLexerBase, \"matchStat\", \"I\");\r\n        mw.visitLdcInsn(com.alibaba.fastjson.parser.JSONLexerBase.END);\r\n        mw.visitJumpInsn(IF_ICMPEQ, end_);\r\n        mw.visitLabel(notMatch_);\r\n        if (i == fieldListSize - 1) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n            mw.visitFieldInsn(GETFIELD, JSONLexerBase, \"matchStat\", \"I\");\r\n            mw.visitLdcInsn(com.alibaba.fastjson.parser.JSONLexerBase.END);\r\n            mw.visitJumpInsn(IF_ICMPNE, reset_);\r\n        }\r\n    }\r\n    // endFor\r\n    mw.visitLabel(end_);\r\n    if (!context.clazz.isInterface() && !Modifier.isAbstract(context.clazz.getModifiers())) {\r\n        _batchSet(context, mw);\r\n    }\r\n    mw.visitLabel(return_);\r\n    _setContext(context, mw);\r\n    mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n    Method buildMethod = context.beanInfo.buildMethod;\r\n    if (buildMethod != null) {\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, type(context.getInstClass()), buildMethod.getName(), \"()\" + desc(buildMethod.getReturnType()));\r\n    }\r\n    mw.visitInsn(ARETURN);\r\n    mw.visitLabel(reset_);\r\n    _batchSet(context, mw);\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitVarInsn(ALOAD, 2);\r\n    mw.visitVarInsn(ALOAD, 3);\r\n    mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n    mw.visitVarInsn(ILOAD, 4);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, type(JavaBeanDeserializer.class), \"parseRest\", \"(L\" + DefaultJSONParser + \";Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/Object;I)Ljava/lang/Object;\");\r\n    // cast\r\n    mw.visitTypeInsn(CHECKCAST, type(context.clazz));\r\n    mw.visitInsn(ARETURN);\r\n    mw.visitLabel(super_);\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitVarInsn(ALOAD, 2);\r\n    mw.visitVarInsn(ALOAD, 3);\r\n    mw.visitVarInsn(ILOAD, 4);\r\n    // \r\n    mw.// \r\n    visitMethodInsn(// \r\n    INVOKESPECIAL, // \r\n    type(JavaBeanDeserializer.class), // \r\n    \"deserialze\", \"(L\" + DefaultJSONParser + \";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\");\r\n    mw.visitInsn(ARETURN);\r\n    mw.visitMaxs(6, context.variantIndex);\r\n    mw.visitEnd();\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._deserialze(com.alibaba.fastjson.asm.ClassWriter, com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "defineVarLexer", "return_type": "void", "signature": "defineVarLexer(Context, MethodVisitor)", "body_content": "{\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitFieldInsn(GETFIELD, DefaultJSONParser, \"lexer\", desc(JSONLexer.class));\r\n    // cast\r\n    mw.visitTypeInsn(CHECKCAST, JSONLexerBase);\r\n    mw.visitVarInsn(ASTORE, context.var(\"lexer\"));\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.defineVarLexer", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.defineVarLexer(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_createInstance", "return_type": "void", "signature": "_createInstance(Context, MethodVisitor)", "body_content": "{\r\n    JavaBeanInfo beanInfo = context.beanInfo;\r\n    Constructor<?> defaultConstructor = beanInfo.defaultConstructor;\r\n    if (Modifier.isPublic(defaultConstructor.getModifiers())) {\r\n        mw.visitTypeInsn(NEW, type(context.getInstClass()));\r\n        mw.visitInsn(DUP);\r\n        mw.visitMethodInsn(INVOKESPECIAL, type(defaultConstructor.getDeclaringClass()), \"<init>\", \"()V\");\r\n        mw.visitVarInsn(ASTORE, context.var(\"instance\"));\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitVarInsn(ALOAD, 1);\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitFieldInsn(GETFIELD, type(JavaBeanDeserializer.class), \"clazz\", \"Ljava/lang/Class;\");\r\n        mw.visitMethodInsn(INVOKESPECIAL, type(JavaBeanDeserializer.class), \"createInstance\", \"(L\" + DefaultJSONParser + \";Ljava/lang/reflect/Type;)Ljava/lang/Object;\");\r\n        // cast\r\n        mw.visitTypeInsn(CHECKCAST, type(context.getInstClass()));\r\n        mw.visitVarInsn(ASTORE, context.var(\"instance\"));\r\n    }\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._createInstance", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._createInstance(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_batchSet", "return_type": "void", "signature": "_batchSet(Context, MethodVisitor)", "body_content": "{\r\n    _batchSet(context, mw, true);\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._batchSet", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._batchSet(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_batchSet", "return_type": "void", "signature": "_batchSet(Context, MethodVisitor, boolean)", "body_content": "{\r\n    for (int i = 0, size = context.fieldInfoList.length; i < size; ++i) {\r\n        Label notSet_ = new Label();\r\n        if (flag) {\r\n            _isFlag(mw, context, i, notSet_);\r\n        }\r\n        FieldInfo fieldInfo = context.fieldInfoList[i];\r\n        _loadAndSet(context, mw, fieldInfo);\r\n        if (flag) {\r\n            mw.visitLabel(notSet_);\r\n        }\r\n    }\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._batchSet", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._batchSet(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_loadAndSet", "return_type": "void", "signature": "_loadAndSet(Context, MethodVisitor, FieldInfo)", "body_content": "{\r\n    Class<?> fieldClass = fieldInfo.fieldClass;\r\n    Type fieldType = fieldInfo.fieldType;\r\n    if (fieldClass == boolean.class) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n        mw.visitVarInsn(ILOAD, context.var(fieldInfo.name + \"_asm\"));\r\n        _set(context, mw, fieldInfo);\r\n    } else if (// \r\n    fieldClass == byte.class || // \r\n    fieldClass == short.class || // \r\n    fieldClass == int.class || fieldClass == char.class) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n        mw.visitVarInsn(ILOAD, context.var(fieldInfo.name + \"_asm\"));\r\n        _set(context, mw, fieldInfo);\r\n    } else if (fieldClass == long.class) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n        mw.visitVarInsn(LLOAD, context.var(fieldInfo.name + \"_asm\", 2));\r\n        if (fieldInfo.method != null) {\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, type(context.getInstClass()), fieldInfo.method.getName(), desc(fieldInfo.method));\r\n            if (!fieldInfo.method.getReturnType().equals(Void.TYPE)) {\r\n                mw.visitInsn(POP);\r\n            }\r\n        } else {\r\n            mw.visitFieldInsn(PUTFIELD, type(fieldInfo.declaringClass), fieldInfo.field.getName(), desc(fieldInfo.fieldClass));\r\n        }\r\n    } else if (fieldClass == float.class) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n        mw.visitVarInsn(FLOAD, context.var(fieldInfo.name + \"_asm\"));\r\n        _set(context, mw, fieldInfo);\r\n    } else if (fieldClass == double.class) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n        mw.visitVarInsn(DLOAD, context.var(fieldInfo.name + \"_asm\", 2));\r\n        _set(context, mw, fieldInfo);\r\n    } else if (fieldClass == String.class) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n        mw.visitVarInsn(ALOAD, context.var(fieldInfo.name + \"_asm\"));\r\n        _set(context, mw, fieldInfo);\r\n    } else if (fieldClass.isEnum()) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n        mw.visitVarInsn(ALOAD, context.var(fieldInfo.name + \"_asm\"));\r\n        _set(context, mw, fieldInfo);\r\n    } else if (Collection.class.isAssignableFrom(fieldClass)) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n        Type itemType = TypeUtils.getCollectionItemClass(fieldType);\r\n        if (itemType == String.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(fieldInfo.name + \"_asm\"));\r\n            // cast\r\n            mw.visitTypeInsn(CHECKCAST, type(fieldClass));\r\n        } else {\r\n            mw.visitVarInsn(ALOAD, context.var(fieldInfo.name + \"_asm\"));\r\n        }\r\n        _set(context, mw, fieldInfo);\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n        mw.visitVarInsn(ALOAD, context.var(fieldInfo.name + \"_asm\"));\r\n        _set(context, mw, fieldInfo);\r\n    }\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._loadAndSet", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._loadAndSet(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_set", "return_type": "void", "signature": "_set(Context, MethodVisitor, FieldInfo)", "body_content": "{\r\n    if (fieldInfo.method != null) {\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, type(fieldInfo.declaringClass), fieldInfo.method.getName(), desc(fieldInfo.method));\r\n        if (!fieldInfo.method.getReturnType().equals(Void.TYPE)) {\r\n            mw.visitInsn(POP);\r\n        }\r\n    } else {\r\n        mw.visitFieldInsn(PUTFIELD, type(fieldInfo.declaringClass), fieldInfo.field.getName(), desc(fieldInfo.fieldClass));\r\n    }\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._set", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._set(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_setContext", "return_type": "void", "signature": "_setContext(Context, MethodVisitor)", "body_content": "{\r\n    // parser\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitVarInsn(ALOAD, context.var(\"context\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"setContext\", \"(\" + desc(ParseContext.class) + \")V\");\r\n    Label endIf_ = new Label();\r\n    mw.visitVarInsn(ALOAD, context.var(\"childContext\"));\r\n    mw.visitJumpInsn(IFNULL, endIf_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"childContext\"));\r\n    mw.visitVarInsn(ALOAD, context.var(\"instance\"));\r\n    mw.visitFieldInsn(PUTFIELD, type(ParseContext.class), \"object\", \"Ljava/lang/Object;\");\r\n    mw.visitLabel(endIf_);\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._setContext", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._setContext(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_deserialize_endCheck", "return_type": "void", "signature": "_deserialize_endCheck(Context, MethodVisitor, Label)", "body_content": "{\r\n    mw.visitIntInsn(ILOAD, context.var(\"matchedCount\"));\r\n    mw.visitJumpInsn(IFLE, reset_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"token\", \"()I\");\r\n    mw.visitLdcInsn(JSONToken.RBRACE);\r\n    mw.visitJumpInsn(IF_ICMPNE, reset_);\r\n    // mw.visitLabel(nextToken_);\r\n    _quickNextTokenComma(context, mw);\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._deserialize_endCheck", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._deserialize_endCheck(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.asm.Label)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_deserialze_list_obj", "return_type": "void", "signature": "_deserialze_list_obj(Context, MethodVisitor, Label, FieldInfo, Class, Class, int)", "body_content": "{\r\n    Label _end_if = new Label();\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"matchField\", \"([C)Z\");\r\n    mw.visitJumpInsn(IFEQ, _end_if);\r\n    _setFlag(mw, context, i);\r\n    Label valueNotNull_ = new Label();\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"token\", \"()I\");\r\n    mw.visitLdcInsn(JSONToken.NULL);\r\n    mw.visitJumpInsn(IF_ICMPNE, valueNotNull_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(JSONToken.COMMA);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"nextToken\", \"(I)V\");\r\n    mw.visitJumpInsn(GOTO, _end_if);\r\n    // loop_end_\r\n    mw.visitLabel(valueNotNull_);\r\n    Label storeCollection_ = new Label(), endSet_ = new Label(), lbacketNormal_ = new Label();\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"token\", \"()I\");\r\n    mw.visitLdcInsn(JSONToken.SET);\r\n    mw.visitJumpInsn(IF_ICMPNE, endSet_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(JSONToken.LBRACKET);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"nextToken\", \"(I)V\");\r\n    _newCollection(mw, fieldClass, i, true);\r\n    mw.visitJumpInsn(GOTO, storeCollection_);\r\n    mw.visitLabel(endSet_);\r\n    // if (lexer.token() != JSONToken.LBRACKET) reset\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"token\", \"()I\");\r\n    mw.visitLdcInsn(JSONToken.LBRACKET);\r\n    mw.visitJumpInsn(IF_ICMPEQ, lbacketNormal_);\r\n    // if (lexer.token() == JSONToken.LBRACE) reset\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"token\", \"()I\");\r\n    mw.visitLdcInsn(JSONToken.LBRACE);\r\n    mw.visitJumpInsn(IF_ICMPNE, reset_);\r\n    _newCollection(mw, fieldClass, i, false);\r\n    mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n    _getCollectionFieldItemDeser(context, mw, fieldInfo, itemType);\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(itemType)));\r\n    mw.visitInsn(ICONST_0);\r\n    mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\");\r\n    mw.visitMethodInsn(INVOKEINTERFACE, type(ObjectDeserializer.class), \"deserialze\", \"(L\" + DefaultJSONParser + \";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;\");\r\n    mw.visitVarInsn(ASTORE, context.var(\"list_item_value\"));\r\n    mw.visitVarInsn(ALOAD, context.var(fieldInfo.name + \"_asm\"));\r\n    mw.visitVarInsn(ALOAD, context.var(\"list_item_value\"));\r\n    if (fieldClass.isInterface()) {\r\n        mw.visitMethodInsn(INVOKEINTERFACE, type(fieldClass), \"add\", \"(Ljava/lang/Object;)Z\");\r\n    } else {\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, type(fieldClass), \"add\", \"(Ljava/lang/Object;)Z\");\r\n    }\r\n    mw.visitInsn(POP);\r\n    mw.visitJumpInsn(GOTO, _end_if);\r\n    mw.visitLabel(lbacketNormal_);\r\n    _newCollection(mw, fieldClass, i, false);\r\n    mw.visitLabel(storeCollection_);\r\n    mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n    boolean isPrimitive = ParserConfig.isPrimitive(fieldInfo.fieldClass);\r\n    _getCollectionFieldItemDeser(context, mw, fieldInfo, itemType);\r\n    if (isPrimitive) {\r\n        mw.visitMethodInsn(INVOKEINTERFACE, type(ObjectDeserializer.class), \"getFastMatchToken\", \"()I\");\r\n        mw.visitVarInsn(ISTORE, context.var(\"fastMatchToken\"));\r\n        mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n        mw.visitVarInsn(ILOAD, context.var(\"fastMatchToken\"));\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"nextToken\", \"(I)V\");\r\n    } else {\r\n        mw.visitInsn(POP);\r\n        mw.visitLdcInsn(JSONToken.LBRACE);\r\n        mw.visitVarInsn(ISTORE, context.var(\"fastMatchToken\"));\r\n        _quickNextToken(context, mw, JSONToken.LBRACE);\r\n    }\r\n    {\r\n        // setContext\r\n        mw.visitVarInsn(ALOAD, 1);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"getContext\", \"()\" + desc(ParseContext.class));\r\n        mw.visitVarInsn(ASTORE, context.var(\"listContext\"));\r\n        // parser\r\n        mw.visitVarInsn(ALOAD, 1);\r\n        mw.visitVarInsn(ALOAD, context.var(fieldInfo.name + \"_asm\"));\r\n        mw.visitLdcInsn(fieldInfo.name);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"setContext\", \"(Ljava/lang/Object;Ljava/lang/Object;)\" + desc(ParseContext.class));\r\n        mw.visitInsn(POP);\r\n    }\r\n    Label loop_ = new Label();\r\n    Label loop_end_ = new Label();\r\n    // for (;;) {\r\n    mw.visitInsn(ICONST_0);\r\n    mw.visitVarInsn(ISTORE, context.var(\"i\"));\r\n    mw.visitLabel(loop_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"token\", \"()I\");\r\n    mw.visitLdcInsn(JSONToken.RBRACKET);\r\n    mw.visitJumpInsn(IF_ICMPEQ, loop_end_);\r\n    // Object value = itemDeserializer.deserialze(parser, null);\r\n    // array.add(value);\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_list_item_deser__\", desc(ObjectDeserializer.class));\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(itemType)));\r\n    mw.visitVarInsn(ILOAD, context.var(\"i\"));\r\n    mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\");\r\n    mw.visitMethodInsn(INVOKEINTERFACE, type(ObjectDeserializer.class), \"deserialze\", \"(L\" + DefaultJSONParser + \";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;\");\r\n    mw.visitVarInsn(ASTORE, context.var(\"list_item_value\"));\r\n    mw.visitIincInsn(context.var(\"i\"), 1);\r\n    mw.visitVarInsn(ALOAD, context.var(fieldInfo.name + \"_asm\"));\r\n    mw.visitVarInsn(ALOAD, context.var(\"list_item_value\"));\r\n    if (fieldClass.isInterface()) {\r\n        mw.visitMethodInsn(INVOKEINTERFACE, type(fieldClass), \"add\", \"(Ljava/lang/Object;)Z\");\r\n    } else {\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, type(fieldClass), \"add\", \"(Ljava/lang/Object;)Z\");\r\n    }\r\n    mw.visitInsn(POP);\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitVarInsn(ALOAD, context.var(fieldInfo.name + \"_asm\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"checkListResolve\", \"(Ljava/util/Collection;)V\");\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"token\", \"()I\");\r\n    mw.visitLdcInsn(JSONToken.COMMA);\r\n    mw.visitJumpInsn(IF_ICMPNE, loop_);\r\n    if (isPrimitive) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n        mw.visitVarInsn(ILOAD, context.var(\"fastMatchToken\"));\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"nextToken\", \"(I)V\");\r\n    } else {\r\n        _quickNextToken(context, mw, JSONToken.LBRACE);\r\n    }\r\n    mw.visitJumpInsn(GOTO, loop_);\r\n    mw.visitLabel(loop_end_);\r\n    // mw.visitVarInsn(ASTORE, context.var(\"context\"));\r\n    // parser.setContext(context);\r\n    {\r\n        // setContext\r\n        // parser\r\n        mw.visitVarInsn(ALOAD, 1);\r\n        mw.visitVarInsn(ALOAD, context.var(\"listContext\"));\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"setContext\", \"(\" + desc(ParseContext.class) + \")V\");\r\n    }\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"token\", \"()I\");\r\n    mw.visitLdcInsn(JSONToken.RBRACKET);\r\n    mw.visitJumpInsn(IF_ICMPNE, reset_);\r\n    _quickNextTokenComma(context, mw);\r\n    // lexer.nextToken(JSONToken.COMMA);\r\n    mw.visitLabel(_end_if);\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._deserialze_list_obj", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._deserialze_list_obj(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.asm.Label, com.alibaba.fastjson.util.FieldInfo, java.lang.Class<?>, java.lang.Class<?>, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_quickNextToken", "return_type": "void", "signature": "_quickNextToken(Context, MethodVisitor, int)", "body_content": "{\r\n    Label quickElse_ = new Label(), quickEnd_ = new Label();\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"getCurrent\", \"()C\");\r\n    if (token == JSONToken.LBRACE) {\r\n        mw.visitVarInsn(BIPUSH, '{');\r\n    } else if (token == JSONToken.LBRACKET) {\r\n        mw.visitVarInsn(BIPUSH, '[');\r\n    } else {\r\n        throw new IllegalStateException();\r\n    }\r\n    mw.visitJumpInsn(IF_ICMPNE, quickElse_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"next\", \"()C\");\r\n    mw.visitInsn(POP);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(token);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"setToken\", \"(I)V\");\r\n    mw.visitJumpInsn(GOTO, quickEnd_);\r\n    mw.visitLabel(quickElse_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(token);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"nextToken\", \"(I)V\");\r\n    mw.visitLabel(quickEnd_);\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._quickNextToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._quickNextToken(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_quickNextTokenComma", "return_type": "void", "signature": "_quickNextTokenComma(Context, MethodVisitor)", "body_content": "{\r\n    Label quickElse_ = new Label(), quickElseIf0_ = new Label(), quickElseIf1_ = new Label(), quickElseIf2_ = new Label(), quickEnd_ = new Label();\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"getCurrent\", \"()C\");\r\n    mw.visitInsn(DUP);\r\n    mw.visitVarInsn(ISTORE, context.var(\"ch\"));\r\n    mw.visitVarInsn(BIPUSH, ',');\r\n    mw.visitJumpInsn(IF_ICMPNE, quickElseIf0_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"next\", \"()C\");\r\n    mw.visitInsn(POP);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(JSONToken.COMMA);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"setToken\", \"(I)V\");\r\n    mw.visitJumpInsn(GOTO, quickEnd_);\r\n    mw.visitLabel(quickElseIf0_);\r\n    mw.visitVarInsn(ILOAD, context.var(\"ch\"));\r\n    mw.visitVarInsn(BIPUSH, '}');\r\n    mw.visitJumpInsn(IF_ICMPNE, quickElseIf1_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"next\", \"()C\");\r\n    mw.visitInsn(POP);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(JSONToken.RBRACE);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"setToken\", \"(I)V\");\r\n    mw.visitJumpInsn(GOTO, quickEnd_);\r\n    mw.visitLabel(quickElseIf1_);\r\n    mw.visitVarInsn(ILOAD, context.var(\"ch\"));\r\n    mw.visitVarInsn(BIPUSH, ']');\r\n    mw.visitJumpInsn(IF_ICMPNE, quickElseIf2_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"next\", \"()C\");\r\n    mw.visitInsn(POP);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(JSONToken.RBRACKET);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"setToken\", \"(I)V\");\r\n    mw.visitJumpInsn(GOTO, quickEnd_);\r\n    mw.visitLabel(quickElseIf2_);\r\n    mw.visitVarInsn(ILOAD, context.var(\"ch\"));\r\n    mw.visitVarInsn(BIPUSH, JSONLexer.EOI);\r\n    mw.visitJumpInsn(IF_ICMPNE, quickElse_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitLdcInsn(JSONToken.EOF);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"setToken\", \"(I)V\");\r\n    mw.visitJumpInsn(GOTO, quickEnd_);\r\n    mw.visitLabel(quickElse_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"nextToken\", \"()V\");\r\n    mw.visitLabel(quickEnd_);\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._quickNextTokenComma", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._quickNextTokenComma(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_getCollectionFieldItemDeser", "return_type": "void", "signature": "_getCollectionFieldItemDeser(Context, MethodVisitor, FieldInfo, Class)", "body_content": "{\r\n    Label notNull_ = new Label();\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_list_item_deser__\", desc(ObjectDeserializer.class));\r\n    mw.visitJumpInsn(IFNONNULL, notNull_);\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"getConfig\", \"()\" + desc(ParserConfig.class));\r\n    mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(itemType)));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, type(ParserConfig.class), \"getDeserializer\", \"(Ljava/lang/reflect/Type;)\" + desc(ObjectDeserializer.class));\r\n    mw.visitFieldInsn(PUTFIELD, context.className, fieldInfo.name + \"_asm_list_item_deser__\", desc(ObjectDeserializer.class));\r\n    mw.visitLabel(notNull_);\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_list_item_deser__\", desc(ObjectDeserializer.class));\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._getCollectionFieldItemDeser", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._getCollectionFieldItemDeser(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, java.lang.Class<?>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_newCollection", "return_type": "void", "signature": "_newCollection(MethodVisitor, Class, int, boolean)", "body_content": "{\r\n    if (fieldClass.isAssignableFrom(ArrayList.class) && !set) {\r\n        mw.visitTypeInsn(NEW, \"java/util/ArrayList\");\r\n        mw.visitInsn(DUP);\r\n        mw.visitMethodInsn(INVOKESPECIAL, \"java/util/ArrayList\", \"<init>\", \"()V\");\r\n    } else if (fieldClass.isAssignableFrom(LinkedList.class) && !set) {\r\n        mw.visitTypeInsn(NEW, type(LinkedList.class));\r\n        mw.visitInsn(DUP);\r\n        mw.visitMethodInsn(INVOKESPECIAL, type(LinkedList.class), \"<init>\", \"()V\");\r\n    } else if (fieldClass.isAssignableFrom(HashSet.class)) {\r\n        mw.visitTypeInsn(NEW, type(HashSet.class));\r\n        mw.visitInsn(DUP);\r\n        mw.visitMethodInsn(INVOKESPECIAL, type(HashSet.class), \"<init>\", \"()V\");\r\n    } else if (fieldClass.isAssignableFrom(TreeSet.class)) {\r\n        mw.visitTypeInsn(NEW, type(TreeSet.class));\r\n        mw.visitInsn(DUP);\r\n        mw.visitMethodInsn(INVOKESPECIAL, type(TreeSet.class), \"<init>\", \"()V\");\r\n    } else if (fieldClass.isAssignableFrom(LinkedHashSet.class)) {\r\n        mw.visitTypeInsn(NEW, type(LinkedHashSet.class));\r\n        mw.visitInsn(DUP);\r\n        mw.visitMethodInsn(INVOKESPECIAL, type(LinkedHashSet.class), \"<init>\", \"()V\");\r\n    } else if (set) {\r\n        mw.visitTypeInsn(NEW, type(HashSet.class));\r\n        mw.visitInsn(DUP);\r\n        mw.visitMethodInsn(INVOKESPECIAL, type(HashSet.class), \"<init>\", \"()V\");\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitLdcInsn(i);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, type(JavaBeanDeserializer.class), \"getFieldType\", \"(I)Ljava/lang/reflect/Type;\");\r\n        mw.visitMethodInsn(INVOKESTATIC, type(TypeUtils.class), \"createCollection\", \"(Ljava/lang/reflect/Type;)Ljava/util/Collection;\");\r\n    }\r\n    // cast\r\n    mw.visitTypeInsn(CHECKCAST, type(fieldClass));\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._newCollection", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._newCollection(com.alibaba.fastjson.asm.MethodVisitor, java.lang.Class<?>, int, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_deserialze_obj", "return_type": "void", "signature": "_deserialze_obj(Context, MethodVisitor, Label, FieldInfo, Class, int)", "body_content": "{\r\n    Label matched_ = new Label();\r\n    Label _end_if = new Label();\r\n    mw.visitVarInsn(ALOAD, context.var(\"lexer\"));\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_prefix__\", \"[C\");\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, \"matchField\", \"([C)Z\");\r\n    mw.visitJumpInsn(IFNE, matched_);\r\n    mw.visitInsn(ACONST_NULL);\r\n    mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n    mw.visitJumpInsn(GOTO, _end_if);\r\n    mw.visitLabel(matched_);\r\n    _setFlag(mw, context, i);\r\n    // increment matchedCount\r\n    mw.visitVarInsn(ILOAD, context.var(\"matchedCount\"));\r\n    mw.visitInsn(ICONST_1);\r\n    mw.visitInsn(IADD);\r\n    mw.visitVarInsn(ISTORE, context.var(\"matchedCount\"));\r\n    _deserObject(context, mw, fieldInfo, fieldClass, i);\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"getResolveStatus\", \"()I\");\r\n    mw.visitLdcInsn(com.alibaba.fastjson.parser.DefaultJSONParser.NeedToResolve);\r\n    mw.visitJumpInsn(IF_ICMPNE, _end_if);\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"getLastResolveTask\", \"()\" + desc(ResolveTask.class));\r\n    mw.visitVarInsn(ASTORE, context.var(\"resolveTask\"));\r\n    mw.visitVarInsn(ALOAD, context.var(\"resolveTask\"));\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"getContext\", \"()\" + desc(ParseContext.class));\r\n    mw.visitFieldInsn(PUTFIELD, type(ResolveTask.class), \"ownerContext\", desc(ParseContext.class));\r\n    mw.visitVarInsn(ALOAD, context.var(\"resolveTask\"));\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitLdcInsn(fieldInfo.name);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, type(JavaBeanDeserializer.class), \"getFieldDeserializer\", \"(Ljava/lang/String;)\" + desc(FieldDeserializer.class));\r\n    mw.visitFieldInsn(PUTFIELD, type(ResolveTask.class), \"fieldDeserializer\", desc(FieldDeserializer.class));\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitLdcInsn(com.alibaba.fastjson.parser.DefaultJSONParser.NONE);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"setResolveStatus\", \"(I)V\");\r\n    mw.visitLabel(_end_if);\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._deserialze_obj", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._deserialze_obj(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.asm.Label, com.alibaba.fastjson.util.FieldInfo, java.lang.Class<?>, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_deserObject", "return_type": "void", "signature": "_deserObject(Context, MethodVisitor, FieldInfo, Class, int)", "body_content": "{\r\n    _getFieldDeser(context, mw, fieldInfo);\r\n    Label instanceOfElse_ = new Label(), instanceOfEnd_ = new Label();\r\n    if ((fieldInfo.parserFeatures & Feature.SupportArrayToBean.mask) != 0) {\r\n        mw.visitInsn(DUP);\r\n        mw.visitTypeInsn(INSTANCEOF, type(JavaBeanDeserializer.class));\r\n        mw.visitJumpInsn(IFEQ, instanceOfElse_);\r\n        // cast\r\n        mw.visitTypeInsn(CHECKCAST, type(JavaBeanDeserializer.class));\r\n        mw.visitVarInsn(ALOAD, 1);\r\n        if (fieldInfo.fieldType instanceof Class) {\r\n            mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldInfo.fieldClass)));\r\n        } else {\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitLdcInsn(i);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, type(JavaBeanDeserializer.class), \"getFieldType\", \"(I)Ljava/lang/reflect/Type;\");\r\n        }\r\n        mw.visitLdcInsn(fieldInfo.name);\r\n        mw.visitLdcInsn(fieldInfo.parserFeatures);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, type(JavaBeanDeserializer.class), \"deserialze\", \"(L\" + DefaultJSONParser + \";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\");\r\n        // cast\r\n        mw.visitTypeInsn(CHECKCAST, type(fieldClass));\r\n        mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n        mw.visitJumpInsn(GOTO, instanceOfEnd_);\r\n        mw.visitLabel(instanceOfElse_);\r\n    }\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    if (fieldInfo.fieldType instanceof Class) {\r\n        mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldInfo.fieldClass)));\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitLdcInsn(i);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, type(JavaBeanDeserializer.class), \"getFieldType\", \"(I)Ljava/lang/reflect/Type;\");\r\n    }\r\n    mw.visitLdcInsn(fieldInfo.name);\r\n    mw.visitMethodInsn(INVOKEINTERFACE, type(ObjectDeserializer.class), \"deserialze\", \"(L\" + DefaultJSONParser + \";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;\");\r\n    // cast\r\n    mw.visitTypeInsn(CHECKCAST, type(fieldClass));\r\n    mw.visitVarInsn(ASTORE, context.var(fieldInfo.name + \"_asm\"));\r\n    mw.visitLabel(instanceOfEnd_);\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._deserObject", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._deserObject(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, java.lang.Class<?>, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_getFieldDeser", "return_type": "void", "signature": "_getFieldDeser(Context, MethodVisitor, FieldInfo)", "body_content": "{\r\n    Label notNull_ = new Label();\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_deser__\", desc(ObjectDeserializer.class));\r\n    mw.visitJumpInsn(IFNONNULL, notNull_);\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, DefaultJSONParser, \"getConfig\", \"()\" + desc(ParserConfig.class));\r\n    mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldInfo.fieldClass)));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, type(ParserConfig.class), \"getDeserializer\", \"(Ljava/lang/reflect/Type;)\" + desc(ObjectDeserializer.class));\r\n    mw.visitFieldInsn(PUTFIELD, context.className, fieldInfo.name + \"_asm_deser__\", desc(ObjectDeserializer.class));\r\n    mw.visitLabel(notNull_);\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_deser__\", desc(ObjectDeserializer.class));\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._getFieldDeser", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._getFieldDeser(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getInstClass", "return_type": "Class<?>", "signature": "getInstClass()", "body_content": "{\r\n    Class<?> instClass = beanInfo.builderClass;\r\n    if (instClass == null) {\r\n        instClass = clazz;\r\n    }\r\n    return instClass;\r\n}", "class_name": "ASMDeserializerFactory.Context", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context.getInstClass", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context.getInstClass()", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "var", "return_type": "int", "signature": "var(String, int)", "body_content": "{\r\n    Integer i = variants.get(name);\r\n    if (i == null) {\r\n        variants.put(name, variantIndex);\r\n        variantIndex += increment;\r\n    }\r\n    i = variants.get(name);\r\n    return i.intValue();\r\n}", "class_name": "ASMDeserializerFactory.Context", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context.var", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context.var(java.lang.String, int)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "var", "return_type": "int", "signature": "var(String)", "body_content": "{\r\n    Integer i = variants.get(name);\r\n    if (i == null) {\r\n        variants.put(name, variantIndex++);\r\n    }\r\n    i = variants.get(name);\r\n    return i.intValue();\r\n}", "class_name": "ASMDeserializerFactory.Context", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context.var", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context.var(java.lang.String)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "_init", "return_type": "void", "signature": "_init(ClassWriter, Context)", "body_content": "{\r\n    for (int i = 0, size = context.fieldInfoList.length; i < size; ++i) {\r\n        FieldInfo fieldInfo = context.fieldInfoList[i];\r\n        FieldWriter fw = new FieldWriter(cw, ACC_PUBLIC, fieldInfo.name + \"_asm_prefix__\", \"[C\");\r\n        fw.visitEnd();\r\n    }\r\n    for (int i = 0, size = context.fieldInfoList.length; i < size; ++i) {\r\n        FieldInfo fieldInfo = context.fieldInfoList[i];\r\n        Class<?> fieldClass = fieldInfo.fieldClass;\r\n        if (fieldClass.isPrimitive()) {\r\n            continue;\r\n        }\r\n        if (Collection.class.isAssignableFrom(fieldClass)) {\r\n            FieldWriter fw = new FieldWriter(cw, ACC_PUBLIC, fieldInfo.name + \"_asm_list_item_deser__\", desc(ObjectDeserializer.class));\r\n            fw.visitEnd();\r\n        } else {\r\n            FieldWriter fw = new FieldWriter(cw, ACC_PUBLIC, fieldInfo.name + \"_asm_deser__\", desc(ObjectDeserializer.class));\r\n            fw.visitEnd();\r\n        }\r\n    }\r\n    MethodVisitor mw = new MethodWriter(cw, ACC_PUBLIC, \"<init>\", \"(\" + desc(ParserConfig.class) + desc(JavaBeanInfo.class) + \")V\", null, null);\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitVarInsn(ALOAD, 2);\r\n    mw.visitMethodInsn(INVOKESPECIAL, type(JavaBeanDeserializer.class), \"<init>\", \"(\" + desc(ParserConfig.class) + desc(JavaBeanInfo.class) + \")V\");\r\n    // init fieldNamePrefix\r\n    for (int i = 0, size = context.fieldInfoList.length; i < size; ++i) {\r\n        FieldInfo fieldInfo = context.fieldInfoList[i];\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        // public char[] toCharArray()\r\n        mw.visitLdcInsn(\"\\\"\" + fieldInfo.name + \"\\\":\");\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/String\", \"toCharArray\", \"()[C\");\r\n        mw.visitFieldInsn(PUTFIELD, context.className, fieldInfo.name + \"_asm_prefix__\", \"[C\");\r\n    }\r\n    mw.visitInsn(RETURN);\r\n    mw.visitMaxs(4, 4);\r\n    mw.visitEnd();\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._init", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._init(com.alibaba.fastjson.asm.ClassWriter, com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_createInstance", "return_type": "void", "signature": "_createInstance(ClassWriter, Context)", "body_content": "{\r\n    Constructor<?> defaultConstructor = context.beanInfo.defaultConstructor;\r\n    if (!Modifier.isPublic(defaultConstructor.getModifiers())) {\r\n        return;\r\n    }\r\n    MethodVisitor mw = new MethodWriter(cw, ACC_PUBLIC, \"createInstance\", \"(L\" + DefaultJSONParser + \";Ljava/lang/reflect/Type;)Ljava/lang/Object;\", null, null);\r\n    mw.visitTypeInsn(NEW, type(context.getInstClass()));\r\n    mw.visitInsn(DUP);\r\n    mw.visitMethodInsn(INVOKESPECIAL, type(context.getInstClass()), \"<init>\", \"()V\");\r\n    mw.visitInsn(ARETURN);\r\n    mw.visitMaxs(3, 3);\r\n    mw.visitEnd();\r\n}", "class_name": "ASMDeserializerFactory", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._createInstance", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory._createInstance(com.alibaba.fastjson.asm.ClassWriter, com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "var", "return_type": "int", "signature": "var(String)", "body_content": "{\r\n    Integer i = variants.get(name);\r\n    if (i == null) {\r\n        variants.put(name, variantIndex++);\r\n    }\r\n    i = variants.get(name);\r\n    return i.intValue();\r\n}", "class_name": "ASMSerializerFactory.Context", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory.Context.var", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory.Context.var(java.lang.String)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "var", "return_type": "int", "signature": "var(String, int)", "body_content": "{\r\n    Integer i = variants.get(name);\r\n    if (i == null) {\r\n        variants.put(name, variantIndex);\r\n        variantIndex += increment;\r\n    }\r\n    i = variants.get(name);\r\n    return i.intValue();\r\n}", "class_name": "ASMSerializerFactory.Context", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory.Context.var", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory.Context.var(java.lang.String, int)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "getFieldOrinal", "return_type": "int", "signature": "getFieldOrinal(String)", "body_content": "{\r\n    int fieldIndex = -1;\r\n    for (int i = 0, size = getters.length; i < size; ++i) {\r\n        FieldInfo item = getters[i];\r\n        if (item.name.equals(name)) {\r\n            fieldIndex = i;\r\n            break;\r\n        }\r\n    }\r\n    return fieldIndex;\r\n}", "class_name": "ASMSerializerFactory.Context", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory.Context.getFieldOrinal", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory.Context.getFieldOrinal(java.lang.String)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "createJavaBeanSerializer", "return_type": "JavaBeanSerializer", "signature": "createJavaBeanSerializer(SerializeBeanInfo)", "body_content": "{\r\n    Class<?> clazz = beanInfo.beanType;\r\n    if (clazz.isPrimitive()) {\r\n        throw new JSONException(\"unsupportd class \" + clazz.getName());\r\n    }\r\n    JSONType jsonType = clazz.getAnnotation(JSONType.class);\r\n    FieldInfo[] unsortedGetters = beanInfo.fields;\r\n    ;\r\n    for (FieldInfo fieldInfo : unsortedGetters) {\r\n        if (// \r\n        fieldInfo.field == null && // \r\n        fieldInfo.method != null && fieldInfo.method.getDeclaringClass().isInterface()) {\r\n            return new JavaBeanSerializer(clazz);\r\n        }\r\n    }\r\n    FieldInfo[] getters = beanInfo.sortedFields;\r\n    boolean nativeSorted = beanInfo.sortedFields == beanInfo.fields;\r\n    if (getters.length > 256) {\r\n        return new JavaBeanSerializer(clazz);\r\n    }\r\n    for (FieldInfo getter : getters) {\r\n        if (!ASMUtils.checkName(getter.getMember().getName())) {\r\n            return new JavaBeanSerializer(clazz);\r\n        }\r\n    }\r\n    String className = \"ASMSerializer_\" + seed.incrementAndGet() + \"_\" + clazz.getSimpleName();\r\n    String packageName = ASMSerializerFactory.class.getPackage().getName();\r\n    String classNameType = packageName.replace('.', '/') + \"/\" + className;\r\n    String classNameFull = packageName + \".\" + className;\r\n    ClassWriter cw = new ClassWriter();\r\n    // \r\n    cw.// \r\n    visit(// \r\n    V1_5, // \r\n    ACC_PUBLIC + ACC_SUPER, // \r\n    classNameType, // \r\n    JavaBeanSerializer, // \r\n    new String[] { ObjectSerializer });\r\n    for (FieldInfo fieldInfo : getters) {\r\n        if (// \r\n        fieldInfo.fieldClass.isPrimitive() || // \r\n        fieldInfo.fieldClass.isEnum() || fieldInfo.fieldClass == String.class) {\r\n            continue;\r\n        }\r\n        // \r\n        new FieldWriter(cw, ACC_PUBLIC, fieldInfo.name + \"_asm_fieldType\", \"Ljava/lang/reflect/Type;\").visitEnd();\r\n        if (List.class.isAssignableFrom(fieldInfo.fieldClass)) {\r\n            new FieldWriter(cw, ACC_PUBLIC, fieldInfo.name + \"_asm_list_item_ser_\", // \r\n            ObjectSerializer_desc).visitEnd();\r\n        }\r\n        // \r\n        new FieldWriter(cw, ACC_PUBLIC, fieldInfo.name + \"_asm_ser_\", ObjectSerializer_desc).visitEnd();\r\n    }\r\n    MethodVisitor mw = new MethodWriter(cw, ACC_PUBLIC, \"<init>\", \"(\" + desc(SerializeBeanInfo.class) + \")V\", null, null);\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, 1);\r\n    mw.visitMethodInsn(INVOKESPECIAL, JavaBeanSerializer, \"<init>\", \"(\" + desc(SerializeBeanInfo.class) + \")V\");\r\n    // init _asm_fieldType\r\n    for (int i = 0; i < getters.length; ++i) {\r\n        FieldInfo fieldInfo = getters[i];\r\n        if (// \r\n        fieldInfo.fieldClass.isPrimitive() || // \r\n        fieldInfo.fieldClass.isEnum() || fieldInfo.fieldClass == String.class) {\r\n            continue;\r\n        }\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        if (fieldInfo.method != null) {\r\n            mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldInfo.declaringClass)));\r\n            mw.visitLdcInsn(fieldInfo.method.getName());\r\n            mw.visitMethodInsn(INVOKESTATIC, type(ASMUtils.class), \"getMethodType\", \"(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Type;\");\r\n        } else {\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitLdcInsn(i);\r\n            mw.visitMethodInsn(INVOKESPECIAL, JavaBeanSerializer, \"getFieldType\", \"(I)Ljava/lang/reflect/Type;\");\r\n        }\r\n        mw.visitFieldInsn(PUTFIELD, classNameType, fieldInfo.name + \"_asm_fieldType\", \"Ljava/lang/reflect/Type;\");\r\n    }\r\n    mw.visitInsn(RETURN);\r\n    mw.visitMaxs(4, 4);\r\n    mw.visitEnd();\r\n    boolean DisableCircularReferenceDetect = false;\r\n    if (jsonType != null) {\r\n        for (SerializerFeature featrues : jsonType.serialzeFeatures()) {\r\n            if (featrues == SerializerFeature.DisableCircularReferenceDetect) {\r\n                DisableCircularReferenceDetect = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // 0 write\r\n    // 1 writeNormal\r\n    // 2 writeNonContext\r\n    for (int i = 0; i < 3; ++i) {\r\n        String methodName;\r\n        boolean nonContext = DisableCircularReferenceDetect;\r\n        boolean writeDirect = false;\r\n        if (i == 0) {\r\n            methodName = \"write\";\r\n            writeDirect = true;\r\n        } else if (i == 1) {\r\n            methodName = \"writeNormal\";\r\n        } else {\r\n            writeDirect = true;\r\n            nonContext = true;\r\n            methodName = \"writeDirectNonContext\";\r\n        }\r\n        Context context = new Context(getters, beanInfo, classNameType, writeDirect, nonContext);\r\n        mw = new // \r\n        MethodWriter(// \r\n        cw, // \r\n        ACC_PUBLIC, // \r\n        methodName, \"(L\" + JSONSerializer + // \r\n        \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\", // \r\n        null, // \r\n        new String[] { \"java/io/IOException\" });\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitFieldInsn(GETFIELD, JSONSerializer, \"out\", SerializeWriter_desc);\r\n        mw.visitVarInsn(ASTORE, context.var(\"out\"));\r\n        if (// \r\n        (!nativeSorted) && !context.writeDirect) {\r\n            if (jsonType == null || jsonType.alphabetic()) {\r\n                Label _else = new Label();\r\n                mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"isSortField\", \"()Z\");\r\n                mw.visitJumpInsn(IFNE, _else);\r\n                mw.visitVarInsn(ALOAD, 0);\r\n                mw.visitVarInsn(ALOAD, 1);\r\n                mw.visitVarInsn(ALOAD, 2);\r\n                mw.visitVarInsn(ALOAD, 3);\r\n                mw.visitVarInsn(ALOAD, 4);\r\n                mw.visitVarInsn(ILOAD, 5);\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, classNameType, \"writeUnsorted\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n                mw.visitInsn(RETURN);\r\n                mw.visitLabel(_else);\r\n            }\r\n        }\r\n        // isWriteDoubleQuoteDirect\r\n        if (context.writeDirect && !nonContext) {\r\n            Label _direct = new Label();\r\n            Label _directElse = new Label();\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitVarInsn(ALOAD, Context.serializer);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JavaBeanSerializer, \"writeDirect\", \"(L\" + JSONSerializer + \";)Z\");\r\n            mw.visitJumpInsn(IFNE, _directElse);\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitVarInsn(ALOAD, 1);\r\n            mw.visitVarInsn(ALOAD, 2);\r\n            mw.visitVarInsn(ALOAD, 3);\r\n            mw.visitVarInsn(ALOAD, 4);\r\n            mw.visitVarInsn(ILOAD, 5);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, classNameType, \"writeNormal\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n            mw.visitInsn(RETURN);\r\n            mw.visitLabel(_directElse);\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            mw.visitLdcInsn(SerializerFeature.DisableCircularReferenceDetect.mask);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"isEnabled\", \"(I)Z\");\r\n            mw.visitJumpInsn(IFEQ, _direct);\r\n            mw.visitVarInsn(ALOAD, 0);\r\n            mw.visitVarInsn(ALOAD, 1);\r\n            mw.visitVarInsn(ALOAD, 2);\r\n            mw.visitVarInsn(ALOAD, 3);\r\n            mw.visitVarInsn(ALOAD, 4);\r\n            mw.visitVarInsn(ILOAD, 5);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, classNameType, \"writeDirectNonContext\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n            mw.visitInsn(RETURN);\r\n            mw.visitLabel(_direct);\r\n        }\r\n        // obj\r\n        mw.visitVarInsn(ALOAD, Context.obj);\r\n        // serializer\r\n        mw.visitTypeInsn(CHECKCAST, type(clazz));\r\n        // obj\r\n        mw.visitVarInsn(ASTORE, context.var(\"entity\"));\r\n        generateWriteMethod(clazz, mw, getters, context);\r\n        mw.visitInsn(RETURN);\r\n        mw.visitMaxs(7, context.variantIndex + 2);\r\n        mw.visitEnd();\r\n    }\r\n    if (!nativeSorted) {\r\n        // sortField support\r\n        Context context = new Context(getters, beanInfo, classNameType, false, DisableCircularReferenceDetect);\r\n        mw = new MethodWriter(cw, ACC_PUBLIC, \"writeUnsorted\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\", null, new String[] { \"java/io/IOException\" });\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitFieldInsn(GETFIELD, JSONSerializer, \"out\", SerializeWriter_desc);\r\n        mw.visitVarInsn(ASTORE, context.var(\"out\"));\r\n        // obj\r\n        mw.visitVarInsn(ALOAD, Context.obj);\r\n        // serializer\r\n        mw.visitTypeInsn(CHECKCAST, type(clazz));\r\n        // obj\r\n        mw.visitVarInsn(ASTORE, context.var(\"entity\"));\r\n        generateWriteMethod(clazz, mw, unsortedGetters, context);\r\n        mw.visitInsn(RETURN);\r\n        mw.visitMaxs(7, context.variantIndex + 2);\r\n        mw.visitEnd();\r\n    }\r\n    // 0 writeAsArray\r\n    // 1 writeAsArrayNormal\r\n    // 2 writeAsArrayNonContext\r\n    for (int i = 0; i < 3; ++i) {\r\n        String methodName;\r\n        boolean nonContext = DisableCircularReferenceDetect;\r\n        boolean writeDirect = false;\r\n        if (i == 0) {\r\n            methodName = \"writeAsArray\";\r\n            writeDirect = true;\r\n        } else if (i == 1) {\r\n            methodName = \"writeAsArrayNormal\";\r\n        } else {\r\n            writeDirect = true;\r\n            nonContext = true;\r\n            methodName = \"writeAsArrayNonContext\";\r\n        }\r\n        Context context = new Context(getters, beanInfo, classNameType, writeDirect, nonContext);\r\n        mw = new MethodWriter(cw, ACC_PUBLIC, methodName, \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\", null, new String[] { \"java/io/IOException\" });\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitFieldInsn(GETFIELD, JSONSerializer, \"out\", SerializeWriter_desc);\r\n        mw.visitVarInsn(ASTORE, context.var(\"out\"));\r\n        // obj\r\n        mw.visitVarInsn(ALOAD, Context.obj);\r\n        // serializer\r\n        mw.visitTypeInsn(CHECKCAST, type(clazz));\r\n        // obj\r\n        mw.visitVarInsn(ASTORE, context.var(\"entity\"));\r\n        generateWriteAsArray(clazz, mw, getters, context);\r\n        mw.visitInsn(RETURN);\r\n        mw.visitMaxs(7, context.variantIndex + 2);\r\n        mw.visitEnd();\r\n    }\r\n    byte[] code = cw.toByteArray();\r\n    Class<?> exampleClass = classLoader.defineClassPublic(classNameFull, code, 0, code.length);\r\n    Constructor<?> constructor = exampleClass.getConstructor(SerializeBeanInfo.class);\r\n    Object instance = constructor.newInstance(beanInfo);\r\n    return (JavaBeanSerializer) instance;\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory.createJavaBeanSerializer", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory.createJavaBeanSerializer(com.alibaba.fastjson.serializer.SerializeBeanInfo)", "qualified_return_type": "com.alibaba.fastjson.serializer.JavaBeanSerializer"}
{"java_doc": "", "method_name": "generateWriteAsArray", "return_type": "void", "signature": "generateWriteAsArray(Class, MethodVisitor, FieldInfo[], Context)", "body_content": "{\r\n    mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n    mw.visitVarInsn(BIPUSH, '[');\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n    int size = getters.length;\r\n    if (size == 0) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitVarInsn(BIPUSH, ']');\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n        return;\r\n    }\r\n    for (int i = 0; i < size; ++i) {\r\n        final char seperator = (i == size - 1) ? ']' : ',';\r\n        FieldInfo fieldInfo = getters[i];\r\n        Class<?> fieldClass = fieldInfo.fieldClass;\r\n        mw.visitLdcInsn(fieldInfo.name);\r\n        mw.visitVarInsn(ASTORE, Context.fieldName);\r\n        if (// \r\n        fieldClass == byte.class || // \r\n        fieldClass == short.class || fieldClass == int.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            mw.visitInsn(DUP);\r\n            _get(mw, context, fieldInfo);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeInt\", \"(I)V\");\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n        } else if (fieldClass == long.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            mw.visitInsn(DUP);\r\n            _get(mw, context, fieldInfo);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeLong\", \"(J)V\");\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n        } else if (fieldClass == float.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            mw.visitInsn(DUP);\r\n            _get(mw, context, fieldInfo);\r\n            mw.visitInsn(ICONST_1);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFloat\", \"(FZ)V\");\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n        } else if (fieldClass == double.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            mw.visitInsn(DUP);\r\n            _get(mw, context, fieldInfo);\r\n            mw.visitInsn(ICONST_1);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeDouble\", \"(DZ)V\");\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n        } else if (fieldClass == boolean.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            mw.visitInsn(DUP);\r\n            _get(mw, context, fieldInfo);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(Z)V\");\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n        } else if (fieldClass == char.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            // Character.toString(value)\r\n            _get(mw, context, fieldInfo);\r\n            mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Character\", \"toString\", \"(C)Ljava/lang/String;\");\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeString\", \"(Ljava/lang/String;C)V\");\r\n        } else if (fieldClass == String.class) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            _get(mw, context, fieldInfo);\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeString\", \"(Ljava/lang/String;C)V\");\r\n        } else if (fieldClass.isEnum()) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            mw.visitInsn(DUP);\r\n            _get(mw, context, fieldInfo);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeEnum\", \"(Ljava/lang/Enum;)V\");\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n        } else if (List.class.isAssignableFrom(fieldClass)) {\r\n            Type fieldType = fieldInfo.fieldType;\r\n            Type elementType;\r\n            if (fieldType instanceof Class) {\r\n                elementType = Object.class;\r\n            } else {\r\n                elementType = ((ParameterizedType) fieldType).getActualTypeArguments()[0];\r\n            }\r\n            Class<?> elementClass = null;\r\n            if (elementType instanceof Class<?>) {\r\n                elementClass = (Class<?>) elementType;\r\n                if (elementClass == Object.class) {\r\n                    elementClass = null;\r\n                }\r\n            }\r\n            _get(mw, context, fieldInfo);\r\n            // cast\r\n            mw.visitTypeInsn(CHECKCAST, \"java/util/List\");\r\n            mw.visitVarInsn(ASTORE, context.var(\"list\"));\r\n            if (// \r\n            elementClass == String.class && context.writeDirect) {\r\n                mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n                mw.visitVarInsn(ALOAD, context.var(\"list\"));\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(Ljava/util/List;)V\");\r\n            } else {\r\n                Label nullEnd_ = new Label(), nullElse_ = new Label();\r\n                mw.visitVarInsn(ALOAD, context.var(\"list\"));\r\n                mw.visitJumpInsn(IFNONNULL, nullElse_);\r\n                mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeNull\", \"()V\");\r\n                mw.visitJumpInsn(GOTO, nullEnd_);\r\n                mw.visitLabel(nullElse_);\r\n                mw.visitVarInsn(ALOAD, context.var(\"list\"));\r\n                mw.visitMethodInsn(INVOKEINTERFACE, \"java/util/List\", \"size\", \"()I\");\r\n                mw.visitVarInsn(ISTORE, context.var(\"size\"));\r\n                mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n                mw.visitVarInsn(BIPUSH, '[');\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n                Label for_ = new Label(), forFirst_ = new Label(), forEnd_ = new Label();\r\n                mw.visitInsn(ICONST_0);\r\n                mw.visitVarInsn(ISTORE, context.var(\"i\"));\r\n                // for (; i < list.size() -1; ++i) {\r\n                mw.visitLabel(for_);\r\n                mw.visitVarInsn(ILOAD, context.var(\"i\"));\r\n                mw.visitVarInsn(ILOAD, context.var(\"size\"));\r\n                // i < list.size - 1\r\n                mw.visitJumpInsn(IF_ICMPGE, forEnd_);\r\n                mw.visitVarInsn(ILOAD, context.var(\"i\"));\r\n                // i < list.size - 1\r\n                mw.visitJumpInsn(IFEQ, forFirst_);\r\n                mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n                mw.visitVarInsn(BIPUSH, ',');\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n                mw.visitLabel(forFirst_);\r\n                mw.visitVarInsn(ALOAD, context.var(\"list\"));\r\n                mw.visitVarInsn(ILOAD, context.var(\"i\"));\r\n                mw.visitMethodInsn(INVOKEINTERFACE, \"java/util/List\", \"get\", \"(I)Ljava/lang/Object;\");\r\n                mw.visitVarInsn(ASTORE, context.var(\"list_item\"));\r\n                Label forItemNullEnd_ = new Label(), forItemNullElse_ = new Label();\r\n                mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\r\n                mw.visitJumpInsn(IFNONNULL, forItemNullElse_);\r\n                mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeNull\", \"()V\");\r\n                mw.visitJumpInsn(GOTO, forItemNullEnd_);\r\n                mw.visitLabel(forItemNullElse_);\r\n                Label forItemClassIfEnd_ = new Label(), forItemClassIfElse_ = new Label();\r\n                if (elementClass != null && Modifier.isPublic(elementClass.getModifiers())) {\r\n                    mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\r\n                    mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\r\n                    mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));\r\n                    mw.visitJumpInsn(IF_ACMPNE, forItemClassIfElse_);\r\n                    _getListFieldItemSer(context, mw, fieldInfo, elementClass);\r\n                    mw.visitVarInsn(ASTORE, context.var(\"list_item_desc\"));\r\n                    Label instanceOfElse_ = new Label(), instanceOfEnd_ = new Label();\r\n                    if (context.writeDirect) {\r\n                        mw.visitVarInsn(ALOAD, context.var(\"list_item_desc\"));\r\n                        mw.visitTypeInsn(INSTANCEOF, JavaBeanSerializer);\r\n                        mw.visitJumpInsn(IFEQ, instanceOfElse_);\r\n                        mw.visitVarInsn(ALOAD, context.var(\"list_item_desc\"));\r\n                        // cast\r\n                        mw.visitTypeInsn(CHECKCAST, JavaBeanSerializer);\r\n                        mw.visitVarInsn(ALOAD, Context.serializer);\r\n                        // object\r\n                        mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\r\n                        if (context.nonContext) {\r\n                            // fieldName\r\n                            mw.visitInsn(ACONST_NULL);\r\n                        } else {\r\n                            mw.visitVarInsn(ILOAD, context.var(\"i\"));\r\n                            mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\");\r\n                        }\r\n                        // fieldType\r\n                        mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));\r\n                        // features\r\n                        mw.visitLdcInsn(fieldInfo.serialzeFeatures);\r\n                        // \r\n                        mw.// \r\n                        visitMethodInsn(// \r\n                        INVOKEVIRTUAL, // \r\n                        JavaBeanSerializer, // \r\n                        \"writeAsArrayNonContext\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n                        mw.visitJumpInsn(GOTO, instanceOfEnd_);\r\n                        mw.visitLabel(instanceOfElse_);\r\n                    }\r\n                    mw.visitVarInsn(ALOAD, context.var(\"list_item_desc\"));\r\n                    mw.visitVarInsn(ALOAD, Context.serializer);\r\n                    // object\r\n                    mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\r\n                    if (context.nonContext) {\r\n                        // fieldName\r\n                        mw.visitInsn(ACONST_NULL);\r\n                    } else {\r\n                        mw.visitVarInsn(ILOAD, context.var(\"i\"));\r\n                        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\");\r\n                    }\r\n                    // fieldType\r\n                    mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));\r\n                    // features\r\n                    mw.visitLdcInsn(fieldInfo.serialzeFeatures);\r\n                    // \r\n                    mw.// \r\n                    visitMethodInsn(// \r\n                    INVOKEINTERFACE, // \r\n                    ObjectSerializer, // \r\n                    \"write\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n                    mw.visitLabel(instanceOfEnd_);\r\n                    mw.visitJumpInsn(GOTO, forItemClassIfEnd_);\r\n                }\r\n                mw.visitLabel(forItemClassIfElse_);\r\n                mw.visitVarInsn(ALOAD, Context.serializer);\r\n                mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\r\n                if (context.nonContext) {\r\n                    mw.visitInsn(ACONST_NULL);\r\n                } else {\r\n                    mw.visitVarInsn(ILOAD, context.var(\"i\"));\r\n                    mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\");\r\n                }\r\n                if (elementClass != null && Modifier.isPublic(elementClass.getModifiers())) {\r\n                    mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc((Class<?>) elementType)));\r\n                    mw.visitLdcInsn(fieldInfo.serialzeFeatures);\r\n                    mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"writeWithFieldName\", \"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n                } else {\r\n                    mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"writeWithFieldName\", \"(Ljava/lang/Object;Ljava/lang/Object;)V\");\r\n                }\r\n                mw.visitLabel(forItemClassIfEnd_);\r\n                mw.visitLabel(forItemNullEnd_);\r\n                mw.visitIincInsn(context.var(\"i\"), 1);\r\n                mw.visitJumpInsn(GOTO, for_);\r\n                mw.visitLabel(forEnd_);\r\n                mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n                mw.visitVarInsn(BIPUSH, ']');\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n                mw.visitLabel(nullEnd_);\r\n            }\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n        } else {\r\n            Label notNullEnd_ = new Label(), notNullElse_ = new Label();\r\n            _get(mw, context, fieldInfo);\r\n            mw.visitInsn(DUP);\r\n            mw.visitVarInsn(ASTORE, context.var(\"field_\" + fieldInfo.fieldClass.getName()));\r\n            mw.visitJumpInsn(IFNONNULL, notNullElse_);\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeNull\", \"()V\");\r\n            mw.visitJumpInsn(GOTO, notNullEnd_);\r\n            mw.visitLabel(notNullElse_);\r\n            Label classIfEnd_ = new Label(), classIfElse_ = new Label();\r\n            mw.visitVarInsn(ALOAD, context.var(\"field_\" + fieldInfo.fieldClass.getName()));\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\r\n            mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldClass)));\r\n            mw.visitJumpInsn(IF_ACMPNE, classIfElse_);\r\n            _getFieldSer(context, mw, fieldInfo);\r\n            mw.visitVarInsn(ASTORE, context.var(\"fied_ser\"));\r\n            Label instanceOfElse_ = new Label(), instanceOfEnd_ = new Label();\r\n            if (context.writeDirect && Modifier.isPublic(fieldClass.getModifiers())) {\r\n                mw.visitVarInsn(ALOAD, context.var(\"fied_ser\"));\r\n                mw.visitTypeInsn(INSTANCEOF, JavaBeanSerializer);\r\n                mw.visitJumpInsn(IFEQ, instanceOfElse_);\r\n                mw.visitVarInsn(ALOAD, context.var(\"fied_ser\"));\r\n                // cast\r\n                mw.visitTypeInsn(CHECKCAST, JavaBeanSerializer);\r\n                mw.visitVarInsn(ALOAD, Context.serializer);\r\n                mw.visitVarInsn(ALOAD, context.var(\"field_\" + fieldInfo.fieldClass.getName()));\r\n                mw.visitVarInsn(ALOAD, Context.fieldName);\r\n                // fieldType\r\n                mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldClass)));\r\n                // features\r\n                mw.visitLdcInsn(fieldInfo.serialzeFeatures);\r\n                // \r\n                mw.// \r\n                visitMethodInsn(// \r\n                INVOKEVIRTUAL, // \r\n                JavaBeanSerializer, // \r\n                \"writeAsArrayNonContext\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n                mw.visitJumpInsn(GOTO, instanceOfEnd_);\r\n                mw.visitLabel(instanceOfElse_);\r\n            }\r\n            mw.visitVarInsn(ALOAD, context.var(\"fied_ser\"));\r\n            mw.visitVarInsn(ALOAD, Context.serializer);\r\n            mw.visitVarInsn(ALOAD, context.var(\"field_\" + fieldInfo.fieldClass.getName()));\r\n            mw.visitVarInsn(ALOAD, Context.fieldName);\r\n            // fieldType\r\n            mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldClass)));\r\n            // features\r\n            mw.visitLdcInsn(fieldInfo.serialzeFeatures);\r\n            // \r\n            mw.// \r\n            visitMethodInsn(// \r\n            INVOKEINTERFACE, // \r\n            ObjectSerializer, // \r\n            \"write\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n            mw.visitLabel(instanceOfEnd_);\r\n            mw.visitJumpInsn(GOTO, classIfEnd_);\r\n            mw.visitLabel(classIfElse_);\r\n            String format = fieldInfo.getFormat();\r\n            mw.visitVarInsn(ALOAD, Context.serializer);\r\n            mw.visitVarInsn(ALOAD, context.var(\"field_\" + fieldInfo.fieldClass.getName()));\r\n            if (format != null) {\r\n                mw.visitLdcInsn(format);\r\n                mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"writeWithFormat\", \"(Ljava/lang/Object;Ljava/lang/String;)V\");\r\n            } else {\r\n                mw.visitVarInsn(ALOAD, Context.fieldName);\r\n                if (// \r\n                fieldInfo.fieldType instanceof Class<?> && ((Class<?>) fieldInfo.fieldType).isPrimitive()) {\r\n                    mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"writeWithFieldName\", \"(Ljava/lang/Object;Ljava/lang/Object;)V\");\r\n                } else {\r\n                    // this\r\n                    mw.visitVarInsn(ALOAD, 0);\r\n                    mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_fieldType\", \"Ljava/lang/reflect/Type;\");\r\n                    mw.visitLdcInsn(fieldInfo.serialzeFeatures);\r\n                    mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"writeWithFieldName\", \"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n                }\r\n            }\r\n            mw.visitLabel(classIfEnd_);\r\n            mw.visitLabel(notNullEnd_);\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            mw.visitVarInsn(BIPUSH, seperator);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n        }\r\n    }\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory.generateWriteAsArray", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory.generateWriteAsArray(java.lang.Class<?>, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo[], com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "generateWriteMethod", "return_type": "void", "signature": "generateWriteMethod(Class, MethodVisitor, FieldInfo[], Context)", "body_content": "{\r\n    // if (serializer.containsReference(object)) {\r\n    Label end = new Label();\r\n    int size = getters.length;\r\n    if (!context.writeDirect) {\r\n        // pretty format not byte code optimized\r\n        Label endSupper_ = new Label();\r\n        Label supper_ = new Label();\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitLdcInsn(SerializerFeature.PrettyFormat.mask);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"isEnabled\", \"(I)Z\");\r\n        mw.visitJumpInsn(IFNE, supper_);\r\n        boolean hasMethod = false;\r\n        for (FieldInfo getter : getters) {\r\n            if (getter.method != null) {\r\n                hasMethod = true;\r\n            }\r\n        }\r\n        if (hasMethod) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            mw.visitLdcInsn(SerializerFeature.IgnoreErrorGetter.mask);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"isEnabled\", \"(I)Z\");\r\n            mw.visitJumpInsn(IFEQ, endSupper_);\r\n        } else {\r\n            mw.visitJumpInsn(GOTO, endSupper_);\r\n        }\r\n        mw.visitLabel(supper_);\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitVarInsn(ALOAD, 1);\r\n        mw.visitVarInsn(ALOAD, 2);\r\n        mw.visitVarInsn(ALOAD, 3);\r\n        mw.visitVarInsn(ALOAD, 4);\r\n        mw.visitVarInsn(ILOAD, 5);\r\n        mw.visitMethodInsn(INVOKESPECIAL, JavaBeanSerializer, \"write\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n        mw.visitInsn(RETURN);\r\n        mw.visitLabel(endSupper_);\r\n    }\r\n    if (!context.nonContext) {\r\n        Label endRef_ = new Label();\r\n        // /////\r\n        // this\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitVarInsn(ALOAD, Context.obj);\r\n        mw.visitVarInsn(ILOAD, Context.features);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JavaBeanSerializer, \"writeReference\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;I)Z\");\r\n        mw.visitJumpInsn(IFEQ, endRef_);\r\n        mw.visitInsn(RETURN);\r\n        mw.visitLabel(endRef_);\r\n    }\r\n    final String writeAsArrayMethodName;\r\n    if (context.writeDirect) {\r\n        if (context.nonContext) {\r\n            writeAsArrayMethodName = \"writeAsArrayNonContext\";\r\n        } else {\r\n            writeAsArrayMethodName = \"writeAsArray\";\r\n        }\r\n    } else {\r\n        writeAsArrayMethodName = \"writeAsArrayNormal\";\r\n    }\r\n    if ((context.beanInfo.features & SerializerFeature.BeanToArray.mask) == 0) {\r\n        Label endWriteAsArray_ = new Label();\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitLdcInsn(SerializerFeature.BeanToArray.mask);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"isEnabled\", \"(I)Z\");\r\n        mw.visitJumpInsn(IFEQ, endWriteAsArray_);\r\n        // /////\r\n        // this\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        // obj\r\n        mw.visitVarInsn(ALOAD, 2);\r\n        // fieldObj\r\n        mw.visitVarInsn(ALOAD, 3);\r\n        // fieldType\r\n        mw.visitVarInsn(ALOAD, 4);\r\n        // features\r\n        mw.visitVarInsn(ILOAD, 5);\r\n        // \r\n        mw.// \r\n        visitMethodInsn(// \r\n        INVOKEVIRTUAL, // \r\n        context.className, // \r\n        writeAsArrayMethodName, \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n        mw.visitInsn(RETURN);\r\n        mw.visitLabel(endWriteAsArray_);\r\n    } else {\r\n        // this\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        // obj\r\n        mw.visitVarInsn(ALOAD, 2);\r\n        // fieldObj\r\n        mw.visitVarInsn(ALOAD, 3);\r\n        // fieldType\r\n        mw.visitVarInsn(ALOAD, 4);\r\n        // features\r\n        mw.visitVarInsn(ILOAD, 5);\r\n        // \r\n        mw.// \r\n        visitMethodInsn(// \r\n        INVOKEVIRTUAL, // \r\n        context.className, // \r\n        writeAsArrayMethodName, \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n        mw.visitInsn(RETURN);\r\n    }\r\n    if (!context.nonContext) {\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"getContext\", \"()\" + SerialContext_desc);\r\n        mw.visitVarInsn(ASTORE, context.var(\"parent\"));\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitVarInsn(ALOAD, context.var(\"parent\"));\r\n        mw.visitVarInsn(ALOAD, Context.obj);\r\n        mw.visitVarInsn(ALOAD, Context.paramFieldName);\r\n        mw.visitLdcInsn(context.beanInfo.features);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"setContext\", \"(\" + SerialContext_desc + \"Ljava/lang/Object;Ljava/lang/Object;I)V\");\r\n    }\r\n    // SEPERATO\r\n    if (!context.writeDirect) {\r\n        Label end_ = new Label();\r\n        Label else_ = new Label();\r\n        Label writeClass_ = new Label();\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitVarInsn(ALOAD, Context.paramFieldType);\r\n        mw.visitVarInsn(ALOAD, Context.obj);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"isWriteClassName\", \"(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z\");\r\n        mw.visitJumpInsn(IFEQ, else_);\r\n        // IFNULL\r\n        mw.visitVarInsn(ALOAD, Context.paramFieldType);\r\n        mw.visitVarInsn(ALOAD, Context.obj);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\r\n        mw.visitJumpInsn(IF_ACMPEQ, else_);\r\n        mw.visitLabel(writeClass_);\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitVarInsn(BIPUSH, '{');\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitVarInsn(ALOAD, Context.obj);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JavaBeanSerializer, \"writeClassName\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;)V\");\r\n        mw.visitVarInsn(BIPUSH, ',');\r\n        mw.visitJumpInsn(GOTO, end_);\r\n        mw.visitLabel(else_);\r\n        mw.visitVarInsn(BIPUSH, '{');\r\n        mw.visitLabel(end_);\r\n    } else {\r\n        mw.visitVarInsn(BIPUSH, '{');\r\n    }\r\n    mw.visitVarInsn(ISTORE, context.var(\"seperator\"));\r\n    if (!context.writeDirect) {\r\n        _before(mw, context);\r\n    }\r\n    if (!context.writeDirect) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"isNotWriteDefaultValue\", \"()Z\");\r\n        mw.visitVarInsn(ISTORE, context.var(\"notWriteDefaultValue\"));\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"checkValue\", \"(\" + SerializeFilterable_desc + \")Z\");\r\n        mw.visitVarInsn(ISTORE, context.var(\"checkValue\"));\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"hasNameFilters\", \"(\" + SerializeFilterable_desc + \")Z\");\r\n        mw.visitVarInsn(ISTORE, context.var(\"hasNameFilters\"));\r\n    }\r\n    for (int i = 0; i < size; ++i) {\r\n        FieldInfo property = getters[i];\r\n        Class<?> propertyClass = property.fieldClass;\r\n        mw.visitLdcInsn(property.name);\r\n        mw.visitVarInsn(ASTORE, Context.fieldName);\r\n        if (// \r\n        propertyClass == byte.class || // \r\n        propertyClass == short.class || propertyClass == int.class) {\r\n            _int(clazz, mw, property, context, context.var(propertyClass.getName()), 'I');\r\n        } else if (propertyClass == long.class) {\r\n            _long(clazz, mw, property, context);\r\n        } else if (propertyClass == float.class) {\r\n            _float(clazz, mw, property, context);\r\n        } else if (propertyClass == double.class) {\r\n            _double(clazz, mw, property, context);\r\n        } else if (propertyClass == boolean.class) {\r\n            _int(clazz, mw, property, context, context.var(\"boolean\"), 'Z');\r\n        } else if (propertyClass == char.class) {\r\n            _int(clazz, mw, property, context, context.var(\"char\"), 'C');\r\n        } else if (propertyClass == String.class) {\r\n            _string(clazz, mw, property, context);\r\n        } else if (propertyClass == BigDecimal.class) {\r\n            _decimal(clazz, mw, property, context);\r\n        } else if (List.class.isAssignableFrom(propertyClass)) {\r\n            _list(clazz, mw, property, context);\r\n        } else if (propertyClass.isEnum()) {\r\n            _enum(clazz, mw, property, context);\r\n        } else {\r\n            _object(clazz, mw, property, context);\r\n        }\r\n    }\r\n    if (!context.writeDirect) {\r\n        _after(mw, context);\r\n    }\r\n    Label _else = new Label();\r\n    Label _end_if = new Label();\r\n    mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n    mw.visitIntInsn(BIPUSH, '{');\r\n    mw.visitJumpInsn(IF_ICMPNE, _else);\r\n    mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n    mw.visitVarInsn(BIPUSH, '{');\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n    mw.visitLabel(_else);\r\n    mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n    mw.visitVarInsn(BIPUSH, '}');\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n    mw.visitLabel(_end_if);\r\n    mw.visitLabel(end);\r\n    if (!context.nonContext) {\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitVarInsn(ALOAD, context.var(\"parent\"));\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"setContext\", \"(\" + SerialContext_desc + \")V\");\r\n    }\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory.generateWriteMethod", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory.generateWriteMethod(java.lang.Class<?>, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo[], com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_object", "return_type": "void", "signature": "_object(Class, MethodVisitor, FieldInfo, Context)", "body_content": "{\r\n    Label _end = new Label();\r\n    _nameApply(mw, property, context, _end);\r\n    _get(mw, context, property);\r\n    mw.visitVarInsn(ASTORE, context.var(\"object\"));\r\n    _filters(mw, property, context, _end);\r\n    _writeObject(mw, property, context, _end);\r\n    mw.visitLabel(_end);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._object", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._object(java.lang.Class<?>, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_enum", "return_type": "void", "signature": "_enum(Class, MethodVisitor, FieldInfo, Context)", "body_content": "{\r\n    Label _not_null = new Label();\r\n    Label _end_if = new Label();\r\n    Label _end = new Label();\r\n    _nameApply(mw, fieldInfo, context, _end);\r\n    _get(mw, context, fieldInfo);\r\n    // cast\r\n    mw.visitTypeInsn(CHECKCAST, \"java/lang/Enum\");\r\n    mw.visitVarInsn(ASTORE, context.var(\"enum\"));\r\n    _filters(mw, fieldInfo, context, _end);\r\n    mw.visitVarInsn(ALOAD, context.var(\"enum\"));\r\n    mw.visitJumpInsn(IFNONNULL, _not_null);\r\n    _if_write_null(mw, fieldInfo, context);\r\n    mw.visitJumpInsn(GOTO, _end_if);\r\n    mw.visitLabel(_not_null);\r\n    if (context.writeDirect) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n        mw.visitVarInsn(ALOAD, Context.fieldName);\r\n        mw.visitVarInsn(ALOAD, context.var(\"enum\"));\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Enum\", \"name\", \"()Ljava/lang/String;\");\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldValueStringWithDoubleQuote\", \"(CLjava/lang/String;Ljava/lang/String;)V\");\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitVarInsn(ALOAD, Context.fieldName);\r\n        mw.visitInsn(ICONST_0);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldName\", \"(Ljava/lang/String;Z)V\");\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitVarInsn(ALOAD, context.var(\"enum\"));\r\n        mw.visitVarInsn(ALOAD, Context.fieldName);\r\n        mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc((Class<?>) fieldInfo.fieldClass)));\r\n        mw.visitLdcInsn(fieldInfo.serialzeFeatures);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"writeWithFieldName\", \"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n    }\r\n    _seperator(mw, context);\r\n    mw.visitLabel(_end_if);\r\n    mw.visitLabel(_end);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._enum", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._enum(java.lang.Class<?>, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_int", "return_type": "void", "signature": "_int(Class, MethodVisitor, FieldInfo, Context, int, char)", "body_content": "{\r\n    Label end_ = new Label();\r\n    _nameApply(mw, property, context, end_);\r\n    _get(mw, context, property);\r\n    mw.visitVarInsn(ISTORE, var);\r\n    _filters(mw, property, context, end_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n    mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n    mw.visitVarInsn(ALOAD, Context.fieldName);\r\n    mw.visitVarInsn(ILOAD, var);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldValue\", \"(CLjava/lang/String;\" + type + \")V\");\r\n    _seperator(mw, context);\r\n    mw.visitLabel(end_);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._int", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._int(java.lang.Class<?>, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context, int, char)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_long", "return_type": "void", "signature": "_long(Class, MethodVisitor, FieldInfo, Context)", "body_content": "{\r\n    Label end_ = new Label();\r\n    _nameApply(mw, property, context, end_);\r\n    _get(mw, context, property);\r\n    mw.visitVarInsn(LSTORE, context.var(\"long\", 2));\r\n    _filters(mw, property, context, end_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n    mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n    mw.visitVarInsn(ALOAD, Context.fieldName);\r\n    mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\r\n    _seperator(mw, context);\r\n    mw.visitLabel(end_);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._long", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._long(java.lang.Class<?>, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_float", "return_type": "void", "signature": "_float(Class, MethodVisitor, FieldInfo, Context)", "body_content": "{\r\n    Label end_ = new Label();\r\n    _nameApply(mw, property, context, end_);\r\n    _get(mw, context, property);\r\n    mw.visitVarInsn(FSTORE, context.var(\"float\"));\r\n    _filters(mw, property, context, end_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n    mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n    mw.visitVarInsn(ALOAD, Context.fieldName);\r\n    mw.visitVarInsn(FLOAD, context.var(\"float\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldValue\", \"(CLjava/lang/String;F)V\");\r\n    _seperator(mw, context);\r\n    mw.visitLabel(end_);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._float", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._float(java.lang.Class<?>, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_double", "return_type": "void", "signature": "_double(Class, MethodVisitor, FieldInfo, Context)", "body_content": "{\r\n    Label end_ = new Label();\r\n    _nameApply(mw, property, context, end_);\r\n    _get(mw, context, property);\r\n    mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\r\n    _filters(mw, property, context, end_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n    mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n    mw.visitVarInsn(ALOAD, Context.fieldName);\r\n    mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\r\n    _seperator(mw, context);\r\n    mw.visitLabel(end_);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._double", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._double(java.lang.Class<?>, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_get", "return_type": "void", "signature": "_get(MethodVisitor, Context, FieldInfo)", "body_content": "{\r\n    Method method = fieldInfo.method;\r\n    if (method != null) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"entity\"));\r\n        Class<?> declaringClass = method.getDeclaringClass();\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, type(declaringClass), method.getName(), desc(method));\r\n        if (!method.getReturnType().equals(fieldInfo.fieldClass)) {\r\n            // cast\r\n            mw.visitTypeInsn(CHECKCAST, type(fieldInfo.fieldClass));\r\n        }\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, context.var(\"entity\"));\r\n        Field field = fieldInfo.field;\r\n        mw.visitFieldInsn(GETFIELD, type(fieldInfo.declaringClass), field.getName(), desc(field.getType()));\r\n        if (!field.getType().equals(fieldInfo.fieldClass)) {\r\n            // cast\r\n            mw.visitTypeInsn(CHECKCAST, type(fieldInfo.fieldClass));\r\n        }\r\n    }\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._get", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._get(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context, com.alibaba.fastjson.util.FieldInfo)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_decimal", "return_type": "void", "signature": "_decimal(Class, MethodVisitor, FieldInfo, Context)", "body_content": "{\r\n    Label end_ = new Label();\r\n    _nameApply(mw, property, context, end_);\r\n    _get(mw, context, property);\r\n    mw.visitVarInsn(ASTORE, context.var(\"decimal\"));\r\n    _filters(mw, property, context, end_);\r\n    Label if_ = new Label();\r\n    Label else_ = new Label();\r\n    Label endIf_ = new Label();\r\n    mw.visitLabel(if_);\r\n    // if (decimalValue == null) {\r\n    mw.visitVarInsn(ALOAD, context.var(\"decimal\"));\r\n    mw.visitJumpInsn(IFNONNULL, else_);\r\n    _if_write_null(mw, property, context);\r\n    mw.visitJumpInsn(GOTO, endIf_);\r\n    // else { out.writeFieldValue(seperator, fieldName, fieldValue)\r\n    mw.visitLabel(else_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n    mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n    mw.visitVarInsn(ALOAD, Context.fieldName);\r\n    mw.visitVarInsn(ALOAD, context.var(\"decimal\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldValue\", \"(CLjava/lang/String;Ljava/math/BigDecimal;)V\");\r\n    _seperator(mw, context);\r\n    mw.visitJumpInsn(GOTO, endIf_);\r\n    mw.visitLabel(endIf_);\r\n    mw.visitLabel(end_);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._decimal", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._decimal(java.lang.Class<?>, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_string", "return_type": "void", "signature": "_string(Class, MethodVisitor, FieldInfo, Context)", "body_content": "{\r\n    Label end_ = new Label();\r\n    _nameApply(mw, property, context, end_);\r\n    _get(mw, context, property);\r\n    mw.visitVarInsn(ASTORE, context.var(\"string\"));\r\n    _filters(mw, property, context, end_);\r\n    Label else_ = new Label();\r\n    Label endIf_ = new Label();\r\n    // if (value == null) {\r\n    mw.visitVarInsn(ALOAD, context.var(\"string\"));\r\n    mw.visitJumpInsn(IFNONNULL, else_);\r\n    _if_write_null(mw, property, context);\r\n    mw.visitJumpInsn(GOTO, endIf_);\r\n    // else { out.writeFieldValue(seperator, fieldName, fieldValue)\r\n    mw.visitLabel(else_);\r\n    if (context.writeDirect) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n        mw.visitVarInsn(ALOAD, Context.fieldName);\r\n        mw.visitVarInsn(ALOAD, context.var(\"string\"));\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldValueStringWithDoubleQuoteCheck\", \"(CLjava/lang/String;Ljava/lang/String;)V\");\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n        mw.visitVarInsn(ALOAD, Context.fieldName);\r\n        mw.visitVarInsn(ALOAD, context.var(\"string\"));\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldValue\", \"(CLjava/lang/String;Ljava/lang/String;)V\");\r\n    }\r\n    _seperator(mw, context);\r\n    mw.visitLabel(endIf_);\r\n    mw.visitLabel(end_);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._string", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._string(java.lang.Class<?>, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_list", "return_type": "void", "signature": "_list(Class, MethodVisitor, FieldInfo, Context)", "body_content": "{\r\n    Type propertyType = fieldInfo.fieldType;\r\n    Type elementType;\r\n    if (propertyType instanceof Class) {\r\n        elementType = Object.class;\r\n    } else {\r\n        elementType = ((ParameterizedType) propertyType).getActualTypeArguments()[0];\r\n    }\r\n    Class<?> elementClass = null;\r\n    if (elementType instanceof Class<?>) {\r\n        elementClass = (Class<?>) elementType;\r\n    }\r\n    if (// \r\n    elementClass == Object.class || elementClass == Serializable.class) {\r\n        elementClass = null;\r\n    }\r\n    Label end_ = new Label(), else_ = new Label(), endIf_ = new Label();\r\n    _nameApply(mw, fieldInfo, context, end_);\r\n    _get(mw, context, fieldInfo);\r\n    // cast\r\n    mw.visitTypeInsn(CHECKCAST, \"java/util/List\");\r\n    mw.visitVarInsn(ASTORE, context.var(\"list\"));\r\n    _filters(mw, fieldInfo, context, end_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"list\"));\r\n    mw.visitJumpInsn(IFNONNULL, else_);\r\n    _if_write_null(mw, fieldInfo, context);\r\n    mw.visitJumpInsn(GOTO, endIf_);\r\n    // else {\r\n    mw.visitLabel(else_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n    mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n    _writeFieldName(mw, context);\r\n    // \r\n    mw.visitVarInsn(ALOAD, context.var(\"list\"));\r\n    mw.visitMethodInsn(INVOKEINTERFACE, \"java/util/List\", \"size\", \"()I\");\r\n    mw.visitVarInsn(ISTORE, context.var(\"size\"));\r\n    Label _else_3 = new Label();\r\n    Label _end_if_3 = new Label();\r\n    mw.visitVarInsn(ILOAD, context.var(\"size\"));\r\n    mw.visitInsn(ICONST_0);\r\n    mw.visitJumpInsn(IF_ICMPNE, _else_3);\r\n    mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n    mw.visitLdcInsn(\"[]\");\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(Ljava/lang/String;)V\");\r\n    mw.visitJumpInsn(GOTO, _end_if_3);\r\n    mw.visitLabel(_else_3);\r\n    if (!context.nonContext) {\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitVarInsn(ALOAD, context.var(\"list\"));\r\n        mw.visitVarInsn(ALOAD, Context.fieldName);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"setContext\", \"(Ljava/lang/Object;Ljava/lang/Object;)V\");\r\n    }\r\n    if (// \r\n    elementType == String.class && context.writeDirect) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitVarInsn(ALOAD, context.var(\"list\"));\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(Ljava/util/List;)V\");\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitVarInsn(BIPUSH, '[');\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n        Label for_ = new Label(), forFirst_ = new Label(), forEnd_ = new Label();\r\n        mw.visitInsn(ICONST_0);\r\n        mw.visitVarInsn(ISTORE, context.var(\"i\"));\r\n        // for (; i < list.size() -1; ++i) {\r\n        mw.visitLabel(for_);\r\n        mw.visitVarInsn(ILOAD, context.var(\"i\"));\r\n        mw.visitVarInsn(ILOAD, context.var(\"size\"));\r\n        // i < list.size - 1\r\n        mw.visitJumpInsn(IF_ICMPGE, forEnd_);\r\n        mw.visitVarInsn(ILOAD, context.var(\"i\"));\r\n        // i < list.size - 1\r\n        mw.visitJumpInsn(IFEQ, forFirst_);\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitVarInsn(BIPUSH, ',');\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n        mw.visitLabel(forFirst_);\r\n        mw.visitVarInsn(ALOAD, context.var(\"list\"));\r\n        mw.visitVarInsn(ILOAD, context.var(\"i\"));\r\n        mw.visitMethodInsn(INVOKEINTERFACE, \"java/util/List\", \"get\", \"(I)Ljava/lang/Object;\");\r\n        mw.visitVarInsn(ASTORE, context.var(\"list_item\"));\r\n        Label forItemNullEnd_ = new Label(), forItemNullElse_ = new Label();\r\n        mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\r\n        mw.visitJumpInsn(IFNONNULL, forItemNullElse_);\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeNull\", \"()V\");\r\n        mw.visitJumpInsn(GOTO, forItemNullEnd_);\r\n        mw.visitLabel(forItemNullElse_);\r\n        Label forItemClassIfEnd_ = new Label(), forItemClassIfElse_ = new Label();\r\n        if (elementClass != null && Modifier.isPublic(elementClass.getModifiers())) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\r\n            mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));\r\n            mw.visitJumpInsn(IF_ACMPNE, forItemClassIfElse_);\r\n            _getListFieldItemSer(context, mw, fieldInfo, elementClass);\r\n            // mw.visitInsn(DUP);\r\n            mw.visitVarInsn(ASTORE, context.var(\"list_item_desc\"));\r\n            Label instanceOfElse_ = new Label(), instanceOfEnd_ = new Label();\r\n            if (context.writeDirect) {\r\n                String writeMethodName = // \r\n                context.nonContext && context.writeDirect ? // \r\n                \"writeDirectNonContext\" : \"write\";\r\n                mw.visitVarInsn(ALOAD, context.var(\"list_item_desc\"));\r\n                mw.visitTypeInsn(INSTANCEOF, JavaBeanSerializer);\r\n                mw.visitJumpInsn(IFEQ, instanceOfElse_);\r\n                mw.visitVarInsn(ALOAD, context.var(\"list_item_desc\"));\r\n                // cast\r\n                mw.visitTypeInsn(CHECKCAST, JavaBeanSerializer);\r\n                mw.visitVarInsn(ALOAD, Context.serializer);\r\n                // object\r\n                mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\r\n                if (context.nonContext) {\r\n                    // fieldName\r\n                    mw.visitInsn(ACONST_NULL);\r\n                } else {\r\n                    mw.visitVarInsn(ILOAD, context.var(\"i\"));\r\n                    mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\");\r\n                }\r\n                // fieldType\r\n                mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));\r\n                // features\r\n                mw.visitLdcInsn(fieldInfo.serialzeFeatures);\r\n                // \r\n                mw.// \r\n                visitMethodInsn(// \r\n                INVOKEVIRTUAL, // \r\n                JavaBeanSerializer, // \r\n                writeMethodName, \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n                mw.visitJumpInsn(GOTO, instanceOfEnd_);\r\n                mw.visitLabel(instanceOfElse_);\r\n            }\r\n            mw.visitVarInsn(ALOAD, context.var(\"list_item_desc\"));\r\n            mw.visitVarInsn(ALOAD, Context.serializer);\r\n            // object\r\n            mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\r\n            if (context.nonContext) {\r\n                // fieldName\r\n                mw.visitInsn(ACONST_NULL);\r\n            } else {\r\n                mw.visitVarInsn(ILOAD, context.var(\"i\"));\r\n                mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\");\r\n            }\r\n            // fieldType\r\n            mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));\r\n            // features\r\n            mw.visitLdcInsn(fieldInfo.serialzeFeatures);\r\n            // \r\n            mw.// \r\n            visitMethodInsn(// \r\n            INVOKEINTERFACE, // \r\n            ObjectSerializer, // \r\n            \"write\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n            mw.visitLabel(instanceOfEnd_);\r\n            mw.visitJumpInsn(GOTO, forItemClassIfEnd_);\r\n        }\r\n        mw.visitLabel(forItemClassIfElse_);\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\r\n        if (context.nonContext) {\r\n            mw.visitInsn(ACONST_NULL);\r\n        } else {\r\n            mw.visitVarInsn(ILOAD, context.var(\"i\"));\r\n            mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\");\r\n        }\r\n        if (elementClass != null && Modifier.isPublic(elementClass.getModifiers())) {\r\n            mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc((Class<?>) elementType)));\r\n            mw.visitLdcInsn(fieldInfo.serialzeFeatures);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"writeWithFieldName\", \"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n        } else {\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"writeWithFieldName\", \"(Ljava/lang/Object;Ljava/lang/Object;)V\");\r\n        }\r\n        mw.visitLabel(forItemClassIfEnd_);\r\n        mw.visitLabel(forItemNullEnd_);\r\n        mw.visitIincInsn(context.var(\"i\"), 1);\r\n        mw.visitJumpInsn(GOTO, for_);\r\n        mw.visitLabel(forEnd_);\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitVarInsn(BIPUSH, ']');\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n    }\r\n    {\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"popContext\", \"()V\");\r\n    }\r\n    mw.visitLabel(_end_if_3);\r\n    _seperator(mw, context);\r\n    mw.visitLabel(endIf_);\r\n    mw.visitLabel(end_);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._list", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._list(java.lang.Class<?>, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_filters", "return_type": "void", "signature": "_filters(MethodVisitor, FieldInfo, Context, Label)", "body_content": "{\r\n    if (property.field != null) {\r\n        if (Modifier.isTransient(property.field.getModifiers())) {\r\n            mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n            mw.visitLdcInsn(SerializerFeature.SkipTransientField.mask);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"isEnabled\", \"(I)Z\");\r\n            mw.visitJumpInsn(IFNE, _end);\r\n        }\r\n    }\r\n    _notWriteDefault(mw, property, context, _end);\r\n    if (context.writeDirect) {\r\n        return;\r\n    }\r\n    _apply(mw, property, context);\r\n    mw.visitJumpInsn(IFEQ, _end);\r\n    _processKey(mw, property, context);\r\n    _processValue(mw, property, context, _end);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._filters", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._filters(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context, com.alibaba.fastjson.asm.Label)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_nameApply", "return_type": "void", "signature": "_nameApply(MethodVisitor, FieldInfo, Context, Label)", "body_content": "{\r\n    if (!context.writeDirect) {\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitVarInsn(ALOAD, Context.obj);\r\n        mw.visitVarInsn(ALOAD, Context.fieldName);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JavaBeanSerializer, \"applyName\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/String;)Z\");\r\n        mw.visitJumpInsn(IFEQ, _end);\r\n        _labelApply(mw, property, context, _end);\r\n    }\r\n    if (property.field == null) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitLdcInsn(SerializerFeature.IgnoreNonFieldGetter.mask);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"isEnabled\", \"(I)Z\");\r\n        // if true\r\n        mw.visitJumpInsn(IFNE, _end);\r\n    }\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._nameApply", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._nameApply(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context, com.alibaba.fastjson.asm.Label)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_labelApply", "return_type": "void", "signature": "_labelApply(MethodVisitor, FieldInfo, Context, Label)", "body_content": "{\r\n    // this\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, Context.serializer);\r\n    mw.visitLdcInsn(property.label);\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JavaBeanSerializer, \"applyLabel\", \"(L\" + JSONSerializer + \";Ljava/lang/String;)Z\");\r\n    mw.visitJumpInsn(IFEQ, _end);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._labelApply", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._labelApply(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context, com.alibaba.fastjson.asm.Label)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_writeObject", "return_type": "void", "signature": "_writeObject(MethodVisitor, FieldInfo, Context, Label)", "body_content": "{\r\n    String format = fieldInfo.getFormat();\r\n    Class<?> fieldClass = fieldInfo.fieldClass;\r\n    Label notNull_ = new Label();\r\n    // if (obj == null)\r\n    if (context.writeDirect) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"object\"));\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, Context.processValue);\r\n    }\r\n    mw.visitInsn(DUP);\r\n    mw.visitVarInsn(ASTORE, context.var(\"object\"));\r\n    mw.visitJumpInsn(IFNONNULL, notNull_);\r\n    _if_write_null(mw, fieldInfo, context);\r\n    mw.visitJumpInsn(GOTO, _end);\r\n    mw.visitLabel(notNull_);\r\n    mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n    mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n    _writeFieldName(mw, context);\r\n    Label classIfEnd_ = new Label(), classIfElse_ = new Label();\r\n    if (// \r\n    Modifier.isPublic(fieldClass.getModifiers()) && // \r\n    !ParserConfig.isPrimitive(fieldClass)) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"object\"));\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\r\n        mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldClass)));\r\n        mw.visitJumpInsn(IF_ACMPNE, classIfElse_);\r\n        _getFieldSer(context, mw, fieldInfo);\r\n        mw.visitVarInsn(ASTORE, context.var(\"fied_ser\"));\r\n        Label instanceOfElse_ = new Label(), instanceOfEnd_ = new Label();\r\n        mw.visitVarInsn(ALOAD, context.var(\"fied_ser\"));\r\n        mw.visitTypeInsn(INSTANCEOF, JavaBeanSerializer);\r\n        mw.visitJumpInsn(IFEQ, instanceOfElse_);\r\n        boolean fieldBeanToArray = (fieldInfo.serialzeFeatures & SerializerFeature.BeanToArray.mask) != 0;\r\n        String writeMethodName;\r\n        if (context.nonContext && context.writeDirect) {\r\n            writeMethodName = fieldBeanToArray ? \"writeAsArrayNonContext\" : \"writeDirectNonContext\";\r\n        } else {\r\n            writeMethodName = fieldBeanToArray ? \"writeAsArray\" : \"write\";\r\n        }\r\n        mw.visitVarInsn(ALOAD, context.var(\"fied_ser\"));\r\n        // cast\r\n        mw.visitTypeInsn(CHECKCAST, JavaBeanSerializer);\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitVarInsn(ALOAD, context.var(\"object\"));\r\n        mw.visitVarInsn(ALOAD, Context.fieldName);\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_fieldType\", \"Ljava/lang/reflect/Type;\");\r\n        // features\r\n        mw.visitLdcInsn(fieldInfo.serialzeFeatures);\r\n        // \r\n        mw.// \r\n        visitMethodInsn(// \r\n        INVOKEVIRTUAL, // \r\n        JavaBeanSerializer, // \r\n        writeMethodName, \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n        mw.visitJumpInsn(GOTO, instanceOfEnd_);\r\n        mw.visitLabel(instanceOfElse_);\r\n        mw.visitVarInsn(ALOAD, context.var(\"fied_ser\"));\r\n        mw.visitVarInsn(ALOAD, Context.serializer);\r\n        mw.visitVarInsn(ALOAD, context.var(\"object\"));\r\n        mw.visitVarInsn(ALOAD, Context.fieldName);\r\n        mw.visitVarInsn(ALOAD, 0);\r\n        mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_fieldType\", \"Ljava/lang/reflect/Type;\");\r\n        // features\r\n        mw.visitLdcInsn(fieldInfo.serialzeFeatures);\r\n        // \r\n        mw.// \r\n        visitMethodInsn(// \r\n        INVOKEINTERFACE, // \r\n        ObjectSerializer, // \r\n        \"write\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n        mw.visitLabel(instanceOfEnd_);\r\n        mw.visitJumpInsn(GOTO, classIfEnd_);\r\n    }\r\n    mw.visitLabel(classIfElse_);\r\n    mw.visitVarInsn(ALOAD, Context.serializer);\r\n    if (context.writeDirect) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"object\"));\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, Context.processValue);\r\n    }\r\n    if (format != null) {\r\n        mw.visitLdcInsn(format);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"writeWithFormat\", \"(Ljava/lang/Object;Ljava/lang/String;)V\");\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, Context.fieldName);\r\n        if (// \r\n        fieldInfo.fieldType instanceof Class<?> && ((Class<?>) fieldInfo.fieldType).isPrimitive()) {\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"writeWithFieldName\", \"(Ljava/lang/Object;Ljava/lang/Object;)V\");\r\n        } else {\r\n            if (fieldInfo.fieldClass == String.class) {\r\n                mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(String.class)));\r\n            } else {\r\n                mw.visitVarInsn(ALOAD, 0);\r\n                mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_fieldType\", \"Ljava/lang/reflect/Type;\");\r\n            }\r\n            mw.visitLdcInsn(fieldInfo.serialzeFeatures);\r\n            mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"writeWithFieldName\", \"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");\r\n        }\r\n    }\r\n    mw.visitLabel(classIfEnd_);\r\n    _seperator(mw, context);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._writeObject", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._writeObject(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context, com.alibaba.fastjson.asm.Label)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_before", "return_type": "void", "signature": "_before(MethodVisitor, Context)", "body_content": "{\r\n    // this\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, Context.serializer);\r\n    mw.visitVarInsn(ALOAD, Context.obj);\r\n    mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JavaBeanSerializer, \"writeBefore\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;C)C\");\r\n    mw.visitVarInsn(ISTORE, context.var(\"seperator\"));\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._before", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._before(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_after", "return_type": "void", "signature": "_after(MethodVisitor, Context)", "body_content": "{\r\n    // this\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, Context.serializer);\r\n    // obj\r\n    mw.visitVarInsn(ALOAD, 2);\r\n    mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JavaBeanSerializer, \"writeAfter\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;C)C\");\r\n    mw.visitVarInsn(ISTORE, context.var(\"seperator\"));\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._after", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._after(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_notWriteDefault", "return_type": "void", "signature": "_notWriteDefault(MethodVisitor, FieldInfo, Context, Label)", "body_content": "{\r\n    if (context.writeDirect) {\r\n        return;\r\n    }\r\n    Label elseLabel = new Label();\r\n    mw.visitVarInsn(ILOAD, context.var(\"notWriteDefaultValue\"));\r\n    mw.visitJumpInsn(IFEQ, elseLabel);\r\n    Class<?> propertyClass = property.fieldClass;\r\n    if (propertyClass == boolean.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"boolean\"));\r\n        mw.visitJumpInsn(IFEQ, _end);\r\n    } else if (propertyClass == byte.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"byte\"));\r\n        mw.visitJumpInsn(IFEQ, _end);\r\n    } else if (propertyClass == short.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"short\"));\r\n        mw.visitJumpInsn(IFEQ, _end);\r\n    } else if (propertyClass == int.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"int\"));\r\n        mw.visitJumpInsn(IFEQ, _end);\r\n    } else if (propertyClass == long.class) {\r\n        mw.visitVarInsn(LLOAD, context.var(\"long\"));\r\n        mw.visitInsn(LCONST_0);\r\n        mw.visitInsn(LCMP);\r\n        mw.visitJumpInsn(IFEQ, _end);\r\n    } else if (propertyClass == float.class) {\r\n        mw.visitVarInsn(FLOAD, context.var(\"float\"));\r\n        mw.visitInsn(FCONST_0);\r\n        mw.visitInsn(FCMPL);\r\n        mw.visitJumpInsn(IFEQ, _end);\r\n    } else if (propertyClass == double.class) {\r\n        mw.visitVarInsn(DLOAD, context.var(\"double\"));\r\n        mw.visitInsn(DCONST_0);\r\n        mw.visitInsn(DCMPL);\r\n        mw.visitJumpInsn(IFEQ, _end);\r\n    }\r\n    mw.visitLabel(elseLabel);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._notWriteDefault", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._notWriteDefault(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context, com.alibaba.fastjson.asm.Label)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_apply", "return_type": "void", "signature": "_apply(MethodVisitor, FieldInfo, Context)", "body_content": "{\r\n    Class<?> propertyClass = property.fieldClass;\r\n    // this\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, Context.serializer);\r\n    mw.visitVarInsn(ALOAD, Context.obj);\r\n    mw.visitVarInsn(ALOAD, Context.fieldName);\r\n    if (propertyClass == byte.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"byte\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Byte\", \"valueOf\", \"(B)Ljava/lang/Byte;\");\r\n    } else if (propertyClass == short.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"short\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Short\", \"valueOf\", \"(S)Ljava/lang/Short;\");\r\n    } else if (propertyClass == int.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"int\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\");\r\n    } else if (propertyClass == char.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"char\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Character\", \"valueOf\", \"(C)Ljava/lang/Character;\");\r\n    } else if (propertyClass == long.class) {\r\n        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Long\", \"valueOf\", \"(J)Ljava/lang/Long;\");\r\n    } else if (propertyClass == float.class) {\r\n        mw.visitVarInsn(FLOAD, context.var(\"float\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Float\", \"valueOf\", \"(F)Ljava/lang/Float;\");\r\n    } else if (propertyClass == double.class) {\r\n        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Double\", \"valueOf\", \"(D)Ljava/lang/Double;\");\r\n    } else if (propertyClass == boolean.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"boolean\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Boolean\", \"valueOf\", \"(Z)Ljava/lang/Boolean;\");\r\n    } else if (propertyClass == BigDecimal.class) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"decimal\"));\r\n    } else if (propertyClass == String.class) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"string\"));\r\n    } else if (propertyClass.isEnum()) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"enum\"));\r\n    } else if (List.class.isAssignableFrom(propertyClass)) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"list\"));\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, context.var(\"object\"));\r\n    }\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JavaBeanSerializer, \"apply\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z\");\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._apply", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._apply(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_processValue", "return_type": "void", "signature": "_processValue(MethodVisitor, FieldInfo, Context, Label)", "body_content": "{\r\n    Label processKeyElse_ = new Label();\r\n    Class<?> fieldClass = fieldInfo.fieldClass;\r\n    if (fieldClass.isPrimitive()) {\r\n        Label checkValueEnd_ = new Label();\r\n        mw.visitVarInsn(ILOAD, context.var(\"checkValue\"));\r\n        mw.visitJumpInsn(IFNE, checkValueEnd_);\r\n        mw.visitInsn(ACONST_NULL);\r\n        mw.visitInsn(DUP);\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n        mw.visitVarInsn(ASTORE, Context.processValue);\r\n        mw.visitJumpInsn(GOTO, processKeyElse_);\r\n        mw.visitLabel(checkValueEnd_);\r\n    }\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, Context.serializer);\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitLdcInsn(context.getFieldOrinal(fieldInfo.name));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JavaBeanSerializer, \"getBeanContext\", \"(I)\" + desc(BeanContext.class));\r\n    mw.visitVarInsn(ALOAD, Context.obj);\r\n    mw.visitVarInsn(ALOAD, Context.fieldName);\r\n    String valueDesc = \"Ljava/lang/Object;\";\r\n    if (fieldClass == byte.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"byte\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Byte\", \"valueOf\", \"(B)Ljava/lang/Byte;\");\r\n        mw.visitInsn(DUP);\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n    } else if (fieldClass == short.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"short\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Short\", \"valueOf\", \"(S)Ljava/lang/Short;\");\r\n        mw.visitInsn(DUP);\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n    } else if (fieldClass == int.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"int\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\");\r\n        mw.visitInsn(DUP);\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n    } else if (fieldClass == char.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"char\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Character\", \"valueOf\", \"(C)Ljava/lang/Character;\");\r\n        mw.visitInsn(DUP);\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n    } else if (fieldClass == long.class) {\r\n        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Long\", \"valueOf\", \"(J)Ljava/lang/Long;\");\r\n        mw.visitInsn(DUP);\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n    } else if (fieldClass == float.class) {\r\n        mw.visitVarInsn(FLOAD, context.var(\"float\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Float\", \"valueOf\", \"(F)Ljava/lang/Float;\");\r\n        mw.visitInsn(DUP);\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n    } else if (fieldClass == double.class) {\r\n        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Double\", \"valueOf\", \"(D)Ljava/lang/Double;\");\r\n        mw.visitInsn(DUP);\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n    } else if (fieldClass == boolean.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"boolean\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Boolean\", \"valueOf\", \"(Z)Ljava/lang/Boolean;\");\r\n        mw.visitInsn(DUP);\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n    } else if (fieldClass == BigDecimal.class) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"decimal\"));\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n        mw.visitVarInsn(ALOAD, Context.original);\r\n    } else if (fieldClass == String.class) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"string\"));\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n        mw.visitVarInsn(ALOAD, Context.original);\r\n    } else if (fieldClass.isEnum()) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"enum\"));\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n        mw.visitVarInsn(ALOAD, Context.original);\r\n    } else if (List.class.isAssignableFrom(fieldClass)) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"list\"));\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n        mw.visitVarInsn(ALOAD, Context.original);\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, context.var(\"object\"));\r\n        mw.visitVarInsn(ASTORE, Context.original);\r\n        mw.visitVarInsn(ALOAD, Context.original);\r\n    }\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JavaBeanSerializer, \"processValue\", // \r\n    \"(L\" + JSONSerializer + \";\" + // \r\n    desc(BeanContext.class) + // \r\n    \"Ljava/lang/Object;Ljava/lang/String;\" + valueDesc + \")Ljava/lang/Object;\");\r\n    mw.visitVarInsn(ASTORE, Context.processValue);\r\n    mw.visitVarInsn(ALOAD, Context.original);\r\n    mw.visitVarInsn(ALOAD, Context.processValue);\r\n    mw.visitJumpInsn(IF_ACMPEQ, processKeyElse_);\r\n    _writeObject(mw, fieldInfo, context, _end);\r\n    mw.visitJumpInsn(GOTO, _end);\r\n    mw.visitLabel(processKeyElse_);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._processValue", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._processValue(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context, com.alibaba.fastjson.asm.Label)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_processKey", "return_type": "void", "signature": "_processKey(MethodVisitor, FieldInfo, Context)", "body_content": "{\r\n    Label _else_processKey = new Label();\r\n    mw.visitVarInsn(ILOAD, context.var(\"hasNameFilters\"));\r\n    mw.visitJumpInsn(IFEQ, _else_processKey);\r\n    Class<?> propertyClass = property.fieldClass;\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, Context.serializer);\r\n    mw.visitVarInsn(ALOAD, Context.obj);\r\n    mw.visitVarInsn(ALOAD, Context.fieldName);\r\n    if (propertyClass == byte.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"byte\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Byte\", \"valueOf\", \"(B)Ljava/lang/Byte;\");\r\n    } else if (propertyClass == short.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"short\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Short\", \"valueOf\", \"(S)Ljava/lang/Short;\");\r\n    } else if (propertyClass == int.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"int\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\");\r\n    } else if (propertyClass == char.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"char\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Character\", \"valueOf\", \"(C)Ljava/lang/Character;\");\r\n    } else if (propertyClass == long.class) {\r\n        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Long\", \"valueOf\", \"(J)Ljava/lang/Long;\");\r\n    } else if (propertyClass == float.class) {\r\n        mw.visitVarInsn(FLOAD, context.var(\"float\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Float\", \"valueOf\", \"(F)Ljava/lang/Float;\");\r\n    } else if (propertyClass == double.class) {\r\n        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Double\", \"valueOf\", \"(D)Ljava/lang/Double;\");\r\n    } else if (propertyClass == boolean.class) {\r\n        mw.visitVarInsn(ILOAD, context.var(\"boolean\"));\r\n        mw.visitMethodInsn(INVOKESTATIC, \"java/lang/Boolean\", \"valueOf\", \"(Z)Ljava/lang/Boolean;\");\r\n    } else if (propertyClass == BigDecimal.class) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"decimal\"));\r\n    } else if (propertyClass == String.class) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"string\"));\r\n    } else if (propertyClass.isEnum()) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"enum\"));\r\n    } else if (List.class.isAssignableFrom(propertyClass)) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"list\"));\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, context.var(\"object\"));\r\n    }\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JavaBeanSerializer, \"processKey\", \"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;\");\r\n    mw.visitVarInsn(ASTORE, Context.fieldName);\r\n    mw.visitLabel(_else_processKey);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._processKey", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._processKey(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_if_write_null", "return_type": "void", "signature": "_if_write_null(MethodVisitor, FieldInfo, Context)", "body_content": "{\r\n    Class<?> propertyClass = fieldInfo.fieldClass;\r\n    Label _if = new Label();\r\n    Label _else = new Label();\r\n    Label _write_null = new Label();\r\n    Label _end_if = new Label();\r\n    mw.visitLabel(_if);\r\n    JSONField annotation = fieldInfo.getAnnotation();\r\n    int features = 0;\r\n    if (annotation != null) {\r\n        features = SerializerFeature.of(annotation.serialzeFeatures());\r\n        ;\r\n    }\r\n    if ((features & SerializerFeature.WRITE_MAP_NULL_FEATURES) == 0) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitLdcInsn(SerializerFeature.WRITE_MAP_NULL_FEATURES);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"isEnabled\", \"(I)Z\");\r\n        mw.visitJumpInsn(IFEQ, _else);\r\n    }\r\n    mw.visitLabel(_write_null);\r\n    mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n    mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"write\", \"(I)V\");\r\n    _writeFieldName(mw, context);\r\n    mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n    mw.visitLdcInsn(features);\r\n    // features\r\n    if (propertyClass == String.class || propertyClass == Character.class) {\r\n        mw.visitLdcInsn(SerializerFeature.WriteNullStringAsEmpty.mask);\r\n    } else if (Number.class.isAssignableFrom(propertyClass)) {\r\n        mw.visitLdcInsn(SerializerFeature.WriteNullNumberAsZero.mask);\r\n    } else if (propertyClass == Boolean.class) {\r\n        mw.visitLdcInsn(SerializerFeature.WriteNullBooleanAsFalse.mask);\r\n    } else if (Collection.class.isAssignableFrom(propertyClass) || propertyClass.isArray()) {\r\n        mw.visitLdcInsn(SerializerFeature.WriteNullListAsEmpty.mask);\r\n    } else {\r\n        mw.visitLdcInsn(0);\r\n    }\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeNull\", \"(II)V\");\r\n    // seperator = ',';\r\n    _seperator(mw, context);\r\n    mw.visitJumpInsn(GOTO, _end_if);\r\n    mw.visitLabel(_else);\r\n    mw.visitLabel(_end_if);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._if_write_null", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._if_write_null(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_writeFieldName", "return_type": "void", "signature": "_writeFieldName(MethodVisitor, Context)", "body_content": "{\r\n    if (context.writeDirect) {\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitVarInsn(ALOAD, Context.fieldName);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldNameDirect\", \"(Ljava/lang/String;)V\");\r\n    } else {\r\n        mw.visitVarInsn(ALOAD, context.var(\"out\"));\r\n        mw.visitVarInsn(ALOAD, Context.fieldName);\r\n        mw.visitInsn(ICONST_0);\r\n        mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldName\", \"(Ljava/lang/String;Z)V\");\r\n    }\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._writeFieldName", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._writeFieldName(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_seperator", "return_type": "void", "signature": "_seperator(MethodVisitor, Context)", "body_content": "{\r\n    mw.visitVarInsn(BIPUSH, ',');\r\n    mw.visitVarInsn(ISTORE, context.var(\"seperator\"));\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._seperator", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._seperator(com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.serializer.ASMSerializerFactory.Context)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_getListFieldItemSer", "return_type": "void", "signature": "_getListFieldItemSer(Context, MethodVisitor, FieldInfo, Class)", "body_content": "{\r\n    Label notNull_ = new Label();\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_list_item_ser_\", ObjectSerializer_desc);\r\n    mw.visitJumpInsn(IFNONNULL, notNull_);\r\n    // this\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, Context.serializer);\r\n    mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(itemType)));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"getObjectWriter\", \"(Ljava/lang/Class;)\" + ObjectSerializer_desc);\r\n    mw.visitFieldInsn(PUTFIELD, context.className, fieldInfo.name + \"_asm_list_item_ser_\", ObjectSerializer_desc);\r\n    mw.visitLabel(notNull_);\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_list_item_ser_\", ObjectSerializer_desc);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._getListFieldItemSer", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._getListFieldItemSer(com.alibaba.fastjson.serializer.ASMSerializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo, java.lang.Class<?>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "_getFieldSer", "return_type": "void", "signature": "_getFieldSer(Context, MethodVisitor, FieldInfo)", "body_content": "{\r\n    Label notNull_ = new Label();\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_ser_\", ObjectSerializer_desc);\r\n    mw.visitJumpInsn(IFNONNULL, notNull_);\r\n    // this\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitVarInsn(ALOAD, Context.serializer);\r\n    mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldInfo.fieldClass)));\r\n    mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer, \"getObjectWriter\", \"(Ljava/lang/Class;)\" + ObjectSerializer_desc);\r\n    mw.visitFieldInsn(PUTFIELD, context.className, fieldInfo.name + \"_asm_ser_\", ObjectSerializer_desc);\r\n    mw.visitLabel(notNull_);\r\n    mw.visitVarInsn(ALOAD, 0);\r\n    mw.visitFieldInsn(GETFIELD, context.className, fieldInfo.name + \"_asm_ser_\", ObjectSerializer_desc);\r\n}", "class_name": "ASMSerializerFactory", "qualified_method_name": "com.alibaba.fastjson.serializer.ASMSerializerFactory._getFieldSer", "qualified_signature": "com.alibaba.fastjson.serializer.ASMSerializerFactory._getFieldSer(com.alibaba.fastjson.serializer.ASMSerializerFactory.Context, com.alibaba.fastjson.asm.MethodVisitor, com.alibaba.fastjson.util.FieldInfo)", "qualified_return_type": "void"}
{"java_doc": "Gets underlying {@code Type} instance.\r\n", "method_name": "getType", "return_type": "Type", "signature": "getType()", "body_content": "{\r\n    return type;\r\n}", "class_name": "TypeReference", "qualified_method_name": "com.alibaba.fastjson.TypeReference.getType", "qualified_signature": "com.alibaba.fastjson.TypeReference.getType()", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    Character value = (Character) object;\r\n    if (value == null) {\r\n        out.writeString(\"\");\r\n        return;\r\n    }\r\n    char c = value.charValue();\r\n    if (c == 0) {\r\n        out.writeString(\"\\u0000\");\r\n    } else {\r\n        out.writeString(value.toString());\r\n    }\r\n}", "class_name": "CharacterCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.CharacterCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.CharacterCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    Object value = parser.parse();\r\n    return // \r\n    value == null ? // \r\n    null : (T) TypeUtils.castToChar(value);\r\n}", "class_name": "CharacterCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.CharacterCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.CharacterCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_STRING;\r\n}", "class_name": "CharacterCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.CharacterCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.CharacterCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "Puts a byte into this byte vector. The byte vector is automatically enlarged if necessary.\r\n\r\n@param b a byte.\r\n@return this byte vector.\r\n", "method_name": "putByte", "return_type": "ByteVector", "signature": "putByte(int)", "body_content": "{\r\n    int length = this.length;\r\n    if (length + 1 > data.length) {\r\n        enlarge(1);\r\n    }\r\n    data[length++] = (byte) b;\r\n    this.length = length;\r\n    return this;\r\n}", "class_name": "ByteVector", "qualified_method_name": "com.alibaba.fastjson.asm.ByteVector.putByte", "qualified_signature": "com.alibaba.fastjson.asm.ByteVector.putByte(int)", "qualified_return_type": "com.alibaba.fastjson.asm.ByteVector"}
{"java_doc": "Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\r\n\r\n@param b1 a byte.\r\n@param b2 another byte.\r\n@return this byte vector.\r\n", "method_name": "put11", "return_type": "ByteVector", "signature": "put11(int, int)", "body_content": "{\r\n    int length = this.length;\r\n    if (length + 2 > data.length) {\r\n        enlarge(2);\r\n    }\r\n    byte[] data = this.data;\r\n    data[length++] = (byte) b1;\r\n    data[length++] = (byte) b2;\r\n    this.length = length;\r\n    return this;\r\n}", "class_name": "ByteVector", "qualified_method_name": "com.alibaba.fastjson.asm.ByteVector.put11", "qualified_signature": "com.alibaba.fastjson.asm.ByteVector.put11(int, int)", "qualified_return_type": "com.alibaba.fastjson.asm.ByteVector"}
{"java_doc": "Puts a short into this byte vector. The byte vector is automatically enlarged if necessary.\r\n\r\n@param s a short.\r\n@return this byte vector.\r\n", "method_name": "putShort", "return_type": "ByteVector", "signature": "putShort(int)", "body_content": "{\r\n    int length = this.length;\r\n    if (length + 2 > data.length) {\r\n        enlarge(2);\r\n    }\r\n    byte[] data = this.data;\r\n    data[length++] = (byte) (s >>> 8);\r\n    data[length++] = (byte) s;\r\n    this.length = length;\r\n    return this;\r\n}", "class_name": "ByteVector", "qualified_method_name": "com.alibaba.fastjson.asm.ByteVector.putShort", "qualified_signature": "com.alibaba.fastjson.asm.ByteVector.putShort(int)", "qualified_return_type": "com.alibaba.fastjson.asm.ByteVector"}
{"java_doc": "Puts a byte and a short into this byte vector. The byte vector is automatically enlarged if necessary.\r\n\r\n@param b a byte.\r\n@param s a short.\r\n@return this byte vector.\r\n", "method_name": "put12", "return_type": "ByteVector", "signature": "put12(int, int)", "body_content": "{\r\n    int length = this.length;\r\n    if (length + 3 > data.length) {\r\n        enlarge(3);\r\n    }\r\n    byte[] data = this.data;\r\n    data[length++] = (byte) b;\r\n    data[length++] = (byte) (s >>> 8);\r\n    data[length++] = (byte) s;\r\n    this.length = length;\r\n    return this;\r\n}", "class_name": "ByteVector", "qualified_method_name": "com.alibaba.fastjson.asm.ByteVector.put12", "qualified_signature": "com.alibaba.fastjson.asm.ByteVector.put12(int, int)", "qualified_return_type": "com.alibaba.fastjson.asm.ByteVector"}
{"java_doc": "Puts an int into this byte vector. The byte vector is automatically enlarged if necessary.\r\n\r\n@param i an int.\r\n@return this byte vector.\r\n", "method_name": "putInt", "return_type": "ByteVector", "signature": "putInt(int)", "body_content": "{\r\n    int length = this.length;\r\n    if (length + 4 > data.length) {\r\n        enlarge(4);\r\n    }\r\n    byte[] data = this.data;\r\n    data[length++] = (byte) (i >>> 24);\r\n    data[length++] = (byte) (i >>> 16);\r\n    data[length++] = (byte) (i >>> 8);\r\n    data[length++] = (byte) i;\r\n    this.length = length;\r\n    return this;\r\n}", "class_name": "ByteVector", "qualified_method_name": "com.alibaba.fastjson.asm.ByteVector.putInt", "qualified_signature": "com.alibaba.fastjson.asm.ByteVector.putInt(int)", "qualified_return_type": "com.alibaba.fastjson.asm.ByteVector"}
{"java_doc": "Puts an UTF8 string into this byte vector. The byte vector is automatically enlarged if necessary.\r\n\r\n@param s a String.\r\n@return this byte vector.\r\n", "method_name": "putUTF8", "return_type": "ByteVector", "signature": "putUTF8(String)", "body_content": "{\r\n    int charLength = s.length();\r\n    int len = length;\r\n    if (len + 2 + charLength > data.length) {\r\n        enlarge(2 + charLength);\r\n    }\r\n    byte[] data = this.data;\r\n    // optimistic algorithm: instead of computing the byte length and then\r\n    // serializing the string (which requires two loops), we assume the byte\r\n    // length is equal to char length (which is the most frequent case), and\r\n    // we start serializing the string right away. During the serialization,\r\n    // if we find that this assumption is wrong, we continue with the\r\n    // general method.\r\n    data[len++] = (byte) (charLength >>> 8);\r\n    data[len++] = (byte) charLength;\r\n    for (int i = 0; i < charLength; ++i) {\r\n        char c = s.charAt(i);\r\n        if (c >= '\\001' && c <= '\\177') {\r\n            data[len++] = (byte) c;\r\n        } else {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    }\r\n    length = len;\r\n    return this;\r\n}", "class_name": "ByteVector", "qualified_method_name": "com.alibaba.fastjson.asm.ByteVector.putUTF8", "qualified_signature": "com.alibaba.fastjson.asm.ByteVector.putUTF8(java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.asm.ByteVector"}
{"java_doc": "Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if necessary.\r\n\r\n@param b an array of bytes. May be <tt>null</tt> to put <tt>len</tt> null bytes into this byte vector.\r\n@param off index of the fist byte of b that must be copied.\r\n@param len number of bytes of b that must be copied.\r\n@return this byte vector.\r\n", "method_name": "putByteArray", "return_type": "ByteVector", "signature": "putByteArray(byte[], int, int)", "body_content": "{\r\n    if (length + len > data.length) {\r\n        enlarge(len);\r\n    }\r\n    if (b != null) {\r\n        System.arraycopy(b, off, data, length, len);\r\n    }\r\n    length += len;\r\n    return this;\r\n}", "class_name": "ByteVector", "qualified_method_name": "com.alibaba.fastjson.asm.ByteVector.putByteArray", "qualified_signature": "com.alibaba.fastjson.asm.ByteVector.putByteArray(byte[], int, int)", "qualified_return_type": "com.alibaba.fastjson.asm.ByteVector"}
{"java_doc": "Enlarge this byte vector so that it can receive n more bytes.\r\n\r\n@param size number of additional bytes that this byte vector should be able to receive.\r\n", "method_name": "enlarge", "return_type": "void", "signature": "enlarge(int)", "body_content": "{\r\n    int length1 = 2 * data.length;\r\n    int length2 = length + size;\r\n    byte[] newData = new byte[length1 > length2 ? length1 : length2];\r\n    System.arraycopy(data, 0, newData, 0, length);\r\n    data = newData;\r\n}", "class_name": "ByteVector", "qualified_method_name": "com.alibaba.fastjson.asm.ByteVector.enlarge", "qualified_signature": "com.alibaba.fastjson.asm.ByteVector.enlarge(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getMask", "return_type": "int", "signature": "getMask()", "body_content": "{\r\n    return mask;\r\n}", "class_name": "SerializerFeature", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializerFeature.getMask", "qualified_signature": "com.alibaba.fastjson.serializer.SerializerFeature.getMask()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "isEnabled", "return_type": "boolean", "signature": "isEnabled(int, SerializerFeature)", "body_content": "{\r\n    return (features & feature.mask) != 0;\r\n}", "class_name": "SerializerFeature", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializerFeature.isEnabled", "qualified_signature": "com.alibaba.fastjson.serializer.SerializerFeature.isEnabled(int, com.alibaba.fastjson.serializer.SerializerFeature)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isEnabled", "return_type": "boolean", "signature": "isEnabled(int, int, SerializerFeature)", "body_content": "{\r\n    int mask = feature.mask;\r\n    return (features & mask) != 0 || (fieaturesB & mask) != 0;\r\n}", "class_name": "SerializerFeature", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializerFeature.isEnabled", "qualified_signature": "com.alibaba.fastjson.serializer.SerializerFeature.isEnabled(int, int, com.alibaba.fastjson.serializer.SerializerFeature)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "config", "return_type": "int", "signature": "config(int, SerializerFeature, boolean)", "body_content": "{\r\n    if (state) {\r\n        features |= feature.mask;\r\n    } else {\r\n        features &= ~feature.mask;\r\n    }\r\n    return features;\r\n}", "class_name": "SerializerFeature", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializerFeature.config", "qualified_signature": "com.alibaba.fastjson.serializer.SerializerFeature.config(int, com.alibaba.fastjson.serializer.SerializerFeature, boolean)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "of", "return_type": "int", "signature": "of(SerializerFeature[])", "body_content": "{\r\n    if (features == null) {\r\n        return 0;\r\n    }\r\n    int value = 0;\r\n    for (SerializerFeature feature : features) {\r\n        value |= feature.mask;\r\n    }\r\n    return value;\r\n}", "class_name": "SerializerFeature", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializerFeature.of", "qualified_signature": "com.alibaba.fastjson.serializer.SerializerFeature.of(com.alibaba.fastjson.serializer.SerializerFeature[])", "qualified_return_type": "int"}
{"java_doc": "config default type key\r\n\r\n@since 1.2.14\r\n", "method_name": "setDefaultTypeKey", "return_type": "void", "signature": "setDefaultTypeKey(String)", "body_content": "{\r\n    DEFAULT_TYPE_KEY = typeKey;\r\n    ParserConfig.global.symbolTable.addSymbol(typeKey, 0, typeKey.length(), typeKey.hashCode());\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.setDefaultTypeKey", "qualified_signature": "com.alibaba.fastjson.JSON.setDefaultTypeKey(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "parse", "return_type": "Object", "signature": "parse(String)", "body_content": "{\r\n    return parse(text, DEFAULT_PARSER_FEATURE);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parse", "qualified_signature": "com.alibaba.fastjson.JSON.parse(java.lang.String)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "parse", "return_type": "Object", "signature": "parse(String, int)", "body_content": "{\r\n    if (text == null) {\r\n        return null;\r\n    }\r\n    DefaultJSONParser parser = new DefaultJSONParser(text, ParserConfig.getGlobalInstance(), features);\r\n    Object value = parser.parse();\r\n    parser.handleResovleTask(value);\r\n    parser.close();\r\n    return value;\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parse", "qualified_signature": "com.alibaba.fastjson.JSON.parse(java.lang.String, int)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "parse", "return_type": "Object", "signature": "parse(byte[], Feature[])", "body_content": "{\r\n    char[] chars = allocateChars(input.length);\r\n    int len = IOUtils.decodeUTF8(input, 0, input.length, chars);\r\n    return parse(new String(chars, 0, len), features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parse", "qualified_signature": "com.alibaba.fastjson.JSON.parse(byte[], com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "parse", "return_type": "Object", "signature": "parse(byte[], int, int, CharsetDecoder, Feature[])", "body_content": "{\r\n    if (input == null || input.length == 0) {\r\n        return null;\r\n    }\r\n    int featureValues = DEFAULT_PARSER_FEATURE;\r\n    for (Feature feature : features) {\r\n        featureValues = Feature.config(featureValues, feature, true);\r\n    }\r\n    return parse(input, off, len, charsetDecoder, featureValues);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parse", "qualified_signature": "com.alibaba.fastjson.JSON.parse(byte[], int, int, java.nio.charset.CharsetDecoder, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "parse", "return_type": "Object", "signature": "parse(byte[], int, int, CharsetDecoder, int)", "body_content": "{\r\n    charsetDecoder.reset();\r\n    int scaleLength = (int) (len * (double) charsetDecoder.maxCharsPerByte());\r\n    char[] chars = allocateChars(scaleLength);\r\n    ByteBuffer byteBuf = ByteBuffer.wrap(input, off, len);\r\n    CharBuffer charBuf = CharBuffer.wrap(chars);\r\n    IOUtils.decode(charsetDecoder, byteBuf, charBuf);\r\n    int position = charBuf.position();\r\n    DefaultJSONParser parser = new DefaultJSONParser(chars, position, ParserConfig.getGlobalInstance(), features);\r\n    Object value = parser.parse();\r\n    parser.handleResovleTask(value);\r\n    parser.close();\r\n    return value;\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parse", "qualified_signature": "com.alibaba.fastjson.JSON.parse(byte[], int, int, java.nio.charset.CharsetDecoder, int)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "parse", "return_type": "Object", "signature": "parse(String, Feature[])", "body_content": "{\r\n    int featureValues = DEFAULT_PARSER_FEATURE;\r\n    for (Feature feature : features) {\r\n        featureValues = Feature.config(featureValues, feature, true);\r\n    }\r\n    return parse(text, featureValues);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parse", "qualified_signature": "com.alibaba.fastjson.JSON.parse(java.lang.String, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "parseObject", "return_type": "JSONObject", "signature": "parseObject(String, Feature[])", "body_content": "{\r\n    return (JSONObject) parse(text, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.lang.String, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "com.alibaba.fastjson.JSONObject"}
{"java_doc": "", "method_name": "parseObject", "return_type": "JSONObject", "signature": "parseObject(String)", "body_content": "{\r\n    Object obj = parse(text);\r\n    if (obj instanceof JSONObject) {\r\n        return (JSONObject) obj;\r\n    }\r\n    return (JSONObject) JSON.toJSON(obj);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.JSONObject"}
{"java_doc": "<pre>\r\nString jsonStr = \"[{\\\"id\\\":1001,\\\"name\\\":\\\"Jobs\\\"}]\";\r\nList&lt;Model&gt; models = JSON.parseObject(jsonStr, new TypeReference&lt;List&lt;Model&gt;&gt;() {});\r\n</pre>\r\n\r\n@param text json string\r\n@param type type refernce\r\n@param features\r\n@return\r\n", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(String, TypeReference, Feature[])", "body_content": "{\r\n    return (T) parseObject(text, type.type, ParserConfig.global, DEFAULT_PARSER_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.lang.String, com.alibaba.fastjson.TypeReference<T>, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "This method deserializes the specified Json into an object of the specified class. It is not\r\nsuitable to use if the specified class is a generic type since it will not have the generic\r\ntype information because of the Type Erasure feature of Java. Therefore, this method should not\r\nbe used if the desired type is a generic type. Note that this method works fine if the any of\r\nthe fields of the specified object are generics, just the object itself should not be a\r\ngeneric type. For the cases when the object is of generic type, invoke\r\n{@link #parseObject(String, Type, Feature[])}. If you have the Json in a {@link InputStream} instead of\r\na String, use {@link #parseObject(InputStream, Type, Feature[])} instead.\r\n\r\n@param json the string from which the object is to be deserialized\r\n@param clazz the class of T\r\n@param features parser features\r\n@return an object of type T from the string\r\nclassOfT\r\n", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(String, Class, Feature[])", "body_content": "{\r\n    return (T) parseObject(json, (Type) clazz, ParserConfig.global, null, DEFAULT_PARSER_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.lang.String, java.lang.Class<T>, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(String, Class, ParseProcess, Feature[])", "body_content": "{\r\n    return (T) parseObject(text, (Type) clazz, ParserConfig.global, processor, DEFAULT_PARSER_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.lang.String, java.lang.Class<T>, com.alibaba.fastjson.parser.deserializer.ParseProcess, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "This method deserializes the specified Json into an object of the specified type. This method\r\nis useful if the specified object is a generic type. For non-generic objects, use\r\n{@link #parseObject(String, Class, Feature[])} instead. If you have the Json in a {@link InputStream} instead of\r\na String, use {@link #parseObject(InputStream, Type, Feature[])} instead.\r\n\r\n@param <T> the type of the desired object\r\n@param json the string from which the object is to be deserialized\r\n@param type The specific genericized type of src. You can obtain this type by using the\r\n{@link com.alibaba.fastjson.TypeReference} class. For example, to get the type for\r\n{@code Collection<Foo>}, you should use:\r\n<pre>\r\nType type = new TypeReference&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\r\n</pre>\r\n@return an object of type T from the string\r\n", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(String, Type, Feature[])", "body_content": "{\r\n    return (T) parseObject(json, type, ParserConfig.global, DEFAULT_PARSER_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.lang.String, java.lang.reflect.Type, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(String, Type, ParseProcess, Feature[])", "body_content": "{\r\n    return (T) parseObject(input, clazz, ParserConfig.global, processor, DEFAULT_PARSER_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.lang.String, java.lang.reflect.Type, com.alibaba.fastjson.parser.deserializer.ParseProcess, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(String, Type, int, Feature[])", "body_content": "{\r\n    if (input == null) {\r\n        return null;\r\n    }\r\n    for (Feature feature : features) {\r\n        featureValues = Feature.config(featureValues, feature, true);\r\n    }\r\n    DefaultJSONParser parser = new DefaultJSONParser(input, ParserConfig.getGlobalInstance(), featureValues);\r\n    T value = (T) parser.parseObject(clazz);\r\n    parser.handleResovleTask(value);\r\n    parser.close();\r\n    return (T) value;\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.lang.String, java.lang.reflect.Type, int, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "\r\n@since 1.2.11\r\n", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(String, Type, ParserConfig, Feature[])", "body_content": "{\r\n    return parseObject(input, clazz, config, null, DEFAULT_PARSER_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.lang.String, java.lang.reflect.Type, com.alibaba.fastjson.parser.ParserConfig, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(String, Type, ParserConfig, int, Feature[])", "body_content": "{\r\n    return parseObject(input, clazz, config, null, featureValues, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.lang.String, java.lang.reflect.Type, com.alibaba.fastjson.parser.ParserConfig, int, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(String, Type, ParserConfig, ParseProcess, int, Feature[])", "body_content": "{\r\n    if (input == null) {\r\n        return null;\r\n    }\r\n    if (features != null) {\r\n        for (Feature feature : features) {\r\n            featureValues |= feature.mask;\r\n        }\r\n    }\r\n    DefaultJSONParser parser = new DefaultJSONParser(input, config, featureValues);\r\n    if (processor != null) {\r\n        if (processor instanceof ExtraTypeProvider) {\r\n            parser.getExtraTypeProviders().add((ExtraTypeProvider) processor);\r\n        }\r\n        if (processor instanceof ExtraProcessor) {\r\n            parser.getExtraProcessors().add((ExtraProcessor) processor);\r\n        }\r\n        if (processor instanceof FieldTypeResolver) {\r\n            parser.setFieldTypeResolver((FieldTypeResolver) processor);\r\n        }\r\n    }\r\n    T value = (T) parser.parseObject(clazz, null);\r\n    parser.handleResovleTask(value);\r\n    parser.close();\r\n    return (T) value;\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.lang.String, java.lang.reflect.Type, com.alibaba.fastjson.parser.ParserConfig, com.alibaba.fastjson.parser.deserializer.ParseProcess, int, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(byte[], Type, Feature[])", "body_content": "{\r\n    return (T) parseObject(bytes, 0, bytes.length, IOUtils.UTF8, clazz, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(byte[], java.lang.reflect.Type, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "\r\n@since 1.2.11\r\n", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(byte[], int, int, Charset, Type, Feature[])", "body_content": "{\r\n    if (charset == null) {\r\n        charset = IOUtils.UTF8;\r\n    }\r\n    String strVal;\r\n    if (charset == IOUtils.UTF8) {\r\n        char[] chars = allocateChars(bytes.length);\r\n        int chars_len = IOUtils.decodeUTF8(bytes, offset, len, chars);\r\n        strVal = new String(chars, 0, chars_len);\r\n    } else {\r\n        strVal = new String(bytes, offset, len, charset);\r\n    }\r\n    return (T) parseObject(strVal, clazz, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(byte[], int, int, java.nio.charset.Charset, java.lang.reflect.Type, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "// \r\nparseObject", "return_type": "// \r\nT", "signature": "parseObject(byte[], int, int, CharsetDecoder, Type, Feature[])", "body_content": "{\r\n    charsetDecoder.reset();\r\n    int scaleLength = (int) (len * (double) charsetDecoder.maxCharsPerByte());\r\n    char[] chars = allocateChars(scaleLength);\r\n    ByteBuffer byteBuf = ByteBuffer.wrap(input, off, len);\r\n    CharBuffer charByte = CharBuffer.wrap(chars);\r\n    IOUtils.decode(charsetDecoder, byteBuf, charByte);\r\n    int position = charByte.position();\r\n    return (T) parseObject(chars, position, clazz, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(byte[], int, int, java.nio.charset.CharsetDecoder, java.lang.reflect.Type, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(char[], int, Type, Feature[])", "body_content": "{\r\n    if (input == null || input.length == 0) {\r\n        return null;\r\n    }\r\n    int featureValues = DEFAULT_PARSER_FEATURE;\r\n    for (Feature feature : features) {\r\n        featureValues = Feature.config(featureValues, feature, true);\r\n    }\r\n    DefaultJSONParser parser = new DefaultJSONParser(input, length, ParserConfig.getGlobalInstance(), featureValues);\r\n    T value = (T) parser.parseObject(clazz);\r\n    parser.handleResovleTask(value);\r\n    parser.close();\r\n    return (T) value;\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(char[], int, java.lang.reflect.Type, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "\r\n@since 1.2.11\r\n", "method_name": "// \r\nparseObject", "return_type": "// \r\nT", "signature": "parseObject(InputStream, Type, Feature[])", "body_content": "{\r\n    return (T) parseObject(is, IOUtils.UTF8, type, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.io.InputStream, java.lang.reflect.Type, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "\r\n@since 1.2.11\r\n", "method_name": "// \r\nparseObject", "return_type": "// \r\nT", "signature": "parseObject(InputStream, Charset, Type, Feature[])", "body_content": "{\r\n    if (charset == null) {\r\n        charset = IOUtils.UTF8;\r\n    }\r\n    byte[] bytes = allocateBytes(1024 * 64);\r\n    int offset = 0;\r\n    for (; ; ) {\r\n        int readCount = is.read(bytes, offset, bytes.length - offset);\r\n        if (readCount == -1) {\r\n            break;\r\n        }\r\n        offset += readCount;\r\n        if (offset == bytes.length) {\r\n            byte[] newBytes = new byte[bytes.length * 3 / 2];\r\n            System.arraycopy(bytes, 0, newBytes, 0, bytes.length);\r\n            bytes = newBytes;\r\n        }\r\n    }\r\n    return (T) parseObject(bytes, 0, offset, charset, type, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.io.InputStream, java.nio.charset.Charset, java.lang.reflect.Type, com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(String, Class)", "body_content": "{\r\n    return parseObject(text, clazz, new Feature[0]);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseObject", "qualified_signature": "com.alibaba.fastjson.JSON.parseObject(java.lang.String, java.lang.Class<T>)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseArray", "return_type": "JSONArray", "signature": "parseArray(String)", "body_content": "{\r\n    if (text == null) {\r\n        return null;\r\n    }\r\n    DefaultJSONParser parser = new DefaultJSONParser(text, ParserConfig.getGlobalInstance());\r\n    JSONArray array;\r\n    JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.NULL) {\r\n        lexer.nextToken();\r\n        array = null;\r\n    } else if (lexer.token() == JSONToken.EOF) {\r\n        array = null;\r\n    } else {\r\n        array = new JSONArray();\r\n        parser.parseArray(array);\r\n        parser.handleResovleTask(array);\r\n    }\r\n    parser.close();\r\n    return array;\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseArray", "qualified_signature": "com.alibaba.fastjson.JSON.parseArray(java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.JSONArray"}
{"java_doc": "", "method_name": "parseArray", "return_type": "List<T>", "signature": "parseArray(String, Class)", "body_content": "{\r\n    if (text == null) {\r\n        return null;\r\n    }\r\n    List<T> list;\r\n    DefaultJSONParser parser = new DefaultJSONParser(text, ParserConfig.getGlobalInstance());\r\n    JSONLexer lexer = parser.lexer;\r\n    int token = lexer.token();\r\n    if (token == JSONToken.NULL) {\r\n        lexer.nextToken();\r\n        list = null;\r\n    } else if (token == JSONToken.EOF && lexer.isBlankInput()) {\r\n        list = null;\r\n    } else {\r\n        list = new ArrayList<T>();\r\n        parser.parseArray(clazz, list);\r\n        parser.handleResovleTask(list);\r\n    }\r\n    parser.close();\r\n    return list;\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseArray", "qualified_signature": "com.alibaba.fastjson.JSON.parseArray(java.lang.String, java.lang.Class<T>)", "qualified_return_type": "java.util.List<T>"}
{"java_doc": "", "method_name": "parseArray", "return_type": "List<Object>", "signature": "parseArray(String, Type[])", "body_content": "{\r\n    if (text == null) {\r\n        return null;\r\n    }\r\n    List<Object> list;\r\n    DefaultJSONParser parser = new DefaultJSONParser(text, ParserConfig.getGlobalInstance());\r\n    Object[] objectArray = parser.parseArray(types);\r\n    if (objectArray == null) {\r\n        list = null;\r\n    } else {\r\n        list = Arrays.asList(objectArray);\r\n    }\r\n    parser.handleResovleTask(list);\r\n    parser.close();\r\n    return list;\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.parseArray", "qualified_signature": "com.alibaba.fastjson.JSON.parseArray(java.lang.String, java.lang.reflect.Type[])", "qualified_return_type": "java.util.List<java.lang.Object>"}
{"java_doc": "This method serializes the specified object into its equivalent Json representation. Note that this method works fine if the any of the object fields are of generic type,\r\njust the object itself should not be of a generic type. If you want to write out the object to a\r\n{@link Writer}, use {@link #writeJSONString(Writer, Object, SerializerFeature[])} instead.\r\n\r\n@param object the object for which json representation is to be created setting for fastjson\r\n@return Json representation of {@code object}.\r\n", "method_name": "toJSONString", "return_type": "String", "signature": "toJSONString(Object)", "body_content": "{\r\n    return toJSONString(object, emptyFilters);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONString(java.lang.Object)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "toJSONString", "return_type": "String", "signature": "toJSONString(Object, SerializerFeature[])", "body_content": "{\r\n    return toJSONString(object, DEFAULT_GENERATE_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONString(java.lang.Object, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "java.lang.String"}
{"java_doc": "\r\n@since 1.2.11\r\n", "method_name": "toJSONString", "return_type": "String", "signature": "toJSONString(Object, int, SerializerFeature[])", "body_content": "{\r\n    SerializeWriter out = new SerializeWriter((Writer) null, defaultFeatures, features);\r\n    try {\r\n        JSONSerializer serializer = new JSONSerializer(out);\r\n        serializer.write(object);\r\n        return out.toString();\r\n    } finally {\r\n        out.close();\r\n    }\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONString(java.lang.Object, int, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "java.lang.String"}
{"java_doc": "\r\n@since 1.1.14\r\n", "method_name": "toJSONStringWithDateFormat", "return_type": "String", "signature": "toJSONStringWithDateFormat(Object, String, SerializerFeature[])", "body_content": "{\r\n    return toJSONString(object, SerializeConfig.globalInstance, null, dateFormat, DEFAULT_GENERATE_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONStringWithDateFormat", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONStringWithDateFormat(java.lang.Object, java.lang.String, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "toJSONString", "return_type": "String", "signature": "toJSONString(Object, SerializeFilter, SerializerFeature[])", "body_content": "{\r\n    return toJSONString(object, SerializeConfig.globalInstance, new SerializeFilter[] { filter }, null, DEFAULT_GENERATE_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONString(java.lang.Object, com.alibaba.fastjson.serializer.SerializeFilter, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "toJSONString", "return_type": "String", "signature": "toJSONString(Object, SerializeFilter[], SerializerFeature[])", "body_content": "{\r\n    return toJSONString(object, SerializeConfig.globalInstance, filters, null, DEFAULT_GENERATE_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONString(java.lang.Object, com.alibaba.fastjson.serializer.SerializeFilter[], com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "toJSONBytes", "return_type": "byte[]", "signature": "toJSONBytes(Object, SerializerFeature[])", "body_content": "{\r\n    return toJSONBytes(object, DEFAULT_GENERATE_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONBytes", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONBytes(java.lang.Object, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "byte[]"}
{"java_doc": "\r\n@since 1.2.11\r\n", "method_name": "toJSONBytes", "return_type": "byte[]", "signature": "toJSONBytes(Object, int, SerializerFeature[])", "body_content": "{\r\n    return toJSONBytes(object, SerializeConfig.globalInstance, defaultFeatures, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONBytes", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONBytes(java.lang.Object, int, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "byte[]"}
{"java_doc": "", "method_name": "toJSONString", "return_type": "String", "signature": "toJSONString(Object, SerializeConfig, SerializerFeature[])", "body_content": "{\r\n    return toJSONString(object, config, (SerializeFilter) null, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONString(java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "// \r\ntoJSONString", "return_type": "// \r\nString", "signature": "toJSONString(Object, SerializeConfig, SerializeFilter, SerializerFeature[])", "body_content": "{\r\n    return toJSONString(object, config, new SerializeFilter[] { filter }, null, DEFAULT_GENERATE_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONString(java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig, com.alibaba.fastjson.serializer.SerializeFilter, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "// \r\ntoJSONString", "return_type": "// \r\nString", "signature": "toJSONString(Object, SerializeConfig, SerializeFilter[], SerializerFeature[])", "body_content": "{\r\n    return toJSONString(object, config, filters, null, DEFAULT_GENERATE_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONString(java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig, com.alibaba.fastjson.serializer.SerializeFilter[], com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "java.lang.String"}
{"java_doc": "\r\n@since 1.2.9\r\n@return\r\n", "method_name": "// \r\ntoJSONString", "return_type": "// \r\nString", "signature": "toJSONString(Object, SerializeConfig, SerializeFilter[], String, int, SerializerFeature[])", "body_content": "{\r\n    SerializeWriter out = new SerializeWriter(null, defaultFeatures, features);\r\n    try {\r\n        JSONSerializer serializer = new JSONSerializer(out, config);\r\n        if (dateFormat != null && dateFormat.length() != 0) {\r\n            serializer.setDateFormat(dateFormat);\r\n            serializer.config(SerializerFeature.WriteDateUseDateFormat, true);\r\n        }\r\n        if (filters != null) {\r\n            for (SerializeFilter filter : filters) {\r\n                serializer.addFilter(filter);\r\n            }\r\n        }\r\n        serializer.write(object);\r\n        return out.toString();\r\n    } finally {\r\n        out.close();\r\n    }\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONString(java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig, com.alibaba.fastjson.serializer.SerializeFilter[], java.lang.String, int, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "java.lang.String"}
{"java_doc": "\r\n@deprecated\r\n", "method_name": "toJSONStringZ", "return_type": "String", "signature": "toJSONStringZ(Object, SerializeConfig, SerializerFeature[])", "body_content": "{\r\n    return toJSONString(object, mapping, emptyFilters, null, 0, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONStringZ", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONStringZ(java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "toJSONBytes", "return_type": "byte[]", "signature": "toJSONBytes(Object, SerializeConfig, SerializerFeature[])", "body_content": "{\r\n    return toJSONBytes(object, config, DEFAULT_GENERATE_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONBytes", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONBytes(java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "byte[]"}
{"java_doc": "\r\n@since 1.2.11\r\n", "method_name": "toJSONBytes", "return_type": "byte[]", "signature": "toJSONBytes(Object, SerializeConfig, int, SerializerFeature[])", "body_content": "{\r\n    SerializeWriter out = new SerializeWriter(null, defaultFeatures, features);\r\n    try {\r\n        JSONSerializer serializer = new JSONSerializer(out, config);\r\n        serializer.write(object);\r\n        return out.toBytes(IOUtils.UTF8);\r\n    } finally {\r\n        out.close();\r\n    }\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONBytes", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONBytes(java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig, int, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "byte[]"}
{"java_doc": "", "method_name": "toJSONString", "return_type": "String", "signature": "toJSONString(Object, boolean)", "body_content": "{\r\n    if (!prettyFormat) {\r\n        return toJSONString(object);\r\n    }\r\n    return toJSONString(object, SerializerFeature.PrettyFormat);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONString(java.lang.Object, boolean)", "qualified_return_type": "java.lang.String"}
{"java_doc": "\r\n@deprecated use writeJSONString\r\n", "method_name": "writeJSONStringTo", "return_type": "void", "signature": "writeJSONStringTo(Object, Writer, SerializerFeature[])", "body_content": "{\r\n    writeJSONString(writer, object, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.writeJSONStringTo", "qualified_signature": "com.alibaba.fastjson.JSON.writeJSONStringTo(java.lang.Object, java.io.Writer, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "void"}
{"java_doc": "This method serializes the specified object into its equivalent json representation.\r\n\r\n@param writer Writer to which the json representation needs to be written\r\n@param object the object for which json representation is to be created setting for fastjson\r\n@param features serializer features\r\n@since 1.2.11\r\n", "method_name": "writeJSONString", "return_type": "void", "signature": "writeJSONString(Writer, Object, SerializerFeature[])", "body_content": "{\r\n    writeJSONString(writer, object, JSON.DEFAULT_GENERATE_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.writeJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.writeJSONString(java.io.Writer, java.lang.Object, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "void"}
{"java_doc": "\r\n@since 1.2.11\r\n", "method_name": "writeJSONString", "return_type": "void", "signature": "writeJSONString(Writer, Object, int, SerializerFeature[])", "body_content": "{\r\n    SerializeWriter out = new SerializeWriter(writer, defaultFeatures, features);\r\n    try {\r\n        JSONSerializer serializer = new JSONSerializer(out);\r\n        serializer.write(object);\r\n    } finally {\r\n        out.close();\r\n    }\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.writeJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.writeJSONString(java.io.Writer, java.lang.Object, int, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "void"}
{"java_doc": "write object as json to OutputStream\r\n\r\n@param os output stream\r\n@param object\r\n@param features serializer features\r\n@since 1.2.11\r\n@throws IOException\r\n", "method_name": "// \r\nwriteJSONString", "return_type": "// \r\nint", "signature": "writeJSONString(OutputStream, Object, SerializerFeature[])", "body_content": "{\r\n    return writeJSONString(os, object, DEFAULT_GENERATE_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.writeJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.writeJSONString(java.io.OutputStream, java.lang.Object, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "int"}
{"java_doc": "\r\n@since 1.2.11\r\n", "method_name": "// \r\nwriteJSONString", "return_type": "// \r\nint", "signature": "writeJSONString(OutputStream, Object, int, SerializerFeature[])", "body_content": "{\r\n    return // \r\n    writeJSONString(// \r\n    os, // \r\n    IOUtils.UTF8, // \r\n    object, // \r\n    SerializeConfig.globalInstance, // \r\n    null, // \r\n    null, // \r\n    defaultFeatures, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.writeJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.writeJSONString(java.io.OutputStream, java.lang.Object, int, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "// \r\nwriteJSONString", "return_type": "// \r\nint", "signature": "writeJSONString(OutputStream, Charset, Object, SerializerFeature[])", "body_content": "{\r\n    return // \r\n    writeJSONString(// \r\n    os, // \r\n    charset, // \r\n    object, // \r\n    SerializeConfig.globalInstance, // \r\n    null, // \r\n    null, // \r\n    DEFAULT_GENERATE_FEATURE, features);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.writeJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.writeJSONString(java.io.OutputStream, java.nio.charset.Charset, java.lang.Object, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "// \r\nwriteJSONString", "return_type": "// \r\nint", "signature": "writeJSONString(OutputStream, Charset, Object, SerializeConfig, SerializeFilter[], String, int, SerializerFeature[])", "body_content": "{\r\n    SerializeWriter writer = new SerializeWriter(null, defaultFeatures, features);\r\n    try {\r\n        JSONSerializer serializer = new JSONSerializer(writer, config);\r\n        if (dateFormat != null && dateFormat.length() != 0) {\r\n            serializer.setDateFormat(dateFormat);\r\n            serializer.config(SerializerFeature.WriteDateUseDateFormat, true);\r\n        }\r\n        if (filters != null) {\r\n            for (SerializeFilter filter : filters) {\r\n                serializer.addFilter(filter);\r\n            }\r\n        }\r\n        serializer.write(object);\r\n        int len = writer.writeToEx(os, charset);\r\n        return len;\r\n    } finally {\r\n        writer.close();\r\n    }\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.writeJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.writeJSONString(java.io.OutputStream, java.nio.charset.Charset, java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig, com.alibaba.fastjson.serializer.SerializeFilter[], java.lang.String, int, com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "toString", "return_type": "String", "signature": "toString()", "body_content": "{\r\n    return toJSONString();\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toString", "qualified_signature": "com.alibaba.fastjson.JSON.toString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "toJSONString", "return_type": "String", "signature": "toJSONString()", "body_content": "{\r\n    SerializeWriter out = new SerializeWriter();\r\n    try {\r\n        new JSONSerializer(out).write(this);\r\n        return out.toString();\r\n    } finally {\r\n        out.close();\r\n    }\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.toJSONString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "writeJSONString", "return_type": "void", "signature": "writeJSONString(Appendable)", "body_content": "{\r\n    SerializeWriter out = new SerializeWriter();\r\n    try {\r\n        new JSONSerializer(out).write(this);\r\n        appendable.append(out.toString());\r\n    } catch (IOException e) {\r\n        throw new JSONException(e.getMessage(), e);\r\n    } finally {\r\n        out.close();\r\n    }\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.writeJSONString", "qualified_signature": "com.alibaba.fastjson.JSON.writeJSONString(java.lang.Appendable)", "qualified_return_type": "void"}
{"java_doc": "This method serializes the specified object into its equivalent representation as a tree of\r\n{@link JSONObject}s.\r\n", "method_name": "toJSON", "return_type": "Object", "signature": "toJSON(Object)", "body_content": "{\r\n    return toJSON(javaObject, SerializeConfig.globalInstance);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSON", "qualified_signature": "com.alibaba.fastjson.JSON.toJSON(java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "\r\n@deprecated\r\n", "method_name": "toJSON", "return_type": "Object", "signature": "toJSON(Object, ParserConfig)", "body_content": "{\r\n    return toJSON(javaObject, SerializeConfig.globalInstance);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSON", "qualified_signature": "com.alibaba.fastjson.JSON.toJSON(java.lang.Object, com.alibaba.fastjson.parser.ParserConfig)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "toJSON", "return_type": "Object", "signature": "toJSON(Object, SerializeConfig)", "body_content": "{\r\n    if (javaObject == null) {\r\n        return null;\r\n    }\r\n    if (javaObject instanceof JSON) {\r\n        return javaObject;\r\n    }\r\n    if (javaObject instanceof Map) {\r\n        Map<Object, Object> map = (Map<Object, Object>) javaObject;\r\n        JSONObject json = new JSONObject(map.size());\r\n        for (Map.Entry<Object, Object> entry : map.entrySet()) {\r\n            Object key = entry.getKey();\r\n            String jsonKey = TypeUtils.castToString(key);\r\n            Object jsonValue = toJSON(entry.getValue());\r\n            json.put(jsonKey, jsonValue);\r\n        }\r\n        return json;\r\n    }\r\n    if (javaObject instanceof Collection) {\r\n        Collection<Object> collection = (Collection<Object>) javaObject;\r\n        JSONArray array = new JSONArray(collection.size());\r\n        for (Object item : collection) {\r\n            Object jsonValue = toJSON(item);\r\n            array.add(jsonValue);\r\n        }\r\n        return array;\r\n    }\r\n    Class<?> clazz = javaObject.getClass();\r\n    if (clazz.isEnum()) {\r\n        return ((Enum<?>) javaObject).name();\r\n    }\r\n    if (clazz.isArray()) {\r\n        int len = Array.getLength(javaObject);\r\n        JSONArray array = new JSONArray(len);\r\n        for (int i = 0; i < len; ++i) {\r\n            Object item = Array.get(javaObject, i);\r\n            Object jsonValue = toJSON(item);\r\n            array.add(jsonValue);\r\n        }\r\n        return array;\r\n    }\r\n    if (ParserConfig.isPrimitive(clazz)) {\r\n        return javaObject;\r\n    }\r\n    ObjectSerializer serializer = config.getObjectWriter(clazz);\r\n    if (serializer instanceof JavaBeanSerializer) {\r\n        JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) serializer;\r\n        JSONObject json = new JSONObject();\r\n        try {\r\n            Map<String, Object> values = javaBeanSerializer.getFieldValuesMap(javaObject);\r\n            for (Map.Entry<String, Object> entry : values.entrySet()) {\r\n                json.put(entry.getKey(), toJSON(entry.getValue()));\r\n            }\r\n        } catch (Exception e) {\r\n            throw new JSONException(\"toJSON error\", e);\r\n        }\r\n        return json;\r\n    }\r\n    String text = JSON.toJSONString(javaObject);\r\n    return JSON.parse(text);\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJSON", "qualified_signature": "com.alibaba.fastjson.JSON.toJSON(java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "toJavaObject", "return_type": "T", "signature": "toJavaObject(JSON, Class)", "body_content": "{\r\n    return TypeUtils.cast(json, clazz, ParserConfig.getGlobalInstance());\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJavaObject", "qualified_signature": "com.alibaba.fastjson.JSON.toJavaObject(com.alibaba.fastjson.JSON, java.lang.Class<T>)", "qualified_return_type": "T"}
{"java_doc": "\r\n@since 1.2.9\r\n", "method_name": "toJavaObject", "return_type": "T", "signature": "toJavaObject(Class)", "body_content": "{\r\n    return TypeUtils.cast(this, clazz, ParserConfig.getGlobalInstance());\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.toJavaObject", "qualified_signature": "com.alibaba.fastjson.JSON.toJavaObject(java.lang.Class<T>)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "allocateBytes", "return_type": "byte[]", "signature": "allocateBytes(int)", "body_content": "{\r\n    byte[] chars = bytesLocal.get();\r\n    if (chars == null) {\r\n        if (length <= 1024 * 64) {\r\n            chars = new byte[1024 * 64];\r\n            bytesLocal.set(chars);\r\n        } else {\r\n            chars = new byte[length];\r\n        }\r\n    } else if (chars.length < length) {\r\n        chars = new byte[length];\r\n    }\r\n    return chars;\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.allocateBytes", "qualified_signature": "com.alibaba.fastjson.JSON.allocateBytes(int)", "qualified_return_type": "byte[]"}
{"java_doc": "", "method_name": "allocateChars", "return_type": "char[]", "signature": "allocateChars(int)", "body_content": "{\r\n    char[] chars = charsLocal.get();\r\n    if (chars == null) {\r\n        if (length <= 1024 * 64) {\r\n            chars = new char[1024 * 64];\r\n            charsLocal.set(chars);\r\n        } else {\r\n            chars = new char[length];\r\n        }\r\n    } else if (chars.length < length) {\r\n        chars = new char[length];\r\n    }\r\n    return chars;\r\n}", "class_name": "JSON", "qualified_method_name": "com.alibaba.fastjson.JSON.allocateChars", "qualified_signature": "com.alibaba.fastjson.JSON.allocateChars(int)", "qualified_return_type": "char[]"}
{"java_doc": "write JSON string to out.\r\n", "method_name": "writeJSONString", "return_type": "void", "signature": "writeJSONString(Appendable)", "body_content": "", "class_name": "JSONStreamAware", "qualified_method_name": "com.alibaba.fastjson.JSONStreamAware.writeJSONString", "qualified_signature": "com.alibaba.fastjson.JSONStreamAware.writeJSONString(java.lang.Appendable)", "qualified_return_type": "void"}
{"java_doc": "\r\n@return the fastJsonConfig.\r\n@since 1.2.11\r\n", "method_name": "getFastJsonConfig", "return_type": "FastJsonConfig", "signature": "getFastJsonConfig()", "body_content": "{\r\n    return fastJsonConfig;\r\n}", "class_name": "FastJsonpHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.getFastJsonConfig", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.getFastJsonConfig()", "qualified_return_type": "com.alibaba.fastjson.support.config.FastJsonConfig"}
{"java_doc": "\r\n@param fastJsonConfig the fastJsonConfig to set.\r\n@since 1.2.11\r\n", "method_name": "setFastJsonConfig", "return_type": "void", "signature": "setFastJsonConfig(FastJsonConfig)", "body_content": "{\r\n    this.fastJsonConfig = fastJsonConfig;\r\n}", "class_name": "FastJsonpHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.setFastJsonConfig", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.setFastJsonConfig(com.alibaba.fastjson.support.config.FastJsonConfig)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "supports", "return_type": "boolean", "signature": "supports(Class)", "body_content": "{\r\n    return true;\r\n}", "class_name": "FastJsonpHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.supports", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.supports(java.lang.Class<?>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "// \r\nread", "return_type": "// \r\nObject", "signature": "read(Type, Class, HttpInputMessage)", "body_content": "{\r\n    InputStream in = inputMessage.getBody();\r\n    return JSON.parseObject(in, fastJsonConfig.getCharset(), type, fastJsonConfig.getFeatures());\r\n}", "class_name": "FastJsonpHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.read", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "// \r\nreadInternal", "return_type": "// \r\nObject", "signature": "readInternal(Class, HttpInputMessage)", "body_content": "{\r\n    InputStream in = inputMessage.getBody();\r\n    return JSON.parseObject(in, fastJsonConfig.getCharset(), clazz, fastJsonConfig.getFeatures());\r\n}", "class_name": "FastJsonpHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.readInternal", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.readInternal(java.lang.Class<? extends java.lang.Object>, org.springframework.http.HttpInputMessage)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "writeInternal", "return_type": "void", "signature": "writeInternal(Object, Type, HttpOutputMessage)", "body_content": "{\r\n    HttpHeaders headers = outputMessage.getHeaders();\r\n    ByteArrayOutputStream outnew = new ByteArrayOutputStream();\r\n    int len = writePrefix(outnew, obj);\r\n    Object value = obj;\r\n    if (obj instanceof MappingFastJsonValue) {\r\n        MappingFastJsonValue container = (MappingFastJsonValue) obj;\r\n        value = container.getValue();\r\n    }\r\n    len += // \r\n    JSON.// \r\n    writeJSONString(// \r\n    outnew, // \r\n    fastJsonConfig.getCharset(), // \r\n    value, // \r\n    fastJsonConfig.getSerializeConfig(), // \r\n    fastJsonConfig.getSerializeFilters(), // \r\n    fastJsonConfig.getDateFormat(), // \r\n    JSON.DEFAULT_GENERATE_FEATURE, fastJsonConfig.getSerializerFeatures());\r\n    len += writeSuffix(outnew, obj);\r\n    headers.setContentLength(len);\r\n    OutputStream out = outputMessage.getBody();\r\n    outnew.writeTo(out);\r\n    outnew.close();\r\n}", "class_name": "FastJsonpHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.writeInternal", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.writeInternal(java.lang.Object, java.lang.reflect.Type, org.springframework.http.HttpOutputMessage)", "qualified_return_type": "void"}
{"java_doc": "Write a prefix before the main content.\r\n", "method_name": "writePrefix", "return_type": "int", "signature": "writePrefix(ByteArrayOutputStream, Object)", "body_content": "{\r\n    String jsonpFunction = (object instanceof MappingFastJsonValue ? ((MappingFastJsonValue) object).getJsonpFunction() : null);\r\n    int length = 0;\r\n    if (jsonpFunction != null) {\r\n        out.write(JSONP_FUNCTION_PREFIX_BYTES);\r\n        byte[] bytes = (jsonpFunction + \"(\").getBytes(IOUtils.UTF8);\r\n        out.write(bytes);\r\n        length += JSONP_FUNCTION_PREFIX_BYTES.length + bytes.length;\r\n    }\r\n    return length;\r\n}", "class_name": "FastJsonpHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.writePrefix", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.writePrefix(java.io.ByteArrayOutputStream, java.lang.Object)", "qualified_return_type": "int"}
{"java_doc": "Write a suffix after the main content.\r\n", "method_name": "writeSuffix", "return_type": "int", "signature": "writeSuffix(ByteArrayOutputStream, Object)", "body_content": "{\r\n    String jsonpFunction = (object instanceof MappingFastJsonValue ? ((MappingFastJsonValue) object).getJsonpFunction() : null);\r\n    int length = 0;\r\n    if (jsonpFunction != null) {\r\n        out.write(JSONP_FUNCTION_SUFFIX_BYTES);\r\n        length += JSONP_FUNCTION_SUFFIX_BYTES.length;\r\n    }\r\n    return length;\r\n}", "class_name": "FastJsonpHttpMessageConverter4", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.writeSuffix", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4.writeSuffix(java.io.ByteArrayOutputStream, java.lang.Object)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "getFieldValueDeserilizer", "return_type": "ObjectDeserializer", "signature": "getFieldValueDeserilizer(ParserConfig)", "body_content": "{\r\n    if (fieldValueDeserilizer == null) {\r\n        JSONField annotation = fieldInfo.getAnnotation();\r\n        if (annotation != null && annotation.deserializeUsing() != Void.class) {\r\n            Class<?> deserializeUsing = annotation.deserializeUsing();\r\n            try {\r\n                fieldValueDeserilizer = (ObjectDeserializer) deserializeUsing.newInstance();\r\n            } catch (Exception ex) {\r\n                throw new JSONException(\"create deserializeUsing ObjectDeserializer error\", ex);\r\n            }\r\n        } else {\r\n            fieldValueDeserilizer = config.getDeserializer(fieldInfo.fieldClass, fieldInfo.fieldType);\r\n        }\r\n    }\r\n    return fieldValueDeserilizer;\r\n}", "class_name": "DefaultFieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.getFieldValueDeserilizer", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.getFieldValueDeserilizer(com.alibaba.fastjson.parser.ParserConfig)", "qualified_return_type": "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer"}
{"java_doc": "", "method_name": "parseField", "return_type": "void", "signature": "parseField(DefaultJSONParser, Object, Type, Map)", "body_content": "{\r\n    if (fieldValueDeserilizer == null) {\r\n        getFieldValueDeserilizer(parser.getConfig());\r\n    }\r\n    Type fieldType = fieldInfo.fieldType;\r\n    if (objectType instanceof ParameterizedType) {\r\n        ParseContext objContext = parser.getContext();\r\n        objContext.type = objectType;\r\n        fieldType = FieldInfo.getFieldType(this.clazz, objectType, fieldType);\r\n        fieldValueDeserilizer = parser.getConfig().getDeserializer(fieldType);\r\n    }\r\n    // ContextObjectDeserializer\r\n    Object value;\r\n    if (fieldValueDeserilizer instanceof JavaBeanDeserializer) {\r\n        JavaBeanDeserializer javaBeanDeser = (JavaBeanDeserializer) fieldValueDeserilizer;\r\n        value = javaBeanDeser.deserialze(parser, fieldType, fieldInfo.name, fieldInfo.parserFeatures);\r\n    } else {\r\n        if (this.fieldInfo.format != null && fieldValueDeserilizer instanceof ContextObjectDeserializer) {\r\n            value = // \r\n            ((ContextObjectDeserializer) fieldValueDeserilizer).deserialze(parser, fieldType, fieldInfo.name, fieldInfo.format, fieldInfo.parserFeatures);\r\n        } else {\r\n            value = fieldValueDeserilizer.deserialze(parser, fieldType, fieldInfo.name);\r\n        }\r\n    }\r\n    if (parser.getResolveStatus() == DefaultJSONParser.NeedToResolve) {\r\n        ResolveTask task = parser.getLastResolveTask();\r\n        task.fieldDeserializer = this;\r\n        task.ownerContext = parser.getContext();\r\n        parser.setResolveStatus(DefaultJSONParser.NONE);\r\n    } else {\r\n        if (object == null) {\r\n            fieldValues.put(fieldInfo.name, value);\r\n        } else {\r\n            setValue(object, value);\r\n        }\r\n    }\r\n}", "class_name": "DefaultFieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.parseField", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.parseField(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.Object, java.lang.reflect.Type, java.util.Map<java.lang.String, java.lang.Object>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    if (fieldValueDeserilizer != null) {\r\n        return fieldValueDeserilizer.getFastMatchToken();\r\n    }\r\n    return JSONToken.LITERAL_INT;\r\n}", "class_name": "DefaultFieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "processExtra", "return_type": "void", "signature": "processExtra(Object, String, Object)", "body_content": "", "class_name": "ExtraProcessor", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ExtraProcessor.processExtra", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ExtraProcessor.processExtra(java.lang.Object, java.lang.String, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "size", "return_type": "int", "signature": "size()", "body_content": "{\r\n    return map.size();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.size", "qualified_signature": "com.alibaba.fastjson.JSONObject.size()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "isEmpty", "return_type": "boolean", "signature": "isEmpty()", "body_content": "{\r\n    return map.isEmpty();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.isEmpty", "qualified_signature": "com.alibaba.fastjson.JSONObject.isEmpty()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "containsKey", "return_type": "boolean", "signature": "containsKey(Object)", "body_content": "{\r\n    return map.containsKey(key);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.containsKey", "qualified_signature": "com.alibaba.fastjson.JSONObject.containsKey(java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "containsValue", "return_type": "boolean", "signature": "containsValue(Object)", "body_content": "{\r\n    return map.containsValue(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.containsValue", "qualified_signature": "com.alibaba.fastjson.JSONObject.containsValue(java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "get", "return_type": "Object", "signature": "get(Object)", "body_content": "{\r\n    return map.get(key);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.get", "qualified_signature": "com.alibaba.fastjson.JSONObject.get(java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "getJSONObject", "return_type": "JSONObject", "signature": "getJSONObject(String)", "body_content": "{\r\n    Object value = map.get(key);\r\n    if (value instanceof JSONObject) {\r\n        return (JSONObject) value;\r\n    }\r\n    if (value instanceof String) {\r\n        return JSON.parseObject((String) value);\r\n    }\r\n    return (JSONObject) toJSON(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getJSONObject", "qualified_signature": "com.alibaba.fastjson.JSONObject.getJSONObject(java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.JSONObject"}
{"java_doc": "", "method_name": "getJSONArray", "return_type": "JSONArray", "signature": "getJSONArray(String)", "body_content": "{\r\n    Object value = map.get(key);\r\n    if (value instanceof JSONArray) {\r\n        return (JSONArray) value;\r\n    }\r\n    if (value instanceof String) {\r\n        return (JSONArray) JSON.parse((String) value);\r\n    }\r\n    return (JSONArray) toJSON(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getJSONArray", "qualified_signature": "com.alibaba.fastjson.JSONObject.getJSONArray(java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.JSONArray"}
{"java_doc": "", "method_name": "getObject", "return_type": "T", "signature": "getObject(String, Class)", "body_content": "{\r\n    Object obj = map.get(key);\r\n    return TypeUtils.castToJavaBean(obj, clazz);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getObject", "qualified_signature": "com.alibaba.fastjson.JSONObject.getObject(java.lang.String, java.lang.Class<T>)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getBoolean", "return_type": "Boolean", "signature": "getBoolean(String)", "body_content": "{\r\n    Object value = get(key);\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    return castToBoolean(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getBoolean", "qualified_signature": "com.alibaba.fastjson.JSONObject.getBoolean(java.lang.String)", "qualified_return_type": "java.lang.Boolean"}
{"java_doc": "", "method_name": "getBytes", "return_type": "byte[]", "signature": "getBytes(String)", "body_content": "{\r\n    Object value = get(key);\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    return castToBytes(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getBytes", "qualified_signature": "com.alibaba.fastjson.JSONObject.getBytes(java.lang.String)", "qualified_return_type": "byte[]"}
{"java_doc": "", "method_name": "getBooleanValue", "return_type": "boolean", "signature": "getBooleanValue(String)", "body_content": "{\r\n    Object value = get(key);\r\n    if (value == null) {\r\n        return false;\r\n    }\r\n    return castToBoolean(value).booleanValue();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getBooleanValue", "qualified_signature": "com.alibaba.fastjson.JSONObject.getBooleanValue(java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getByte", "return_type": "Byte", "signature": "getByte(String)", "body_content": "{\r\n    Object value = get(key);\r\n    return castToByte(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getByte", "qualified_signature": "com.alibaba.fastjson.JSONObject.getByte(java.lang.String)", "qualified_return_type": "java.lang.Byte"}
{"java_doc": "", "method_name": "getByteValue", "return_type": "byte", "signature": "getByteValue(String)", "body_content": "{\r\n    Object value = get(key);\r\n    if (value == null) {\r\n        return 0;\r\n    }\r\n    // TODO 如果 value 是\"\"、\"null\"或\"NULL\"，可能会存在报空指针的情况，是否需要加以处理？ 其他转换也存在类似情况\r\n    return castToByte(value).byteValue();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getByteValue", "qualified_signature": "com.alibaba.fastjson.JSONObject.getByteValue(java.lang.String)", "qualified_return_type": "byte"}
{"java_doc": "", "method_name": "getShort", "return_type": "Short", "signature": "getShort(String)", "body_content": "{\r\n    Object value = get(key);\r\n    return castToShort(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getShort", "qualified_signature": "com.alibaba.fastjson.JSONObject.getShort(java.lang.String)", "qualified_return_type": "java.lang.Short"}
{"java_doc": "", "method_name": "getShortValue", "return_type": "short", "signature": "getShortValue(String)", "body_content": "{\r\n    Object value = get(key);\r\n    if (value == null) {\r\n        return 0;\r\n    }\r\n    return castToShort(value).shortValue();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getShortValue", "qualified_signature": "com.alibaba.fastjson.JSONObject.getShortValue(java.lang.String)", "qualified_return_type": "short"}
{"java_doc": "", "method_name": "getInteger", "return_type": "Integer", "signature": "getInteger(String)", "body_content": "{\r\n    Object value = get(key);\r\n    return castToInt(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getInteger", "qualified_signature": "com.alibaba.fastjson.JSONObject.getInteger(java.lang.String)", "qualified_return_type": "java.lang.Integer"}
{"java_doc": "", "method_name": "getIntValue", "return_type": "int", "signature": "getIntValue(String)", "body_content": "{\r\n    Object value = get(key);\r\n    if (value == null) {\r\n        return 0;\r\n    }\r\n    return castToInt(value).intValue();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getIntValue", "qualified_signature": "com.alibaba.fastjson.JSONObject.getIntValue(java.lang.String)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "getLong", "return_type": "Long", "signature": "getLong(String)", "body_content": "{\r\n    Object value = get(key);\r\n    return castToLong(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getLong", "qualified_signature": "com.alibaba.fastjson.JSONObject.getLong(java.lang.String)", "qualified_return_type": "java.lang.Long"}
{"java_doc": "", "method_name": "getLongValue", "return_type": "long", "signature": "getLongValue(String)", "body_content": "{\r\n    Object value = get(key);\r\n    if (value == null) {\r\n        return 0L;\r\n    }\r\n    return castToLong(value).longValue();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getLongValue", "qualified_signature": "com.alibaba.fastjson.JSONObject.getLongValue(java.lang.String)", "qualified_return_type": "long"}
{"java_doc": "", "method_name": "getFloat", "return_type": "Float", "signature": "getFloat(String)", "body_content": "{\r\n    Object value = get(key);\r\n    return castToFloat(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getFloat", "qualified_signature": "com.alibaba.fastjson.JSONObject.getFloat(java.lang.String)", "qualified_return_type": "java.lang.Float"}
{"java_doc": "", "method_name": "getFloatValue", "return_type": "float", "signature": "getFloatValue(String)", "body_content": "{\r\n    Object value = get(key);\r\n    if (value == null) {\r\n        return 0F;\r\n    }\r\n    return castToFloat(value).floatValue();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getFloatValue", "qualified_signature": "com.alibaba.fastjson.JSONObject.getFloatValue(java.lang.String)", "qualified_return_type": "float"}
{"java_doc": "", "method_name": "getDouble", "return_type": "Double", "signature": "getDouble(String)", "body_content": "{\r\n    Object value = get(key);\r\n    return castToDouble(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getDouble", "qualified_signature": "com.alibaba.fastjson.JSONObject.getDouble(java.lang.String)", "qualified_return_type": "java.lang.Double"}
{"java_doc": "", "method_name": "getDoubleValue", "return_type": "double", "signature": "getDoubleValue(String)", "body_content": "{\r\n    Object value = get(key);\r\n    if (value == null) {\r\n        return 0D;\r\n    }\r\n    return castToDouble(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getDoubleValue", "qualified_signature": "com.alibaba.fastjson.JSONObject.getDoubleValue(java.lang.String)", "qualified_return_type": "double"}
{"java_doc": "", "method_name": "getBigDecimal", "return_type": "BigDecimal", "signature": "getBigDecimal(String)", "body_content": "{\r\n    Object value = get(key);\r\n    return castToBigDecimal(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getBigDecimal", "qualified_signature": "com.alibaba.fastjson.JSONObject.getBigDecimal(java.lang.String)", "qualified_return_type": "java.math.BigDecimal"}
{"java_doc": "", "method_name": "getBigInteger", "return_type": "BigInteger", "signature": "getBigInteger(String)", "body_content": "{\r\n    Object value = get(key);\r\n    return castToBigInteger(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getBigInteger", "qualified_signature": "com.alibaba.fastjson.JSONObject.getBigInteger(java.lang.String)", "qualified_return_type": "java.math.BigInteger"}
{"java_doc": "", "method_name": "getString", "return_type": "String", "signature": "getString(String)", "body_content": "{\r\n    Object value = get(key);\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    return value.toString();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getString", "qualified_signature": "com.alibaba.fastjson.JSONObject.getString(java.lang.String)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getDate", "return_type": "Date", "signature": "getDate(String)", "body_content": "{\r\n    Object value = get(key);\r\n    return castToDate(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getDate", "qualified_signature": "com.alibaba.fastjson.JSONObject.getDate(java.lang.String)", "qualified_return_type": "java.util.Date"}
{"java_doc": "", "method_name": "getSqlDate", "return_type": "java.sql.Date", "signature": "getSqlDate(String)", "body_content": "{\r\n    Object value = get(key);\r\n    return castToSqlDate(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getSqlDate", "qualified_signature": "com.alibaba.fastjson.JSONObject.getSqlDate(java.lang.String)", "qualified_return_type": "java.sql.Date"}
{"java_doc": "", "method_name": "getTimestamp", "return_type": "java.sql.Timestamp", "signature": "getTimestamp(String)", "body_content": "{\r\n    Object value = get(key);\r\n    return castToTimestamp(value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.getTimestamp", "qualified_signature": "com.alibaba.fastjson.JSONObject.getTimestamp(java.lang.String)", "qualified_return_type": "java.sql.Timestamp"}
{"java_doc": "", "method_name": "put", "return_type": "Object", "signature": "put(String, Object)", "body_content": "{\r\n    return map.put(key, value);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.put", "qualified_signature": "com.alibaba.fastjson.JSONObject.put(java.lang.String, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "fluentPut", "return_type": "JSONObject", "signature": "fluentPut(String, Object)", "body_content": "{\r\n    map.put(key, value);\r\n    return this;\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.fluentPut", "qualified_signature": "com.alibaba.fastjson.JSONObject.fluentPut(java.lang.String, java.lang.Object)", "qualified_return_type": "com.alibaba.fastjson.JSONObject"}
{"java_doc": "", "method_name": "putAll", "return_type": "void", "signature": "putAll(Map)", "body_content": "{\r\n    map.putAll(m);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.putAll", "qualified_signature": "com.alibaba.fastjson.JSONObject.putAll(java.util.Map<? extends java.lang.String, ? extends java.lang.Object>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "fluentPutAll", "return_type": "JSONObject", "signature": "fluentPutAll(Map)", "body_content": "{\r\n    map.putAll(m);\r\n    return this;\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.fluentPutAll", "qualified_signature": "com.alibaba.fastjson.JSONObject.fluentPutAll(java.util.Map<? extends java.lang.String, ? extends java.lang.Object>)", "qualified_return_type": "com.alibaba.fastjson.JSONObject"}
{"java_doc": "", "method_name": "clear", "return_type": "void", "signature": "clear()", "body_content": "{\r\n    map.clear();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.clear", "qualified_signature": "com.alibaba.fastjson.JSONObject.clear()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "fluentClear", "return_type": "JSONObject", "signature": "fluentClear()", "body_content": "{\r\n    map.clear();\r\n    return this;\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.fluentClear", "qualified_signature": "com.alibaba.fastjson.JSONObject.fluentClear()", "qualified_return_type": "com.alibaba.fastjson.JSONObject"}
{"java_doc": "", "method_name": "remove", "return_type": "Object", "signature": "remove(Object)", "body_content": "{\r\n    return map.remove(key);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.remove", "qualified_signature": "com.alibaba.fastjson.JSONObject.remove(java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "fluentRemove", "return_type": "JSONObject", "signature": "fluentRemove(Object)", "body_content": "{\r\n    map.remove(key);\r\n    return this;\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.fluentRemove", "qualified_signature": "com.alibaba.fastjson.JSONObject.fluentRemove(java.lang.Object)", "qualified_return_type": "com.alibaba.fastjson.JSONObject"}
{"java_doc": "", "method_name": "keySet", "return_type": "Set<String>", "signature": "keySet()", "body_content": "{\r\n    return map.keySet();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.keySet", "qualified_signature": "com.alibaba.fastjson.JSONObject.keySet()", "qualified_return_type": "java.util.Set<java.lang.String>"}
{"java_doc": "", "method_name": "values", "return_type": "Collection<Object>", "signature": "values()", "body_content": "{\r\n    return map.values();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.values", "qualified_signature": "com.alibaba.fastjson.JSONObject.values()", "qualified_return_type": "java.util.Collection<java.lang.Object>"}
{"java_doc": "", "method_name": "entrySet", "return_type": "Set<Map.Entry<String, Object>>", "signature": "entrySet()", "body_content": "{\r\n    return map.entrySet();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.entrySet", "qualified_signature": "com.alibaba.fastjson.JSONObject.entrySet()", "qualified_return_type": "java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.Object>>"}
{"java_doc": "", "method_name": "clone", "return_type": "Object", "signature": "clone()", "body_content": "{\r\n    return new JSONObject(// \r\n    map instanceof LinkedHashMap ? // \r\n    new LinkedHashMap<String, Object>(map) : new HashMap<String, Object>(map));\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.clone", "qualified_signature": "com.alibaba.fastjson.JSONObject.clone()", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "equals", "return_type": "boolean", "signature": "equals(Object)", "body_content": "{\r\n    return this.map.equals(obj);\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.equals", "qualified_signature": "com.alibaba.fastjson.JSONObject.equals(java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "hashCode", "return_type": "int", "signature": "hashCode()", "body_content": "{\r\n    return this.map.hashCode();\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.hashCode", "qualified_signature": "com.alibaba.fastjson.JSONObject.hashCode()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "invoke", "return_type": "Object", "signature": "invoke(Object, Method, Object[])", "body_content": "{\r\n    Class<?>[] parameterTypes = method.getParameterTypes();\r\n    if (parameterTypes.length == 1) {\r\n        if (method.getName().equals(\"equals\")) {\r\n            return this.equals(args[0]);\r\n        }\r\n        Class<?> returnType = method.getReturnType();\r\n        if (returnType != void.class) {\r\n            throw new JSONException(\"illegal setter\");\r\n        }\r\n        String name = null;\r\n        JSONField annotation = method.getAnnotation(JSONField.class);\r\n        if (annotation != null) {\r\n            if (annotation.name().length() != 0) {\r\n                name = annotation.name();\r\n            }\r\n        }\r\n        if (name == null) {\r\n            name = method.getName();\r\n            if (!name.startsWith(\"set\")) {\r\n                throw new JSONException(\"illegal setter\");\r\n            }\r\n            name = name.substring(3);\r\n            if (name.length() == 0) {\r\n                throw new JSONException(\"illegal setter\");\r\n            }\r\n            name = Character.toLowerCase(name.charAt(0)) + name.substring(1);\r\n        }\r\n        map.put(name, args[0]);\r\n        return null;\r\n    }\r\n    if (parameterTypes.length == 0) {\r\n        Class<?> returnType = method.getReturnType();\r\n        if (returnType == void.class) {\r\n            throw new JSONException(\"illegal getter\");\r\n        }\r\n        String name = null;\r\n        JSONField annotation = method.getAnnotation(JSONField.class);\r\n        if (annotation != null) {\r\n            if (annotation.name().length() != 0) {\r\n                name = annotation.name();\r\n            }\r\n        }\r\n        if (name == null) {\r\n            name = method.getName();\r\n            if (name.startsWith(\"get\")) {\r\n                name = name.substring(3);\r\n                if (name.length() == 0) {\r\n                    throw new JSONException(\"illegal getter\");\r\n                }\r\n                name = Character.toLowerCase(name.charAt(0)) + name.substring(1);\r\n            } else if (name.startsWith(\"is\")) {\r\n                name = name.substring(2);\r\n                if (name.length() == 0) {\r\n                    throw new JSONException(\"illegal getter\");\r\n                }\r\n                name = Character.toLowerCase(name.charAt(0)) + name.substring(1);\r\n            } else if (name.startsWith(\"hashCode\")) {\r\n                return this.hashCode();\r\n            } else if (name.startsWith(\"toString\")) {\r\n                return this.toString();\r\n            } else {\r\n                throw new JSONException(\"illegal getter\");\r\n            }\r\n        }\r\n        Object value = map.get(name);\r\n        return TypeUtils.cast(value, method.getGenericReturnType(), ParserConfig.getGlobalInstance());\r\n    }\r\n    throw new UnsupportedOperationException(method.toGenericString());\r\n}", "class_name": "JSONObject", "qualified_method_name": "com.alibaba.fastjson.JSONObject.invoke", "qualified_signature": "com.alibaba.fastjson.JSONObject.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LBRACKET;\r\n}", "class_name": "ArrayListTypeFieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "parseField", "return_type": "void", "signature": "parseField(DefaultJSONParser, Object, Type, Map)", "body_content": "{\r\n    if (parser.lexer.token() == JSONToken.NULL) {\r\n        setValue(object, null);\r\n        return;\r\n    }\r\n    ArrayList list = new ArrayList();\r\n    ParseContext context = parser.getContext();\r\n    parser.setContext(context, object, fieldInfo.name);\r\n    parseArray(parser, objectType, list);\r\n    parser.setContext(context);\r\n    if (object == null) {\r\n        fieldValues.put(fieldInfo.name, list);\r\n    } else {\r\n        setValue(object, list);\r\n    }\r\n}", "class_name": "ArrayListTypeFieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer.parseField", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer.parseField(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.Object, java.lang.reflect.Type, java.util.Map<java.lang.String, java.lang.Object>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "parseArray", "return_type": "void", "signature": "parseArray(DefaultJSONParser, Type, Collection)", "body_content": "{\r\n    Type itemType = this.itemType;\r\n    ObjectDeserializer itemTypeDeser = this.deserializer;\r\n    if (objectType instanceof ParameterizedType) {\r\n        if (itemType instanceof TypeVariable) {\r\n            TypeVariable typeVar = (TypeVariable) itemType;\r\n            ParameterizedType paramType = (ParameterizedType) objectType;\r\n            Class<?> objectClass = null;\r\n            if (paramType.getRawType() instanceof Class) {\r\n                objectClass = (Class<?>) paramType.getRawType();\r\n            }\r\n            int paramIndex = -1;\r\n            if (objectClass != null) {\r\n                for (int i = 0, size = objectClass.getTypeParameters().length; i < size; ++i) {\r\n                    TypeVariable item = objectClass.getTypeParameters()[i];\r\n                    if (item.getName().equals(typeVar.getName())) {\r\n                        paramIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (paramIndex != -1) {\r\n                itemType = paramType.getActualTypeArguments()[paramIndex];\r\n                if (!itemType.equals(this.itemType)) {\r\n                    itemTypeDeser = parser.getConfig().getDeserializer(itemType);\r\n                }\r\n            }\r\n        } else if (itemType instanceof ParameterizedType) {\r\n            ParameterizedType parameterizedItemType = (ParameterizedType) itemType;\r\n            Type[] itemActualTypeArgs = parameterizedItemType.getActualTypeArguments();\r\n            if (itemActualTypeArgs.length == 1 && itemActualTypeArgs[0] instanceof TypeVariable) {\r\n                TypeVariable typeVar = (TypeVariable) itemActualTypeArgs[0];\r\n                ParameterizedType paramType = (ParameterizedType) objectType;\r\n                Class<?> objectClass = null;\r\n                if (paramType.getRawType() instanceof Class) {\r\n                    objectClass = (Class<?>) paramType.getRawType();\r\n                }\r\n                int paramIndex = -1;\r\n                if (objectClass != null) {\r\n                    for (int i = 0, size = objectClass.getTypeParameters().length; i < size; ++i) {\r\n                        TypeVariable item = objectClass.getTypeParameters()[i];\r\n                        if (item.getName().equals(typeVar.getName())) {\r\n                            paramIndex = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (paramIndex != -1) {\r\n                    itemActualTypeArgs[0] = paramType.getActualTypeArguments()[paramIndex];\r\n                    itemType = new ParameterizedTypeImpl(itemActualTypeArgs, parameterizedItemType.getOwnerType(), parameterizedItemType.getRawType());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    final JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.LBRACKET) {\r\n        if (itemTypeDeser == null) {\r\n            itemTypeDeser = deserializer = parser.getConfig().getDeserializer(itemType);\r\n            itemFastMatchToken = deserializer.getFastMatchToken();\r\n        }\r\n        lexer.nextToken(itemFastMatchToken);\r\n        for (int i = 0; ; ++i) {\r\n            if (lexer.isEnabled(Feature.AllowArbitraryCommas)) {\r\n                while (lexer.token() == JSONToken.COMMA) {\r\n                    lexer.nextToken();\r\n                    continue;\r\n                }\r\n            }\r\n            if (lexer.token() == JSONToken.RBRACKET) {\r\n                break;\r\n            }\r\n            Object val = itemTypeDeser.deserialze(parser, itemType, i);\r\n            array.add(val);\r\n            parser.checkListResolve(array);\r\n            if (lexer.token() == JSONToken.COMMA) {\r\n                lexer.nextToken(itemFastMatchToken);\r\n                continue;\r\n            }\r\n        }\r\n        lexer.nextToken(JSONToken.COMMA);\r\n    } else {\r\n        if (itemTypeDeser == null) {\r\n            itemTypeDeser = deserializer = parser.getConfig().getDeserializer(itemType);\r\n        }\r\n        Object val = itemTypeDeser.deserialze(parser, itemType, 0);\r\n        array.add(val);\r\n        parser.checkListResolve(array);\r\n    }\r\n}", "class_name": "ArrayListTypeFieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer.parseArray", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer.parseArray(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.util.Collection)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "autoConfig", "return_type": "void", "signature": "autoConfig()", "body_content": "{\r\n    loadPropertiesFromFile();\r\n    TypeUtils.compatibleWithJavaBean = \"true\".equals(getStringProperty(FASTJSON_COMPATIBLEWITHJAVABEAN));\r\n    TypeUtils.compatibleWithFieldName = \"true\".equals(getStringProperty(FASTJSON_COMPATIBLEWITHFIELDNAME));\r\n}", "class_name": "IOUtils.PropertiesInitializer", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.PropertiesInitializer.autoConfig", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.PropertiesInitializer.autoConfig()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getStringProperty", "return_type": "String", "signature": "getStringProperty(String)", "body_content": "{\r\n    String prop = null;\r\n    try {\r\n        prop = System.getProperty(name);\r\n    } catch (SecurityException e) {\r\n        // skip\r\n    }\r\n    return (prop == null) ? DEFAULT_PROPERTIES.getProperty(name) : prop;\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.getStringProperty", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.getStringProperty(java.lang.String)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "loadPropertiesFromFile", "return_type": "void", "signature": "loadPropertiesFromFile()", "body_content": "{\r\n    InputStream imputStream = AccessController.doPrivileged(new PrivilegedAction<InputStream>() {\r\n\r\n        public InputStream run() {\r\n            ClassLoader cl = Thread.currentThread().getContextClassLoader();\r\n            if (cl != null) {\r\n                return cl.getResourceAsStream(FASTJSON_PROPERTIES);\r\n            } else {\r\n                return ClassLoader.getSystemResourceAsStream(FASTJSON_PROPERTIES);\r\n            }\r\n        }\r\n    });\r\n    if (null != imputStream) {\r\n        try {\r\n            DEFAULT_PROPERTIES.load(imputStream);\r\n            imputStream.close();\r\n        } catch (java.io.IOException e) {\r\n            // skip\r\n        }\r\n    }\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.loadPropertiesFromFile", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.loadPropertiesFromFile()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "run", "return_type": "InputStream", "signature": "run()", "body_content": "{\r\n    ClassLoader cl = Thread.currentThread().getContextClassLoader();\r\n    if (cl != null) {\r\n        return cl.getResourceAsStream(FASTJSON_PROPERTIES);\r\n    } else {\r\n        return ClassLoader.getSystemResourceAsStream(FASTJSON_PROPERTIES);\r\n    }\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.Anonymous-29f97a37-570d-46c0-9b02-b2e3eb054dbe.run", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.Anonymous-e8de5ed3-3f35-45e5-bde0-d9c2e213116b.run()", "qualified_return_type": "java.io.InputStream"}
{"java_doc": "", "method_name": "close", "return_type": "void", "signature": "close(Closeable)", "body_content": "{\r\n    if (x != null) {\r\n        try {\r\n            x.close();\r\n        } catch (Exception e) {\r\n            // skip\r\n        }\r\n    }\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.close", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.close(java.io.Closeable)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "stringSize", "return_type": "int", "signature": "stringSize(long)", "body_content": "{\r\n    long p = 10;\r\n    for (int i = 1; i < 19; i++) {\r\n        if (x < p)\r\n            return i;\r\n        p = 10 * p;\r\n    }\r\n    return 19;\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.stringSize", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.stringSize(long)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "getChars", "return_type": "void", "signature": "getChars(long, int, char[])", "body_content": "{\r\n    long q;\r\n    int r;\r\n    int charPos = index;\r\n    char sign = 0;\r\n    if (i < 0) {\r\n        sign = '-';\r\n        i = -i;\r\n    }\r\n    // Get 2 digits/iteration using longs until quotient fits into an int\r\n    while (i > Integer.MAX_VALUE) {\r\n        q = i / 100;\r\n        // really: r = i - (q * 100);\r\n        r = (int) (i - ((q << 6) + (q << 5) + (q << 2)));\r\n        i = q;\r\n        buf[--charPos] = DigitOnes[r];\r\n        buf[--charPos] = DigitTens[r];\r\n    }\r\n    // Get 2 digits/iteration using ints\r\n    int q2;\r\n    int i2 = (int) i;\r\n    while (i2 >= 65536) {\r\n        q2 = i2 / 100;\r\n        // really: r = i2 - (q * 100);\r\n        r = i2 - ((q2 << 6) + (q2 << 5) + (q2 << 2));\r\n        i2 = q2;\r\n        buf[--charPos] = DigitOnes[r];\r\n        buf[--charPos] = DigitTens[r];\r\n    }\r\n    // Fall thru to fast mode for smaller numbers\r\n    // assert(i2 <= 65536, i2);\r\n    for (; ; ) {\r\n        q2 = (i2 * 52429) >>> (16 + 3);\r\n        // r = i2-(q2*10) ...\r\n        r = i2 - ((q2 << 3) + (q2 << 1));\r\n        buf[--charPos] = digits[r];\r\n        i2 = q2;\r\n        if (i2 == 0)\r\n            break;\r\n    }\r\n    if (sign != 0) {\r\n        buf[--charPos] = sign;\r\n    }\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.getChars", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.getChars(long, int, char[])", "qualified_return_type": "void"}
{"java_doc": "Places characters representing the integer i into the character array buf. The characters are placed into the\r\nbuffer backwards starting with the least significant digit at the specified index (exclusive), and working\r\nbackwards from there. Will fail if i == Integer.MIN_VALUE\r\n", "method_name": "getChars", "return_type": "void", "signature": "getChars(int, int, char[])", "body_content": "{\r\n    int q, r;\r\n    int charPos = index;\r\n    char sign = 0;\r\n    if (i < 0) {\r\n        sign = '-';\r\n        i = -i;\r\n    }\r\n    // Generate two digits per iteration\r\n    while (i >= 65536) {\r\n        q = i / 100;\r\n        // really: r = i - (q * 100);\r\n        r = i - ((q << 6) + (q << 5) + (q << 2));\r\n        i = q;\r\n        buf[--charPos] = DigitOnes[r];\r\n        buf[--charPos] = DigitTens[r];\r\n    }\r\n    // Fall thru to fast mode for smaller numbers\r\n    // assert(i <= 65536, i);\r\n    for (; ; ) {\r\n        q = (i * 52429) >>> (16 + 3);\r\n        // r = i-(q*10) ...\r\n        r = i - ((q << 3) + (q << 1));\r\n        buf[--charPos] = digits[r];\r\n        i = q;\r\n        if (i == 0)\r\n            break;\r\n    }\r\n    if (sign != 0) {\r\n        buf[--charPos] = sign;\r\n    }\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.getChars", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.getChars(int, int, char[])", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getChars", "return_type": "void", "signature": "getChars(byte, int, char[])", "body_content": "{\r\n    int i = b;\r\n    int q, r;\r\n    int charPos = index;\r\n    char sign = 0;\r\n    if (i < 0) {\r\n        sign = '-';\r\n        i = -i;\r\n    }\r\n    // Fall thru to fast mode for smaller numbers\r\n    // assert(i <= 65536, i);\r\n    for (; ; ) {\r\n        q = (i * 52429) >>> (16 + 3);\r\n        // r = i-(q*10) ...\r\n        r = i - ((q << 3) + (q << 1));\r\n        buf[--charPos] = digits[r];\r\n        i = q;\r\n        if (i == 0)\r\n            break;\r\n    }\r\n    if (sign != 0) {\r\n        buf[--charPos] = sign;\r\n    }\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.getChars", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.getChars(byte, int, char[])", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "stringSize", "return_type": "int", "signature": "stringSize(int)", "body_content": "{\r\n    for (int i = 0; ; i++) {\r\n        if (x <= sizeTable[i]) {\r\n            return i + 1;\r\n        }\r\n    }\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.stringSize", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.stringSize(int)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "decode", "return_type": "void", "signature": "decode(CharsetDecoder, ByteBuffer, CharBuffer)", "body_content": "{\r\n    try {\r\n        CoderResult cr = charsetDecoder.decode(byteBuf, charByte, true);\r\n        if (!cr.isUnderflow()) {\r\n            cr.throwException();\r\n        }\r\n        cr = charsetDecoder.flush(charByte);\r\n        if (!cr.isUnderflow()) {\r\n            cr.throwException();\r\n        }\r\n    } catch (CharacterCodingException x) {\r\n        // Substitution is always enabled,\r\n        // so this shouldn't happen\r\n        throw new JSONException(\"utf8 decode error, \" + x.getMessage(), x);\r\n    }\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.decode", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.decode(java.nio.charset.CharsetDecoder, java.nio.ByteBuffer, java.nio.CharBuffer)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "firstIdentifier", "return_type": "boolean", "signature": "firstIdentifier(char)", "body_content": "{\r\n    return ch < IOUtils.firstIdentifierFlags.length && IOUtils.firstIdentifierFlags[ch];\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.firstIdentifier", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.firstIdentifier(char)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isIdent", "return_type": "boolean", "signature": "isIdent(char)", "body_content": "{\r\n    return ch < identifierFlags.length && identifierFlags[ch];\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.isIdent", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.isIdent(char)", "qualified_return_type": "boolean"}
{"java_doc": "Decodes a BASE64 encoded char array that is known to be resonably well formatted. The method is about twice as\r\nfast as #decode(char[]). The preconditions are:<br>\r\n+ The array must have a line length of 76 chars OR no line separators at all (one line).<br>\r\n+ Line separator must be \"\\r\\n\", as specified in RFC 2045 + The array must not contain illegal characters within\r\nthe encoded string<br>\r\n+ The array CAN have illegal characters at the beginning and end, those will be dealt with appropriately.<br>\r\n\r\n@param chars The source array. Length 0 will return an empty array. <code>null</code> will throw an exception.\r\n@return The decoded array of bytes. May be of length 0.\r\n", "method_name": "decodeBase64", "return_type": "byte[]", "signature": "decodeBase64(char[], int, int)", "body_content": "{\r\n    // Check special case\r\n    if (charsLen == 0) {\r\n        return new byte[0];\r\n    }\r\n    // Start and end index after trimming.\r\n    int sIx = offset, eIx = offset + charsLen - 1;\r\n    // Trim illegal chars from start\r\n    while (sIx < eIx && IA[chars[sIx]] < 0) sIx++;\r\n    // Trim illegal chars from end\r\n    while (eIx > 0 && IA[chars[eIx]] < 0) eIx--;\r\n    // get the padding count (=) (0, 1 or 2)\r\n    // Count '=' at end.\r\n    int pad = chars[eIx] == '=' ? (chars[eIx - 1] == '=' ? 2 : 1) : 0;\r\n    // Content count including possible separators\r\n    int cCnt = eIx - sIx + 1;\r\n    int sepCnt = charsLen > 76 ? (chars[76] == '\\r' ? cCnt / 78 : 0) << 1 : 0;\r\n    // The number of decoded bytes\r\n    int len = ((cCnt - sepCnt) * 6 >> 3) - pad;\r\n    // Preallocate byte[] of exact length\r\n    byte[] bytes = new byte[len];\r\n    // Decode all but the last 0 - 2 bytes.\r\n    int d = 0;\r\n    for (int cc = 0, eLen = (len / 3) * 3; d < eLen; ) {\r\n        // Assemble three bytes into an int from four \"valid\" characters.\r\n        int i = IA[chars[sIx++]] << 18 | IA[chars[sIx++]] << 12 | IA[chars[sIx++]] << 6 | IA[chars[sIx++]];\r\n        // Add the bytes\r\n        bytes[d++] = (byte) (i >> 16);\r\n        bytes[d++] = (byte) (i >> 8);\r\n        bytes[d++] = (byte) i;\r\n        // If line separator, jump over it.\r\n        if (sepCnt > 0 && ++cc == 19) {\r\n            sIx += 2;\r\n            cc = 0;\r\n        }\r\n    }\r\n    if (d < len) {\r\n        // Decode last 1-3 bytes (incl '=') into 1-3 bytes\r\n        int i = 0;\r\n        for (int j = 0; sIx <= eIx - pad; j++) i |= IA[chars[sIx++]] << (18 - j * 6);\r\n        for (int r = 16; d < len; r -= 8) bytes[d++] = (byte) (i >> r);\r\n    }\r\n    return bytes;\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.decodeBase64", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.decodeBase64(char[], int, int)", "qualified_return_type": "byte[]"}
{"java_doc": "", "method_name": "decodeBase64", "return_type": "byte[]", "signature": "decodeBase64(String, int, int)", "body_content": "{\r\n    // Check special case\r\n    if (charsLen == 0) {\r\n        return new byte[0];\r\n    }\r\n    // Start and end index after trimming.\r\n    int sIx = offset, eIx = offset + charsLen - 1;\r\n    // Trim illegal chars from start\r\n    while (sIx < eIx && IA[chars.charAt(sIx)] < 0) sIx++;\r\n    // Trim illegal chars from end\r\n    while (eIx > 0 && IA[chars.charAt(eIx)] < 0) eIx--;\r\n    // get the padding count (=) (0, 1 or 2)\r\n    // Count '=' at end.\r\n    int pad = chars.charAt(eIx) == '=' ? (chars.charAt(eIx - 1) == '=' ? 2 : 1) : 0;\r\n    // Content count including possible separators\r\n    int cCnt = eIx - sIx + 1;\r\n    int sepCnt = charsLen > 76 ? (chars.charAt(76) == '\\r' ? cCnt / 78 : 0) << 1 : 0;\r\n    // The number of decoded bytes\r\n    int len = ((cCnt - sepCnt) * 6 >> 3) - pad;\r\n    // Preallocate byte[] of exact length\r\n    byte[] bytes = new byte[len];\r\n    // Decode all but the last 0 - 2 bytes.\r\n    int d = 0;\r\n    for (int cc = 0, eLen = (len / 3) * 3; d < eLen; ) {\r\n        // Assemble three bytes into an int from four \"valid\" characters.\r\n        int i = IA[chars.charAt(sIx++)] << 18 | IA[chars.charAt(sIx++)] << 12 | IA[chars.charAt(sIx++)] << 6 | IA[chars.charAt(sIx++)];\r\n        // Add the bytes\r\n        bytes[d++] = (byte) (i >> 16);\r\n        bytes[d++] = (byte) (i >> 8);\r\n        bytes[d++] = (byte) i;\r\n        // If line separator, jump over it.\r\n        if (sepCnt > 0 && ++cc == 19) {\r\n            sIx += 2;\r\n            cc = 0;\r\n        }\r\n    }\r\n    if (d < len) {\r\n        // Decode last 1-3 bytes (incl '=') into 1-3 bytes\r\n        int i = 0;\r\n        for (int j = 0; sIx <= eIx - pad; j++) i |= IA[chars.charAt(sIx++)] << (18 - j * 6);\r\n        for (int r = 16; d < len; r -= 8) bytes[d++] = (byte) (i >> r);\r\n    }\r\n    return bytes;\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.decodeBase64", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.decodeBase64(java.lang.String, int, int)", "qualified_return_type": "byte[]"}
{"java_doc": "Decodes a BASE64 encoded string that is known to be resonably well formatted. The method is about twice as fast\r\nas decode(String). The preconditions are:<br>\r\n+ The array must have a line length of 76 chars OR no line separators at all (one line).<br>\r\n+ Line separator must be \"\\r\\n\", as specified in RFC 2045 + The array must not contain illegal characters within\r\nthe encoded string<br>\r\n+ The array CAN have illegal characters at the beginning and end, those will be dealt with appropriately.<br>\r\n\r\n@param s The source string. Length 0 will return an empty array. <code>null</code> will throw an exception.\r\n@return The decoded array of bytes. May be of length 0.\r\n", "method_name": "decodeBase64", "return_type": "byte[]", "signature": "decodeBase64(String)", "body_content": "{\r\n    // Check special case\r\n    int sLen = s.length();\r\n    if (sLen == 0) {\r\n        return new byte[0];\r\n    }\r\n    // Start and end index after trimming.\r\n    int sIx = 0, eIx = sLen - 1;\r\n    // Trim illegal chars from start\r\n    while (sIx < eIx && IA[s.charAt(sIx) & 0xff] < 0) sIx++;\r\n    // Trim illegal chars from end\r\n    while (eIx > 0 && IA[s.charAt(eIx) & 0xff] < 0) eIx--;\r\n    // get the padding count (=) (0, 1 or 2)\r\n    // Count '=' at end.\r\n    int pad = s.charAt(eIx) == '=' ? (s.charAt(eIx - 1) == '=' ? 2 : 1) : 0;\r\n    // Content count including possible separators\r\n    int cCnt = eIx - sIx + 1;\r\n    int sepCnt = sLen > 76 ? (s.charAt(76) == '\\r' ? cCnt / 78 : 0) << 1 : 0;\r\n    // The number of decoded bytes\r\n    int len = ((cCnt - sepCnt) * 6 >> 3) - pad;\r\n    // Preallocate byte[] of exact length\r\n    byte[] dArr = new byte[len];\r\n    // Decode all but the last 0 - 2 bytes.\r\n    int d = 0;\r\n    for (int cc = 0, eLen = (len / 3) * 3; d < eLen; ) {\r\n        // Assemble three bytes into an int from four \"valid\" characters.\r\n        int i = IA[s.charAt(sIx++)] << 18 | IA[s.charAt(sIx++)] << 12 | IA[s.charAt(sIx++)] << 6 | IA[s.charAt(sIx++)];\r\n        // Add the bytes\r\n        dArr[d++] = (byte) (i >> 16);\r\n        dArr[d++] = (byte) (i >> 8);\r\n        dArr[d++] = (byte) i;\r\n        // If line separator, jump over it.\r\n        if (sepCnt > 0 && ++cc == 19) {\r\n            sIx += 2;\r\n            cc = 0;\r\n        }\r\n    }\r\n    if (d < len) {\r\n        // Decode last 1-3 bytes (incl '=') into 1-3 bytes\r\n        int i = 0;\r\n        for (int j = 0; sIx <= eIx - pad; j++) i |= IA[s.charAt(sIx++)] << (18 - j * 6);\r\n        for (int r = 16; d < len; r -= 8) dArr[d++] = (byte) (i >> r);\r\n    }\r\n    return dArr;\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.decodeBase64", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.decodeBase64(java.lang.String)", "qualified_return_type": "byte[]"}
{"java_doc": "", "method_name": "encodeUTF8", "return_type": "int", "signature": "encodeUTF8(char[], int, int, byte[])", "body_content": "{\r\n    int sl = sp + len;\r\n    int dp = 0;\r\n    int dlASCII = dp + Math.min(len, da.length);\r\n    // ASCII only optimized loop\r\n    while (dp < dlASCII && sa[sp] < '\\u0080') {\r\n        da[dp++] = (byte) sa[sp++];\r\n    }\r\n    while (sp < sl) {\r\n        char c = sa[sp++];\r\n        if (c < 0x80) {\r\n            // Have at most seven bits\r\n            da[dp++] = (byte) c;\r\n        } else if (c < 0x800) {\r\n            // 2 bytes, 11 bits\r\n            da[dp++] = (byte) (0xc0 | (c >> 6));\r\n            da[dp++] = (byte) (0x80 | (c & 0x3f));\r\n        } else if (c >= '\\uD800' && c < ('\\uDFFF' + 1)) {\r\n            // Character.isSurrogate(c) but 1.7\r\n            final int uc;\r\n            int ip = sp - 1;\r\n            if (Character.isHighSurrogate(c)) {\r\n                if (sl - ip < 2) {\r\n                    uc = -1;\r\n                } else {\r\n                    char d = sa[ip + 1];\r\n                    if (Character.isLowSurrogate(d)) {\r\n                        uc = Character.toCodePoint(c, d);\r\n                    } else {\r\n                        throw new JSONException(\"encodeUTF8 error\", new MalformedInputException(1));\r\n                    }\r\n                }\r\n            } else {\r\n                if (Character.isLowSurrogate(c)) {\r\n                    throw new JSONException(\"encodeUTF8 error\", new MalformedInputException(1));\r\n                } else {\r\n                    uc = c;\r\n                }\r\n            }\r\n            if (uc < 0) {\r\n                da[dp++] = (byte) '?';\r\n            } else {\r\n                da[dp++] = (byte) (0xf0 | ((uc >> 18)));\r\n                da[dp++] = (byte) (0x80 | ((uc >> 12) & 0x3f));\r\n                da[dp++] = (byte) (0x80 | ((uc >> 6) & 0x3f));\r\n                da[dp++] = (byte) (0x80 | (uc & 0x3f));\r\n                // 2 chars\r\n                sp++;\r\n            }\r\n        } else {\r\n            // 3 bytes, 16 bits\r\n            da[dp++] = (byte) (0xe0 | ((c >> 12)));\r\n            da[dp++] = (byte) (0x80 | ((c >> 6) & 0x3f));\r\n            da[dp++] = (byte) (0x80 | (c & 0x3f));\r\n        }\r\n    }\r\n    return dp;\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.encodeUTF8", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.encodeUTF8(char[], int, int, byte[])", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "decodeUTF8", "return_type": "int", "signature": "decodeUTF8(byte[], int, int, char[])", "body_content": "{\r\n    final int sl = sp + len;\r\n    int dp = 0;\r\n    int dlASCII = Math.min(len, da.length);\r\n    // ASCII only optimized loop\r\n    while (dp < dlASCII && sa[sp] >= 0) da[dp++] = (char) sa[sp++];\r\n    while (sp < sl) {\r\n        int b1 = sa[sp++];\r\n        if (b1 >= 0) {\r\n            // 1 byte, 7 bits: 0xxxxxxx\r\n            da[dp++] = (char) b1;\r\n        } else if ((b1 >> 5) == -2 && (b1 & 0x1e) != 0) {\r\n            // 2 bytes, 11 bits: 110xxxxx 10xxxxxx\r\n            if (sp < sl) {\r\n                int b2 = sa[sp++];\r\n                if ((b2 & 0xc0) != 0x80) {\r\n                    // isNotContinuation(b2)\r\n                    return -1;\r\n                } else {\r\n                    da[dp++] = (char) (((b1 << 6) ^ b2) ^ (((byte) 0xC0 << 6) ^ ((byte) 0x80 << 0)));\r\n                }\r\n                continue;\r\n            }\r\n            return -1;\r\n        } else if ((b1 >> 4) == -2) {\r\n            // 3 bytes, 16 bits: 1110xxxx 10xxxxxx 10xxxxxx\r\n            if (sp + 1 < sl) {\r\n                int b2 = sa[sp++];\r\n                int b3 = sa[sp++];\r\n                if (// \r\n                (b1 == (byte) 0xe0 && (b2 & 0xe0) == 0x80) || // \r\n                (b2 & 0xc0) != 0x80 || (b3 & 0xc0) != 0x80) {\r\n                    // isMalformed3(b1, b2, b3)\r\n                    return -1;\r\n                } else {\r\n                    char c = (char) ((b1 << 12) ^ (b2 << 6) ^ (b3 ^ (((byte) 0xE0 << 12) ^ ((byte) 0x80 << 6) ^ ((byte) 0x80 << 0))));\r\n                    if (Character.isSurrogate(c)) {\r\n                        return -1;\r\n                    } else {\r\n                        da[dp++] = c;\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n            return -1;\r\n        } else if ((b1 >> 3) == -2) {\r\n            // 4 bytes, 21 bits: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n            if (sp + 2 < sl) {\r\n                int b2 = sa[sp++];\r\n                int b3 = sa[sp++];\r\n                int b4 = sa[sp++];\r\n                int uc = ((b1 << 18) ^ (b2 << 12) ^ (b3 << 6) ^ (b4 ^ (((byte) 0xF0 << 18) ^ ((byte) 0x80 << 12) ^ ((byte) 0x80 << 6) ^ ((byte) 0x80 << 0))));\r\n                if (// isMalformed4\r\n                ((b2 & 0xc0) != 0x80 || (b3 & 0xc0) != 0x80 || (b4 & 0xc0) != 0x80) || // shortest form check\r\n                !Character.isSupplementaryCodePoint(uc)) {\r\n                    return -1;\r\n                } else {\r\n                    da[dp++] = Character.highSurrogate(uc);\r\n                    da[dp++] = Character.lowSurrogate(uc);\r\n                }\r\n                continue;\r\n            }\r\n            return -1;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n    return dp;\r\n}", "class_name": "IOUtils", "qualified_method_name": "com.alibaba.fastjson.util.IOUtils.decodeUTF8", "qualified_signature": "com.alibaba.fastjson.util.IOUtils.decodeUTF8(byte[], int, int, char[])", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "createAliasMap", "return_type": "Map<String, String>", "signature": "createAliasMap(String[])", "body_content": "{\r\n    Map<String, String> aliasMap = new HashMap<String, String>();\r\n    for (String alias : aliasList) {\r\n        aliasMap.put(alias, alias);\r\n    }\r\n    return aliasMap;\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.createAliasMap", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.createAliasMap(java.lang.String...)", "qualified_return_type": "java.util.Map<java.lang.String, java.lang.String>"}
{"java_doc": "", "method_name": "// \r\nwriteDirectNonContext", "return_type": "// \r\nvoid", "signature": "writeDirectNonContext(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    write(serializer, object, fieldName, fieldType, features);\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeDirectNonContext", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeDirectNonContext(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "// \r\nwriteAsArray", "return_type": "// \r\nvoid", "signature": "writeAsArray(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    write(serializer, object, fieldName, fieldType, features);\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeAsArray", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeAsArray(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "// \r\nwriteAsArrayNonContext", "return_type": "// \r\nvoid", "signature": "writeAsArrayNonContext(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    write(serializer, object, fieldName, fieldType, features);\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeAsArrayNonContext", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeAsArrayNonContext(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "// \r\nwrite", "return_type": "// \r\nvoid", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull();\r\n        return;\r\n    }\r\n    if (writeReference(serializer, object, features)) {\r\n        return;\r\n    }\r\n    final FieldSerializer[] getters;\r\n    if (out.sortField) {\r\n        getters = this.sortedGetters;\r\n    } else {\r\n        getters = this.getters;\r\n    }\r\n    SerialContext parent = serializer.context;\r\n    serializer.setContext(parent, object, fieldName, this.beanInfo.features, features);\r\n    final boolean writeAsArray = isWriteAsArray(serializer, features);\r\n    try {\r\n        final char startSeperator = writeAsArray ? '[' : '{';\r\n        final char endSeperator = writeAsArray ? ']' : '}';\r\n        out.append(startSeperator);\r\n        if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\r\n            serializer.incrementIndent();\r\n            serializer.println();\r\n        }\r\n        boolean commaFlag = false;\r\n        if ((this.beanInfo.features & SerializerFeature.WriteClassName.mask) != 0 || serializer.isWriteClassName(fieldType, object)) {\r\n            Class<?> objClass = object.getClass();\r\n            if (objClass != fieldType) {\r\n                writeClassName(serializer, object);\r\n                commaFlag = true;\r\n            }\r\n        }\r\n        char seperator = commaFlag ? ',' : '\\0';\r\n        final boolean directWritePrefix = out.quoteFieldNames && !out.useSingleQuotes;\r\n        char newSeperator = this.writeBefore(serializer, object, seperator);\r\n        commaFlag = newSeperator == ',';\r\n        final boolean skipTransient = out.isEnabled(SerializerFeature.SkipTransientField);\r\n        final boolean ignoreNonFieldGetter = out.isEnabled(SerializerFeature.IgnoreNonFieldGetter);\r\n        for (int i = 0; i < getters.length; ++i) {\r\n            FieldSerializer fieldSerializer = getters[i];\r\n            Field field = fieldSerializer.fieldInfo.field;\r\n            FieldInfo fieldInfo = fieldSerializer.fieldInfo;\r\n            String fieldInfoName = fieldInfo.name;\r\n            Class<?> fieldClass = fieldInfo.fieldClass;\r\n            if (skipTransient) {\r\n                if (field != null) {\r\n                    if (fieldInfo.fieldTransient) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n            if (ignoreNonFieldGetter) {\r\n                if (field == null) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (// \r\n            (!this.applyName(serializer, object, fieldInfo.name)) || !this.applyLabel(serializer, fieldInfo.label)) {\r\n                continue;\r\n            }\r\n            Object propertyValue;\r\n            try {\r\n                propertyValue = fieldSerializer.getPropertyValue(object);\r\n            } catch (InvocationTargetException ex) {\r\n                if (out.isEnabled(SerializerFeature.IgnoreErrorGetter)) {\r\n                    propertyValue = null;\r\n                } else {\r\n                    throw ex;\r\n                }\r\n            }\r\n            if (!this.apply(serializer, object, fieldInfoName, propertyValue)) {\r\n                continue;\r\n            }\r\n            String key = fieldInfoName;\r\n            key = this.processKey(serializer, object, key, propertyValue);\r\n            Object originalValue = propertyValue;\r\n            propertyValue = this.processValue(serializer, fieldSerializer.fieldContext, object, fieldInfoName, propertyValue);\r\n            if (propertyValue == null && !writeAsArray) {\r\n                if ((!fieldSerializer.writeNull) && (!out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES))) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (propertyValue != null && out.notWriteDefaultValue) {\r\n                Class<?> fieldCLass = fieldInfo.fieldClass;\r\n                if (fieldCLass == byte.class && propertyValue instanceof Byte && ((Byte) propertyValue).byteValue() == 0) {\r\n                    continue;\r\n                } else if (fieldCLass == short.class && propertyValue instanceof Short && ((Short) propertyValue).shortValue() == 0) {\r\n                    continue;\r\n                } else if (fieldCLass == int.class && propertyValue instanceof Integer && ((Integer) propertyValue).intValue() == 0) {\r\n                    continue;\r\n                } else if (fieldCLass == long.class && propertyValue instanceof Long && ((Long) propertyValue).longValue() == 0L) {\r\n                    continue;\r\n                } else if (fieldCLass == float.class && propertyValue instanceof Float && ((Float) propertyValue).floatValue() == 0F) {\r\n                    continue;\r\n                } else if (fieldCLass == double.class && propertyValue instanceof Double && ((Double) propertyValue).doubleValue() == 0D) {\r\n                    continue;\r\n                } else if (fieldCLass == boolean.class && propertyValue instanceof Boolean && !((Boolean) propertyValue).booleanValue()) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (commaFlag) {\r\n                out.write(',');\r\n                if (out.isEnabled(SerializerFeature.PrettyFormat)) {\r\n                    serializer.println();\r\n                }\r\n            }\r\n            if (key != fieldInfoName) {\r\n                if (!writeAsArray) {\r\n                    out.writeFieldName(key, true);\r\n                }\r\n                serializer.write(propertyValue);\r\n            } else if (originalValue != propertyValue) {\r\n                if (!writeAsArray) {\r\n                    fieldSerializer.writePrefix(serializer);\r\n                }\r\n                serializer.write(propertyValue);\r\n            } else {\r\n                if (!writeAsArray) {\r\n                    if (directWritePrefix) {\r\n                        out.write(fieldInfo.name_chars, 0, fieldInfo.name_chars.length);\r\n                    } else {\r\n                        fieldSerializer.writePrefix(serializer);\r\n                    }\r\n                }\r\n                if (!writeAsArray) {\r\n                    JSONField fieldAnnotation = fieldInfo.getAnnotation();\r\n                    if (fieldClass == String.class && (fieldAnnotation == null || fieldAnnotation.serializeUsing() == Void.class)) {\r\n                        if (propertyValue == null) {\r\n                            if ((out.features & SerializerFeature.WriteNullStringAsEmpty.mask) != 0 || (fieldSerializer.features & SerializerFeature.WriteNullStringAsEmpty.mask) != 0) {\r\n                                out.writeString(\"\");\r\n                            } else {\r\n                                out.writeNull();\r\n                            }\r\n                        } else {\r\n                            String propertyValueString = (String) propertyValue;\r\n                            if (out.useSingleQuotes) {\r\n                                out.writeStringWithSingleQuote(propertyValueString);\r\n                            } else {\r\n                                out.writeStringWithDoubleQuote(propertyValueString, (char) 0);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        fieldSerializer.writeValue(serializer, propertyValue);\r\n                    }\r\n                } else {\r\n                    fieldSerializer.writeValue(serializer, propertyValue);\r\n                }\r\n            }\r\n            commaFlag = true;\r\n        }\r\n        this.writeAfter(serializer, object, commaFlag ? ',' : '\\0');\r\n        if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\r\n            serializer.decrementIdent();\r\n            serializer.println();\r\n        }\r\n        out.append(endSeperator);\r\n    } catch (Exception e) {\r\n        String errorMessage = \"write javaBean error\";\r\n        if (object != null) {\r\n            errorMessage += \", class \" + object.getClass().getName();\r\n        }\r\n        if (fieldName != null) {\r\n            errorMessage += \", fieldName : \" + fieldName;\r\n        }\r\n        if (e.getMessage() != null) {\r\n            errorMessage += (\", \" + e.getMessage());\r\n        }\r\n        throw new JSONException(errorMessage, e);\r\n    } finally {\r\n        serializer.context = parent;\r\n    }\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeClassName", "return_type": "void", "signature": "writeClassName(JSONSerializer, Object)", "body_content": "{\r\n    serializer.out.writeFieldName(serializer.config.typeKey, false);\r\n    String typeName = this.beanInfo.typeName;\r\n    if (typeName == null) {\r\n        Class<?> clazz = object.getClass();\r\n        if (TypeUtils.isProxy(clazz)) {\r\n            clazz = clazz.getSuperclass();\r\n        }\r\n        typeName = clazz.getName();\r\n    }\r\n    serializer.write(typeName);\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeClassName", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeClassName(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeReference", "return_type": "boolean", "signature": "writeReference(JSONSerializer, Object, int)", "body_content": "{\r\n    SerialContext context = serializer.context;\r\n    int mask = SerializerFeature.DisableCircularReferenceDetect.mask;\r\n    if (context == null || (context.features & mask) != 0 || (fieldFeatures & mask) != 0) {\r\n        return false;\r\n    }\r\n    if (serializer.references != null && serializer.references.containsKey(object)) {\r\n        serializer.writeReference(object);\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeReference", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeReference(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, int)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isWriteAsArray", "return_type": "boolean", "signature": "isWriteAsArray(JSONSerializer)", "body_content": "{\r\n    return isWriteAsArray(serializer, 0);\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.isWriteAsArray", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.isWriteAsArray(com.alibaba.fastjson.serializer.JSONSerializer)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isWriteAsArray", "return_type": "boolean", "signature": "isWriteAsArray(JSONSerializer, int)", "body_content": "{\r\n    final int mask = SerializerFeature.BeanToArray.mask;\r\n    return // \r\n    (beanInfo.features & mask) != 0 || // \r\n    serializer.out.beanToArray || (fieldFeatrues & mask) != 0;\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.isWriteAsArray", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.isWriteAsArray(com.alibaba.fastjson.serializer.JSONSerializer, int)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getFieldValue", "return_type": "Object", "signature": "getFieldValue(Object, String)", "body_content": "{\r\n    FieldSerializer fieldDeser = getFieldSerializer(key);\r\n    if (fieldDeser == null) {\r\n        throw new JSONException(\"field not found. \" + key);\r\n    }\r\n    try {\r\n        return fieldDeser.getPropertyValue(object);\r\n    } catch (InvocationTargetException ex) {\r\n        throw new JSONException(\"getFieldValue error.\" + key, ex);\r\n    } catch (IllegalAccessException ex) {\r\n        throw new JSONException(\"getFieldValue error.\" + key, ex);\r\n    }\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getFieldValue", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getFieldValue(java.lang.Object, java.lang.String)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "getFieldSerializer", "return_type": "FieldSerializer", "signature": "getFieldSerializer(String)", "body_content": "{\r\n    if (key == null) {\r\n        return null;\r\n    }\r\n    int low = 0;\r\n    int high = sortedGetters.length - 1;\r\n    while (low <= high) {\r\n        int mid = (low + high) >>> 1;\r\n        String fieldName = sortedGetters[mid].fieldInfo.name;\r\n        int cmp = fieldName.compareTo(key);\r\n        if (cmp < 0) {\r\n            low = mid + 1;\r\n        } else if (cmp > 0) {\r\n            high = mid - 1;\r\n        } else {\r\n            // key found\r\n            return sortedGetters[mid];\r\n        }\r\n    }\r\n    // key not found.\r\n    return null;\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getFieldSerializer", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getFieldSerializer(java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.serializer.FieldSerializer"}
{"java_doc": "", "method_name": "getFieldValues", "return_type": "List<Object>", "signature": "getFieldValues(Object)", "body_content": "{\r\n    List<Object> fieldValues = new ArrayList<Object>(sortedGetters.length);\r\n    for (FieldSerializer getter : sortedGetters) {\r\n        fieldValues.add(getter.getPropertyValue(object));\r\n    }\r\n    return fieldValues;\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getFieldValues", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getFieldValues(java.lang.Object)", "qualified_return_type": "java.util.List<java.lang.Object>"}
{"java_doc": "", "method_name": "getSize", "return_type": "int", "signature": "getSize(Object)", "body_content": "{\r\n    int size = 0;\r\n    for (FieldSerializer getter : sortedGetters) {\r\n        Object value = getter.getPropertyValue(object);\r\n        if (value != null) {\r\n            size++;\r\n        }\r\n    }\r\n    return size;\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getSize", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getSize(java.lang.Object)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "getFieldValuesMap", "return_type": "Map<String, Object>", "signature": "getFieldValuesMap(Object)", "body_content": "{\r\n    Map<String, Object> map = new LinkedHashMap<String, Object>(sortedGetters.length);\r\n    for (FieldSerializer getter : sortedGetters) {\r\n        map.put(getter.fieldInfo.name, getter.getPropertyValue(object));\r\n    }\r\n    return map;\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getFieldValuesMap", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getFieldValuesMap(java.lang.Object)", "qualified_return_type": "java.util.Map<java.lang.String, java.lang.Object>"}
{"java_doc": "", "method_name": "getBeanContext", "return_type": "BeanContext", "signature": "getBeanContext(int)", "body_content": "{\r\n    return sortedGetters[orinal].fieldContext;\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getBeanContext", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getBeanContext(int)", "qualified_return_type": "com.alibaba.fastjson.serializer.BeanContext"}
{"java_doc": "", "method_name": "getFieldType", "return_type": "Type", "signature": "getFieldType(int)", "body_content": "{\r\n    return sortedGetters[ordinal].fieldInfo.fieldType;\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getFieldType", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.getFieldType(int)", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "", "method_name": "// \r\nwriteBefore", "return_type": "// \r\nchar", "signature": "writeBefore(JSONSerializer, Object, char)", "body_content": "{\r\n    if (jsonBeanDeser.beforeFilters != null) {\r\n        for (BeforeFilter beforeFilter : jsonBeanDeser.beforeFilters) {\r\n            seperator = beforeFilter.writeBefore(jsonBeanDeser, object, seperator);\r\n        }\r\n    }\r\n    if (this.beforeFilters != null) {\r\n        for (BeforeFilter beforeFilter : this.beforeFilters) {\r\n            seperator = beforeFilter.writeBefore(jsonBeanDeser, object, seperator);\r\n        }\r\n    }\r\n    return seperator;\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeBefore", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeBefore(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, char)", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "// \r\nwriteAfter", "return_type": "// \r\nchar", "signature": "writeAfter(JSONSerializer, Object, char)", "body_content": "{\r\n    if (jsonBeanDeser.afterFilters != null) {\r\n        for (AfterFilter afterFilter : jsonBeanDeser.afterFilters) {\r\n            seperator = afterFilter.writeAfter(jsonBeanDeser, object, seperator);\r\n        }\r\n    }\r\n    if (this.afterFilters != null) {\r\n        for (AfterFilter afterFilter : this.afterFilters) {\r\n            seperator = afterFilter.writeAfter(jsonBeanDeser, object, seperator);\r\n        }\r\n    }\r\n    return seperator;\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeAfter", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.writeAfter(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, char)", "qualified_return_type": "char"}
{"java_doc": "", "method_name": "applyLabel", "return_type": "boolean", "signature": "applyLabel(JSONSerializer, String)", "body_content": "{\r\n    if (jsonBeanDeser.labelFilters != null) {\r\n        for (LabelFilter propertyFilter : jsonBeanDeser.labelFilters) {\r\n            if (!propertyFilter.apply(label)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    if (this.labelFilters != null) {\r\n        for (LabelFilter propertyFilter : this.labelFilters) {\r\n            if (!propertyFilter.apply(label)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}", "class_name": "JavaBeanSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JavaBeanSerializer.applyLabel", "qualified_signature": "com.alibaba.fastjson.serializer.JavaBeanSerializer.applyLabel(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONSerializer, Object, String)", "body_content": "", "class_name": "PropertyPreFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.PropertyPreFilter.apply", "qualified_signature": "com.alibaba.fastjson.serializer.PropertyPreFilter.apply(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "Visits a zero operand instruction.\r\n\r\n@param opcode the opcode of the instruction to be visited. This opcode is either NOP, ACONST_NULL, ICONST_M1,\r\nICONST_0, ICONST_1, ICONST_2, ICONST_3, ICONST_4, ICONST_5, LCONST_0, LCONST_1, FCONST_0, FCONST_1, FCONST_2,\r\nDCONST_0, DCONST_1, IALOAD, LALOAD, FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD, IASTORE, LASTORE, FASTORE,\r\nDASTORE, AASTORE, BASTORE, CASTORE, SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2, SWAP, IADD,\r\nLADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB, IMUL, LMUL, FMUL, DMUL, IDIV, LDIV, FDIV, DDIV, IREM, LREM, FREM, DREM,\r\nINEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR, IUSHR, LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D,\r\nL2I, L2F, L2D, F2I, F2L, F2D, D2I, D2L, D2F, I2B, I2C, I2S, LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN,\r\nFRETURN, DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER, or MONITOREXIT.\r\n", "method_name": "visitInsn", "return_type": "void", "signature": "visitInsn(int)", "body_content": "", "class_name": "MethodVisitor", "qualified_method_name": "com.alibaba.fastjson.asm.MethodVisitor.visitInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodVisitor.visitInsn(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "visitIntInsn", "return_type": "void", "signature": "visitIntInsn(int, int)", "body_content": "", "class_name": "MethodVisitor", "qualified_method_name": "com.alibaba.fastjson.asm.MethodVisitor.visitIntInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodVisitor.visitIntInsn(int, int)", "qualified_return_type": "void"}
{"java_doc": "Visits a local variable instruction. A local variable instruction is an instruction that loads or stores the\r\nvalue of a local variable.\r\n\r\n@param opcode the opcode of the local variable instruction to be visited. This opcode is either ILOAD, LLOAD,\r\nFLOAD, DLOAD, ALOAD, ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET.\r\n@param var the operand of the instruction to be visited. This operand is the index of a local variable.\r\n", "method_name": "visitVarInsn", "return_type": "void", "signature": "visitVarInsn(int, int)", "body_content": "", "class_name": "MethodVisitor", "qualified_method_name": "com.alibaba.fastjson.asm.MethodVisitor.visitVarInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodVisitor.visitVarInsn(int, int)", "qualified_return_type": "void"}
{"java_doc": "Visits a type instruction. A type instruction is an instruction that takes the internal name of a class as\r\nparameter.\r\n\r\n@param opcode the opcode of the type instruction to be visited. This opcode is either NEW, ANEWARRAY, CHECKCAST\r\nor INSTANCEOF.\r\n@param type the operand of the instruction to be visited. This operand must be the internal name of an object or\r\narray class (see {@link Type#getInternalName() getInternalName}).\r\n", "method_name": "visitTypeInsn", "return_type": "void", "signature": "visitTypeInsn(int, String)", "body_content": "", "class_name": "MethodVisitor", "qualified_method_name": "com.alibaba.fastjson.asm.MethodVisitor.visitTypeInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "Visits a field instruction. A field instruction is an instruction that loads or stores the value of a field of an\r\nobject.\r\n\r\n@param opcode the opcode of the type instruction to be visited. This opcode is either GETSTATIC, PUTSTATIC,\r\nGETFIELD or PUTFIELD.\r\n@param owner the internal name of the field's owner class (see {@link Type#getInternalName() getInternalName}).\r\n@param name the field's name.\r\n@param desc the field's descriptor (see {@link Type Type}).\r\n", "method_name": "visitFieldInsn", "return_type": "void", "signature": "visitFieldInsn(int, String, String, String)", "body_content": "", "class_name": "MethodVisitor", "qualified_method_name": "com.alibaba.fastjson.asm.MethodVisitor.visitFieldInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodVisitor.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "visitMethodInsn", "return_type": "void", "signature": "visitMethodInsn(int, String, String, String)", "body_content": "", "class_name": "MethodVisitor", "qualified_method_name": "com.alibaba.fastjson.asm.MethodVisitor.visitMethodInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "Visits a jump instruction. A jump instruction is an instruction that may jump to another instruction.\r\n\r\n@param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ, IFNE, IFLT, IFGE,\r\nIFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT, IF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR,\r\nIFNULL or IFNONNULL.\r\n@param label the operand of the instruction to be visited. This operand is a label that designates the\r\ninstruction to which the jump instruction may jump.\r\n", "method_name": "visitJumpInsn", "return_type": "void", "signature": "visitJumpInsn(int, Label)", "body_content": "", "class_name": "MethodVisitor", "qualified_method_name": "com.alibaba.fastjson.asm.MethodVisitor.visitJumpInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodVisitor.visitJumpInsn(int, com.alibaba.fastjson.asm.Label)", "qualified_return_type": "void"}
{"java_doc": "Visits a label. A label designates the instruction that will be visited just after it.\r\n\r\n@param label a {@link Label Label} object.\r\n", "method_name": "visitLabel", "return_type": "void", "signature": "visitLabel(Label)", "body_content": "", "class_name": "MethodVisitor", "qualified_method_name": "com.alibaba.fastjson.asm.MethodVisitor.visitLabel", "qualified_signature": "com.alibaba.fastjson.asm.MethodVisitor.visitLabel(com.alibaba.fastjson.asm.Label)", "qualified_return_type": "void"}
{"java_doc": "Visits a LDC instruction.\r\n\r\n@param cst the constant to be loaded on the stack. This parameter must be a non null {@link Integer}, a\r\n{@link Float}, a {@link Long}, a {@link Double} a {@link String} (or a {@link Type} for <tt>.class</tt>\r\nconstants, for classes whose version is 49.0 or more).\r\n", "method_name": "visitLdcInsn", "return_type": "void", "signature": "visitLdcInsn(Object)", "body_content": "", "class_name": "MethodVisitor", "qualified_method_name": "com.alibaba.fastjson.asm.MethodVisitor.visitLdcInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodVisitor.visitLdcInsn(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "Visits an IINC instruction.\r\n\r\n@param var index of the local variable to be incremented.\r\n@param increment amount to increment the local variable by.\r\n", "method_name": "visitIincInsn", "return_type": "void", "signature": "visitIincInsn(int, int)", "body_content": "", "class_name": "MethodVisitor", "qualified_method_name": "com.alibaba.fastjson.asm.MethodVisitor.visitIincInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodVisitor.visitIincInsn(int, int)", "qualified_return_type": "void"}
{"java_doc": "Visits the maximum stack size and the maximum number of local variables of the method.\r\n\r\n@param maxStack maximum stack size of the method.\r\n@param maxLocals maximum number of local variables for the method.\r\n", "method_name": "visitMaxs", "return_type": "void", "signature": "visitMaxs(int, int)", "body_content": "", "class_name": "MethodVisitor", "qualified_method_name": "com.alibaba.fastjson.asm.MethodVisitor.visitMaxs", "qualified_signature": "com.alibaba.fastjson.asm.MethodVisitor.visitMaxs(int, int)", "qualified_return_type": "void"}
{"java_doc": "Visits the end of the method. This method, which is the last one to be called, is used to inform the visitor that\r\nall the annotations and attributes of the method have been visited.\r\n", "method_name": "visitEnd", "return_type": "void", "signature": "visitEnd()", "body_content": "", "class_name": "MethodVisitor", "qualified_method_name": "com.alibaba.fastjson.asm.MethodVisitor.visitEnd", "qualified_signature": "com.alibaba.fastjson.asm.MethodVisitor.visitEnd()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(String)", "body_content": "", "class_name": "LabelFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.LabelFilter.apply", "qualified_signature": "com.alibaba.fastjson.serializer.LabelFilter.apply(java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "process", "return_type": "String", "signature": "process(Object, String, Object)", "body_content": "{\r\n    if (name == null || name.length() == 0) {\r\n        return name;\r\n    }\r\n    char[] chars = name.toCharArray();\r\n    chars[0] = Character.toUpperCase(chars[0]);\r\n    String pascalName = new String(chars);\r\n    return pascalName;\r\n}", "class_name": "PascalNameFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.PascalNameFilter.process", "qualified_signature": "com.alibaba.fastjson.serializer.PascalNameFilter.process(java.lang.Object, java.lang.String, java.lang.Object)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getActualTypeArguments", "return_type": "Type[]", "signature": "getActualTypeArguments()", "body_content": "{\r\n    return actualTypeArguments;\r\n}", "class_name": "ParameterizedTypeImpl", "qualified_method_name": "com.alibaba.fastjson.util.ParameterizedTypeImpl.getActualTypeArguments", "qualified_signature": "com.alibaba.fastjson.util.ParameterizedTypeImpl.getActualTypeArguments()", "qualified_return_type": "java.lang.reflect.Type[]"}
{"java_doc": "", "method_name": "getOwnerType", "return_type": "Type", "signature": "getOwnerType()", "body_content": "{\r\n    return ownerType;\r\n}", "class_name": "ParameterizedTypeImpl", "qualified_method_name": "com.alibaba.fastjson.util.ParameterizedTypeImpl.getOwnerType", "qualified_signature": "com.alibaba.fastjson.util.ParameterizedTypeImpl.getOwnerType()", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "", "method_name": "getRawType", "return_type": "Type", "signature": "getRawType()", "body_content": "{\r\n    return rawType;\r\n}", "class_name": "ParameterizedTypeImpl", "qualified_method_name": "com.alibaba.fastjson.util.ParameterizedTypeImpl.getRawType", "qualified_signature": "com.alibaba.fastjson.util.ParameterizedTypeImpl.getRawType()", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "", "method_name": "equals", "return_type": "boolean", "signature": "equals(Object)", "body_content": "{\r\n    if (this == o)\r\n        return true;\r\n    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    ParameterizedTypeImpl that = (ParameterizedTypeImpl) o;\r\n    // Probably incorrect - comparing Object[] arrays with Arrays.equals\r\n    if (!Arrays.equals(actualTypeArguments, that.actualTypeArguments))\r\n        return false;\r\n    if (ownerType != null ? !ownerType.equals(that.ownerType) : that.ownerType != null)\r\n        return false;\r\n    return rawType != null ? rawType.equals(that.rawType) : that.rawType == null;\r\n}", "class_name": "ParameterizedTypeImpl", "qualified_method_name": "com.alibaba.fastjson.util.ParameterizedTypeImpl.equals", "qualified_signature": "com.alibaba.fastjson.util.ParameterizedTypeImpl.equals(java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object instanceof AtomicInteger) {\r\n        AtomicInteger val = (AtomicInteger) object;\r\n        out.writeInt(val.get());\r\n        return;\r\n    }\r\n    if (object instanceof AtomicLong) {\r\n        AtomicLong val = (AtomicLong) object;\r\n        out.writeLong(val.get());\r\n        return;\r\n    }\r\n    if (object instanceof AtomicBoolean) {\r\n        AtomicBoolean val = (AtomicBoolean) object;\r\n        out.append(val.get() ? \"true\" : \"false\");\r\n        return;\r\n    }\r\n    if (object == null) {\r\n        out.writeNull(SerializerFeature.WriteNullListAsEmpty);\r\n        return;\r\n    }\r\n    if (object instanceof AtomicIntegerArray) {\r\n        AtomicIntegerArray array = (AtomicIntegerArray) object;\r\n        int len = array.length();\r\n        out.write('[');\r\n        for (int i = 0; i < len; ++i) {\r\n            int val = array.get(i);\r\n            if (i != 0) {\r\n                out.write(',');\r\n            }\r\n            out.writeInt(val);\r\n        }\r\n        out.write(']');\r\n        return;\r\n    }\r\n    AtomicLongArray array = (AtomicLongArray) object;\r\n    int len = array.length();\r\n    out.write('[');\r\n    for (int i = 0; i < len; ++i) {\r\n        long val = array.get(i);\r\n        if (i != 0) {\r\n            out.write(',');\r\n        }\r\n        out.writeLong(val);\r\n    }\r\n    out.write(']');\r\n}", "class_name": "AtomicCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.AtomicCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.AtomicCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    if (parser.lexer.token() == JSONToken.NULL) {\r\n        parser.lexer.nextToken(JSONToken.COMMA);\r\n        return null;\r\n    }\r\n    JSONArray array = new JSONArray();\r\n    parser.parseArray(array);\r\n    if (clazz == AtomicIntegerArray.class) {\r\n        AtomicIntegerArray atomicArray = new AtomicIntegerArray(array.size());\r\n        for (int i = 0; i < array.size(); ++i) {\r\n            atomicArray.set(i, array.getInteger(i));\r\n        }\r\n        return (T) atomicArray;\r\n    }\r\n    AtomicLongArray atomicArray = new AtomicLongArray(array.size());\r\n    for (int i = 0; i < array.size(); ++i) {\r\n        atomicArray.set(i, array.getLong(i));\r\n    }\r\n    return (T) atomicArray;\r\n}", "class_name": "AtomicCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.AtomicCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.AtomicCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LBRACKET;\r\n}", "class_name": "AtomicCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.AtomicCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.AtomicCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "Sets this item to an item that do not hold a primitive value.\r\n\r\n@param type the type of this item.\r\n@param strVal1 first part of the value of this item.\r\n@param strVal2 second part of the value of this item.\r\n@param strVal3 third part of the value of this item.\r\n", "method_name": "set", "return_type": "void", "signature": "set(int, String, String, String)", "body_content": "{\r\n    this.type = type;\r\n    this.strVal1 = strVal1;\r\n    this.strVal2 = strVal2;\r\n    this.strVal3 = strVal3;\r\n    switch(type) {\r\n        case 1:\r\n        case 8:\r\n        case 7:\r\n        case 13:\r\n            /* ClassWriter.TYPE_NORMAL */\r\n            hashCode = 0x7FFFFFFF & (type + strVal1.hashCode());\r\n            return;\r\n        case 12:\r\n            /* ClassWriter.NAME_TYPE */\r\n            hashCode = 0x7FFFFFFF & (type + strVal1.hashCode() * strVal2.hashCode());\r\n            return;\r\n        // ClassWriter.FIELD:\r\n        // ClassWriter.METH:\r\n        // ClassWriter.IMETH:\r\n        default:\r\n            hashCode = 0x7FFFFFFF & (type + strVal1.hashCode() * strVal2.hashCode() * strVal3.hashCode());\r\n    }\r\n}", "class_name": "Item", "qualified_method_name": "com.alibaba.fastjson.asm.Item.set", "qualified_signature": "com.alibaba.fastjson.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "Sets this item to an integer item.\r\n\r\n@param intVal the value of this item.\r\n", "method_name": "set", "return_type": "void", "signature": "set(int)", "body_content": "{\r\n    this.type = 3;\r\n    this.intVal = intVal;\r\n    this.hashCode = 0x7FFFFFFF & (type + intVal);\r\n}", "class_name": "Item", "qualified_method_name": "com.alibaba.fastjson.asm.Item.set", "qualified_signature": "com.alibaba.fastjson.asm.Item.set(int)", "qualified_return_type": "void"}
{"java_doc": "Indicates if the given item is equal to this one. <i>This method assumes that the two items have the same\r\n{@link #type}</i>.\r\n\r\n@param i the item to be compared to this one. Both items must have the same {@link #type}.\r\n@return <tt>true</tt> if the given item if equal to this one, <tt>false</tt> otherwise.\r\n", "method_name": "isEqualTo", "return_type": "boolean", "signature": "isEqualTo(Item)", "body_content": "{\r\n    switch(type) {\r\n        case 1:\r\n        case 8:\r\n        case 7:\r\n        case 13:\r\n            /* ClassWriter.TYPE_NORMAL */\r\n            return i.strVal1.equals(strVal1);\r\n        case 15:\r\n        case 5:\r\n        case 6:\r\n            /* ClassWriter.DOUBLE */\r\n            return i.longVal == longVal;\r\n        case 3:\r\n        case 4:\r\n            /* ClassWriter.FLOAT */\r\n            return i.intVal == intVal;\r\n        case 12:\r\n            /* ClassWriter.NAME_TYPE */\r\n            return i.strVal1.equals(strVal1) && i.strVal2.equals(strVal2);\r\n        // case ClassWriter.FIELD:\r\n        // case ClassWriter.METH:\r\n        // case ClassWriter.IMETH:\r\n        default:\r\n            return i.strVal1.equals(strVal1) && i.strVal2.equals(strVal2) && i.strVal3.equals(strVal3);\r\n    }\r\n}", "class_name": "Item", "qualified_method_name": "com.alibaba.fastjson.asm.Item.isEqualTo", "qualified_signature": "com.alibaba.fastjson.asm.Item.isEqualTo(com.alibaba.fastjson.asm.Item)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "put", "return_type": "boolean", "signature": "put(Class, ObjectSerializer)", "body_content": "{\r\n    return super.putInternal(clazz, serializer);\r\n}", "class_name": "JSONSerializerMap", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializerMap.put", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializerMap.put(java.lang.Class<?>, com.alibaba.fastjson.serializer.ObjectSerializer)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getDateFomartPattern", "return_type": "String", "signature": "getDateFomartPattern()", "body_content": "{\r\n    return dateFormatPattern;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getDateFomartPattern", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getDateFomartPattern()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getDateFormat", "return_type": "DateFormat", "signature": "getDateFormat()", "body_content": "{\r\n    if (dateFormat == null) {\r\n        dateFormat = new SimpleDateFormat(dateFormatPattern, lexer.getLocale());\r\n        dateFormat.setTimeZone(lexer.getTimeZone());\r\n    }\r\n    return dateFormat;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getDateFormat", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getDateFormat()", "qualified_return_type": "java.text.DateFormat"}
{"java_doc": "", "method_name": "setDateFormat", "return_type": "void", "signature": "setDateFormat(String)", "body_content": "{\r\n    this.dateFormatPattern = dateFormat;\r\n    this.dateFormat = null;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.setDateFormat", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.setDateFormat(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setDateFomrat", "return_type": "void", "signature": "setDateFomrat(DateFormat)", "body_content": "{\r\n    this.dateFormat = dateFormat;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.setDateFomrat", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.setDateFomrat(java.text.DateFormat)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getSymbolTable", "return_type": "SymbolTable", "signature": "getSymbolTable()", "body_content": "{\r\n    return symbolTable;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getSymbolTable", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getSymbolTable()", "qualified_return_type": "com.alibaba.fastjson.parser.SymbolTable"}
{"java_doc": "", "method_name": "getInput", "return_type": "String", "signature": "getInput()", "body_content": "{\r\n    if (input instanceof char[]) {\r\n        return new String((char[]) input);\r\n    }\r\n    return input.toString();\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getInput", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getInput()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "parseObject", "return_type": "Object", "signature": "parseObject(Map, Object)", "body_content": "{\r\n    final JSONLexer lexer = this.lexer;\r\n    if (lexer.token() == JSONToken.NULL) {\r\n        lexer.nextToken();\r\n        return null;\r\n    }\r\n    if (lexer.token() == JSONToken.RBRACE) {\r\n        lexer.nextToken();\r\n        return object;\r\n    }\r\n    if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\r\n        throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName() + \", \" + lexer.info());\r\n    }\r\n    ParseContext context = this.context;\r\n    try {\r\n        boolean setContextFlag = false;\r\n        for (; ; ) {\r\n            lexer.skipWhitespace();\r\n            char ch = lexer.getCurrent();\r\n            if (lexer.isEnabled(Feature.AllowArbitraryCommas)) {\r\n                while (ch == ',') {\r\n                    lexer.next();\r\n                    lexer.skipWhitespace();\r\n                    ch = lexer.getCurrent();\r\n                }\r\n            }\r\n            boolean isObjectKey = false;\r\n            Object key;\r\n            if (ch == '\"') {\r\n                key = lexer.scanSymbol(symbolTable, '\"');\r\n                lexer.skipWhitespace();\r\n                ch = lexer.getCurrent();\r\n                if (ch != ':') {\r\n                    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \" + key);\r\n                }\r\n            } else if (ch == '}') {\r\n                lexer.next();\r\n                lexer.resetStringPosition();\r\n                lexer.nextToken();\r\n                return object;\r\n            } else if (ch == '\\'') {\r\n                if (!lexer.isEnabled(Feature.AllowSingleQuotes)) {\r\n                    throw new JSONException(\"syntax error\");\r\n                }\r\n                key = lexer.scanSymbol(symbolTable, '\\'');\r\n                lexer.skipWhitespace();\r\n                ch = lexer.getCurrent();\r\n                if (ch != ':') {\r\n                    throw new JSONException(\"expect ':' at \" + lexer.pos());\r\n                }\r\n            } else if (ch == EOI) {\r\n                throw new JSONException(\"syntax error\");\r\n            } else if (ch == ',') {\r\n                throw new JSONException(\"syntax error\");\r\n            } else if ((ch >= '0' && ch <= '9') || ch == '-') {\r\n                lexer.resetStringPosition();\r\n                lexer.scanNumber();\r\n                try {\r\n                    if (lexer.token() == JSONToken.LITERAL_INT) {\r\n                        key = lexer.integerValue();\r\n                    } else {\r\n                        key = lexer.decimalValue(true);\r\n                    }\r\n                } catch (NumberFormatException e) {\r\n                    throw new JSONException(\"parse number key error\" + lexer.info());\r\n                }\r\n                ch = lexer.getCurrent();\r\n                if (ch != ':') {\r\n                    throw new JSONException(\"parse number key error\" + lexer.info());\r\n                }\r\n            } else if (ch == '{' || ch == '[') {\r\n                lexer.nextToken();\r\n                key = parse();\r\n                isObjectKey = true;\r\n            } else {\r\n                if (!lexer.isEnabled(Feature.AllowUnQuotedFieldNames)) {\r\n                    throw new JSONException(\"syntax error\");\r\n                }\r\n                key = lexer.scanSymbolUnQuoted(symbolTable);\r\n                lexer.skipWhitespace();\r\n                ch = lexer.getCurrent();\r\n                if (ch != ':') {\r\n                    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \" + ch);\r\n                }\r\n            }\r\n            if (!isObjectKey) {\r\n                lexer.next();\r\n                lexer.skipWhitespace();\r\n            }\r\n            ch = lexer.getCurrent();\r\n            lexer.resetStringPosition();\r\n            if (key == JSON.DEFAULT_TYPE_KEY && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {\r\n                String typeName = lexer.scanSymbol(symbolTable, '\"');\r\n                Class<?> clazz = TypeUtils.loadClass(typeName, config.getDefaultClassLoader());\r\n                if (clazz == null) {\r\n                    object.put(JSON.DEFAULT_TYPE_KEY, typeName);\r\n                    continue;\r\n                }\r\n                lexer.nextToken(JSONToken.COMMA);\r\n                if (lexer.token() == JSONToken.RBRACE) {\r\n                    lexer.nextToken(JSONToken.COMMA);\r\n                    try {\r\n                        Object instance = null;\r\n                        ObjectDeserializer deserializer = this.config.getDeserializer(clazz);\r\n                        if (deserializer instanceof JavaBeanDeserializer) {\r\n                            instance = ((JavaBeanDeserializer) deserializer).createInstance(this, clazz);\r\n                        }\r\n                        if (instance == null) {\r\n                            if (clazz == Cloneable.class) {\r\n                                instance = new HashMap();\r\n                            } else if (\"java.util.Collections$EmptyMap\".equals(typeName)) {\r\n                                instance = Collections.emptyMap();\r\n                            } else {\r\n                                instance = clazz.newInstance();\r\n                            }\r\n                        }\r\n                        return instance;\r\n                    } catch (Exception e) {\r\n                        throw new JSONException(\"create instance error\", e);\r\n                    }\r\n                }\r\n                this.setResolveStatus(TypeNameRedirect);\r\n                if (this.context != null && !(fieldName instanceof Integer)) {\r\n                    this.popContext();\r\n                }\r\n                if (object.size() > 0) {\r\n                    Object newObj = TypeUtils.cast(object, clazz, this.config);\r\n                    this.parseObject(newObj);\r\n                    return newObj;\r\n                }\r\n                ObjectDeserializer deserializer = config.getDeserializer(clazz);\r\n                return deserializer.deserialze(this, clazz, fieldName);\r\n            }\r\n            if (key == \"$ref\" && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {\r\n                lexer.nextToken(JSONToken.LITERAL_STRING);\r\n                if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                    String ref = lexer.stringVal();\r\n                    lexer.nextToken(JSONToken.RBRACE);\r\n                    Object refValue = null;\r\n                    if (\"@\".equals(ref)) {\r\n                        if (this.context != null) {\r\n                            ParseContext thisContext = this.context;\r\n                            Object thisObj = thisContext.object;\r\n                            if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\r\n                                refValue = thisObj;\r\n                            } else if (thisContext.parent != null) {\r\n                                refValue = thisContext.parent.object;\r\n                            }\r\n                        }\r\n                    } else if (\"..\".equals(ref)) {\r\n                        if (context.object != null) {\r\n                            refValue = context.object;\r\n                        } else {\r\n                            addResolveTask(new ResolveTask(context, ref));\r\n                            setResolveStatus(DefaultJSONParser.NeedToResolve);\r\n                        }\r\n                    } else if (\"$\".equals(ref)) {\r\n                        ParseContext rootContext = context;\r\n                        while (rootContext.parent != null) {\r\n                            rootContext = rootContext.parent;\r\n                        }\r\n                        if (rootContext.object != null) {\r\n                            refValue = rootContext.object;\r\n                        } else {\r\n                            addResolveTask(new ResolveTask(rootContext, ref));\r\n                            setResolveStatus(DefaultJSONParser.NeedToResolve);\r\n                        }\r\n                    } else {\r\n                        addResolveTask(new ResolveTask(context, ref));\r\n                        setResolveStatus(DefaultJSONParser.NeedToResolve);\r\n                    }\r\n                    if (lexer.token() != JSONToken.RBRACE) {\r\n                        throw new JSONException(\"syntax error\");\r\n                    }\r\n                    lexer.nextToken(JSONToken.COMMA);\r\n                    return refValue;\r\n                } else {\r\n                    throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\r\n                }\r\n            }\r\n            if (!setContextFlag) {\r\n                if (this.context != null && fieldName == this.context.fieldName && object == this.context.object) {\r\n                    context = this.context;\r\n                } else {\r\n                    ParseContext contextR = setContext(object, fieldName);\r\n                    if (context == null) {\r\n                        context = contextR;\r\n                    }\r\n                    setContextFlag = true;\r\n                }\r\n            }\r\n            if (object.getClass() == JSONObject.class) {\r\n                key = (key == null) ? \"null\" : key.toString();\r\n            }\r\n            Object value;\r\n            if (ch == '\"') {\r\n                lexer.scanString();\r\n                String strValue = lexer.stringVal();\r\n                value = strValue;\r\n                if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\r\n                    JSONScanner iso8601Lexer = new JSONScanner(strValue);\r\n                    if (iso8601Lexer.scanISO8601DateIfMatch()) {\r\n                        value = iso8601Lexer.getCalendar().getTime();\r\n                    }\r\n                    iso8601Lexer.close();\r\n                }\r\n                object.put(key, value);\r\n            } else if (ch >= '0' && ch <= '9' || ch == '-') {\r\n                lexer.scanNumber();\r\n                if (lexer.token() == JSONToken.LITERAL_INT) {\r\n                    value = lexer.integerValue();\r\n                } else {\r\n                    value = lexer.decimalValue(lexer.isEnabled(Feature.UseBigDecimal));\r\n                }\r\n                object.put(key, value);\r\n            } else if (ch == '[') {\r\n                // 减少嵌套，兼容android\r\n                lexer.nextToken();\r\n                JSONArray list = new JSONArray();\r\n                final boolean parentIsArray = fieldName != null && fieldName.getClass() == Integer.class;\r\n                if (!parentIsArray) {\r\n                    this.setContext(context);\r\n                }\r\n                this.parseArray(list, key);\r\n                if (lexer.isEnabled(Feature.UseObjectArray)) {\r\n                    value = list.toArray();\r\n                } else {\r\n                    value = list;\r\n                }\r\n                object.put(key, value);\r\n                if (lexer.token() == JSONToken.RBRACE) {\r\n                    lexer.nextToken();\r\n                    return object;\r\n                } else if (lexer.token() == JSONToken.COMMA) {\r\n                    continue;\r\n                } else {\r\n                    throw new JSONException(\"syntax error\");\r\n                }\r\n            } else if (ch == '{') {\r\n                // 减少嵌套，兼容android\r\n                lexer.nextToken();\r\n                final boolean parentIsArray = fieldName != null && fieldName.getClass() == Integer.class;\r\n                JSONObject input = new JSONObject(lexer.isEnabled(Feature.OrderedField));\r\n                ParseContext ctxLocal = null;\r\n                if (!parentIsArray) {\r\n                    ctxLocal = setContext(context, input, key);\r\n                }\r\n                Object obj = null;\r\n                boolean objParsed = false;\r\n                if (fieldTypeResolver != null) {\r\n                    String resolveFieldName = key != null ? key.toString() : null;\r\n                    Type fieldType = fieldTypeResolver.resolve(object, resolveFieldName);\r\n                    if (fieldType != null) {\r\n                        ObjectDeserializer fieldDeser = config.getDeserializer(fieldType);\r\n                        obj = fieldDeser.deserialze(this, fieldType, key);\r\n                        objParsed = true;\r\n                    }\r\n                }\r\n                if (!objParsed) {\r\n                    obj = this.parseObject(input, key);\r\n                }\r\n                if (ctxLocal != null && input != obj) {\r\n                    ctxLocal.object = object;\r\n                }\r\n                checkMapResolve(object, key.toString());\r\n                if (object.getClass() == JSONObject.class) {\r\n                    object.put(key.toString(), obj);\r\n                } else {\r\n                    object.put(key, obj);\r\n                }\r\n                if (parentIsArray) {\r\n                    // setContext(context, obj, key);\r\n                    setContext(obj, key);\r\n                }\r\n                if (lexer.token() == JSONToken.RBRACE) {\r\n                    lexer.nextToken();\r\n                    setContext(context);\r\n                    return object;\r\n                } else if (lexer.token() == JSONToken.COMMA) {\r\n                    if (parentIsArray) {\r\n                        this.popContext();\r\n                    }\r\n                    continue;\r\n                } else {\r\n                    throw new JSONException(\"syntax error, \" + lexer.tokenName());\r\n                }\r\n            } else {\r\n                lexer.nextToken();\r\n                value = parse();\r\n                if (object.getClass() == JSONObject.class) {\r\n                    key = key.toString();\r\n                }\r\n                object.put(key, value);\r\n                if (lexer.token() == JSONToken.RBRACE) {\r\n                    lexer.nextToken();\r\n                    return object;\r\n                } else if (lexer.token() == JSONToken.COMMA) {\r\n                    continue;\r\n                } else {\r\n                    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \" + key);\r\n                }\r\n            }\r\n            lexer.skipWhitespace();\r\n            ch = lexer.getCurrent();\r\n            if (ch == ',') {\r\n                lexer.next();\r\n                continue;\r\n            } else if (ch == '}') {\r\n                lexer.next();\r\n                lexer.resetStringPosition();\r\n                lexer.nextToken();\r\n                // this.setContext(object, fieldName);\r\n                this.setContext(value, key);\r\n                return object;\r\n            } else {\r\n                throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \" + key);\r\n            }\r\n        }\r\n    } finally {\r\n        this.setContext(context);\r\n    }\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(java.util.Map, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "getConfig", "return_type": "ParserConfig", "signature": "getConfig()", "body_content": "{\r\n    return config;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getConfig", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getConfig()", "qualified_return_type": "com.alibaba.fastjson.parser.ParserConfig"}
{"java_doc": "", "method_name": "setConfig", "return_type": "void", "signature": "setConfig(ParserConfig)", "body_content": "{\r\n    this.config = config;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.setConfig", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.setConfig(com.alibaba.fastjson.parser.ParserConfig)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(Class)", "body_content": "{\r\n    return (T) parseObject(clazz, null);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(java.lang.Class<T>)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(Type)", "body_content": "{\r\n    return parseObject(type, null);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(java.lang.reflect.Type)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseObject", "return_type": "T", "signature": "parseObject(Type, Object)", "body_content": "{\r\n    int token = lexer.token();\r\n    if (token == JSONToken.NULL) {\r\n        lexer.nextToken();\r\n        return null;\r\n    }\r\n    if (token == JSONToken.LITERAL_STRING) {\r\n        if (type == byte[].class) {\r\n            byte[] bytes = lexer.bytesValue();\r\n            lexer.nextToken();\r\n            return (T) bytes;\r\n        }\r\n        if (type == char[].class) {\r\n            String strVal = lexer.stringVal();\r\n            lexer.nextToken();\r\n            return (T) strVal.toCharArray();\r\n        }\r\n    }\r\n    ObjectDeserializer derializer = config.getDeserializer(type);\r\n    try {\r\n        return (T) derializer.deserialze(this, type, fieldName);\r\n    } catch (JSONException e) {\r\n        throw e;\r\n    } catch (Throwable e) {\r\n        throw new JSONException(e.getMessage(), e);\r\n    }\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseArray", "return_type": "List<T>", "signature": "parseArray(Class)", "body_content": "{\r\n    List<T> array = new ArrayList<T>();\r\n    parseArray(clazz, array);\r\n    return array;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray(java.lang.Class<T>)", "qualified_return_type": "java.util.List<T>"}
{"java_doc": "", "method_name": "parseArray", "return_type": "void", "signature": "parseArray(Class, Collection)", "body_content": "{\r\n    parseArray((Type) clazz, array);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray(java.lang.Class<?>, java.util.Collection)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "parseArray", "return_type": "void", "signature": "parseArray(Type, Collection)", "body_content": "{\r\n    parseArray(type, array, null);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray(java.lang.reflect.Type, java.util.Collection)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "parseArray", "return_type": "void", "signature": "parseArray(Type, Collection, Object)", "body_content": "{\r\n    if (lexer.token() == JSONToken.SET || lexer.token() == JSONToken.TREE_SET) {\r\n        lexer.nextToken();\r\n    }\r\n    if (lexer.token() != JSONToken.LBRACKET) {\r\n        throw new JSONException(\"exepct '[', but \" + JSONToken.name(lexer.token()) + \", \" + lexer.info());\r\n    }\r\n    ObjectDeserializer deserializer = null;\r\n    if (int.class == type) {\r\n        deserializer = IntegerCodec.instance;\r\n        lexer.nextToken(JSONToken.LITERAL_INT);\r\n    } else if (String.class == type) {\r\n        deserializer = StringCodec.instance;\r\n        lexer.nextToken(JSONToken.LITERAL_STRING);\r\n    } else {\r\n        deserializer = config.getDeserializer(type);\r\n        lexer.nextToken(deserializer.getFastMatchToken());\r\n    }\r\n    ParseContext context = this.context;\r\n    this.setContext(array, fieldName);\r\n    try {\r\n        for (int i = 0; ; ++i) {\r\n            if (lexer.isEnabled(Feature.AllowArbitraryCommas)) {\r\n                while (lexer.token() == JSONToken.COMMA) {\r\n                    lexer.nextToken();\r\n                    continue;\r\n                }\r\n            }\r\n            if (lexer.token() == JSONToken.RBRACKET) {\r\n                break;\r\n            }\r\n            if (int.class == type) {\r\n                Object val = IntegerCodec.instance.deserialze(this, null, null);\r\n                array.add(val);\r\n            } else if (String.class == type) {\r\n                String value;\r\n                if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                    value = lexer.stringVal();\r\n                    lexer.nextToken(JSONToken.COMMA);\r\n                } else {\r\n                    Object obj = this.parse();\r\n                    if (obj == null) {\r\n                        value = null;\r\n                    } else {\r\n                        value = obj.toString();\r\n                    }\r\n                }\r\n                array.add(value);\r\n            } else {\r\n                Object val;\r\n                if (lexer.token() == JSONToken.NULL) {\r\n                    lexer.nextToken();\r\n                    val = null;\r\n                } else {\r\n                    val = deserializer.deserialze(this, type, i);\r\n                }\r\n                array.add(val);\r\n                checkListResolve(array);\r\n            }\r\n            if (lexer.token() == JSONToken.COMMA) {\r\n                lexer.nextToken(deserializer.getFastMatchToken());\r\n                continue;\r\n            }\r\n        }\r\n    } finally {\r\n        this.setContext(context);\r\n    }\r\n    lexer.nextToken(JSONToken.COMMA);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray(java.lang.reflect.Type, java.util.Collection, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "parseArray", "return_type": "Object[]", "signature": "parseArray(Type[])", "body_content": "{\r\n    if (lexer.token() == JSONToken.NULL) {\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return null;\r\n    }\r\n    if (lexer.token() != JSONToken.LBRACKET) {\r\n        throw new JSONException(\"syntax error : \" + lexer.tokenName());\r\n    }\r\n    Object[] list = new Object[types.length];\r\n    if (types.length == 0) {\r\n        lexer.nextToken(JSONToken.RBRACKET);\r\n        if (lexer.token() != JSONToken.RBRACKET) {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return new Object[0];\r\n    }\r\n    lexer.nextToken(JSONToken.LITERAL_INT);\r\n    for (int i = 0; i < types.length; ++i) {\r\n        Object value;\r\n        if (lexer.token() == JSONToken.NULL) {\r\n            value = null;\r\n            lexer.nextToken(JSONToken.COMMA);\r\n        } else {\r\n            Type type = types[i];\r\n            if (type == int.class || type == Integer.class) {\r\n                if (lexer.token() == JSONToken.LITERAL_INT) {\r\n                    value = Integer.valueOf(lexer.intValue());\r\n                    lexer.nextToken(JSONToken.COMMA);\r\n                } else {\r\n                    value = this.parse();\r\n                    value = TypeUtils.cast(value, type, config);\r\n                }\r\n            } else if (type == String.class) {\r\n                if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                    value = lexer.stringVal();\r\n                    lexer.nextToken(JSONToken.COMMA);\r\n                } else {\r\n                    value = this.parse();\r\n                    value = TypeUtils.cast(value, type, config);\r\n                }\r\n            } else {\r\n                boolean isArray = false;\r\n                Class<?> componentType = null;\r\n                if (i == types.length - 1) {\r\n                    if (type instanceof Class) {\r\n                        Class<?> clazz = (Class<?>) type;\r\n                        isArray = clazz.isArray();\r\n                        componentType = clazz.getComponentType();\r\n                    }\r\n                }\r\n                // support varArgs\r\n                if (isArray && lexer.token() != JSONToken.LBRACKET) {\r\n                    List<Object> varList = new ArrayList<Object>();\r\n                    ObjectDeserializer derializer = config.getDeserializer(componentType);\r\n                    int fastMatch = derializer.getFastMatchToken();\r\n                    if (lexer.token() != JSONToken.RBRACKET) {\r\n                        for (; ; ) {\r\n                            Object item = derializer.deserialze(this, type, null);\r\n                            varList.add(item);\r\n                            if (lexer.token() == JSONToken.COMMA) {\r\n                                lexer.nextToken(fastMatch);\r\n                            } else if (lexer.token() == JSONToken.RBRACKET) {\r\n                                break;\r\n                            } else {\r\n                                throw new JSONException(\"syntax error :\" + JSONToken.name(lexer.token()));\r\n                            }\r\n                        }\r\n                    }\r\n                    value = TypeUtils.cast(varList, type, config);\r\n                } else {\r\n                    ObjectDeserializer derializer = config.getDeserializer(type);\r\n                    value = derializer.deserialze(this, type, null);\r\n                }\r\n            }\r\n        }\r\n        list[i] = value;\r\n        if (lexer.token() == JSONToken.RBRACKET) {\r\n            break;\r\n        }\r\n        if (lexer.token() != JSONToken.COMMA) {\r\n            throw new JSONException(\"syntax error :\" + JSONToken.name(lexer.token()));\r\n        }\r\n        if (i == types.length - 1) {\r\n            lexer.nextToken(JSONToken.RBRACKET);\r\n        } else {\r\n            lexer.nextToken(JSONToken.LITERAL_INT);\r\n        }\r\n    }\r\n    if (lexer.token() != JSONToken.RBRACKET) {\r\n        throw new JSONException(\"syntax error\");\r\n    }\r\n    lexer.nextToken(JSONToken.COMMA);\r\n    return list;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray(java.lang.reflect.Type[])", "qualified_return_type": "java.lang.Object[]"}
{"java_doc": "", "method_name": "parseObject", "return_type": "void", "signature": "parseObject(Object)", "body_content": "{\r\n    Class<?> clazz = object.getClass();\r\n    JavaBeanDeserializer beanDeser = null;\r\n    ObjectDeserializer deserizer = config.getDeserializer(clazz);\r\n    if (deserizer instanceof JavaBeanDeserializer) {\r\n        beanDeser = (JavaBeanDeserializer) deserizer;\r\n    }\r\n    if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\r\n        throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());\r\n    }\r\n    for (; ; ) {\r\n        // lexer.scanSymbol\r\n        String key = lexer.scanSymbol(symbolTable);\r\n        if (key == null) {\r\n            if (lexer.token() == JSONToken.RBRACE) {\r\n                lexer.nextToken(JSONToken.COMMA);\r\n                break;\r\n            }\r\n            if (lexer.token() == JSONToken.COMMA) {\r\n                if (lexer.isEnabled(Feature.AllowArbitraryCommas)) {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        FieldDeserializer fieldDeser = null;\r\n        if (beanDeser != null) {\r\n            fieldDeser = beanDeser.getFieldDeserializer(key);\r\n        }\r\n        if (fieldDeser == null) {\r\n            if (!lexer.isEnabled(Feature.IgnoreNotMatch)) {\r\n                throw new JSONException(\"setter not found, class \" + clazz.getName() + \", property \" + key);\r\n            }\r\n            lexer.nextTokenWithColon();\r\n            // skip\r\n            parse();\r\n            if (lexer.token() == JSONToken.RBRACE) {\r\n                lexer.nextToken();\r\n                return;\r\n            }\r\n            continue;\r\n        } else {\r\n            Class<?> fieldClass = fieldDeser.fieldInfo.fieldClass;\r\n            Type fieldType = fieldDeser.fieldInfo.fieldType;\r\n            Object fieldValue;\r\n            if (fieldClass == int.class) {\r\n                lexer.nextTokenWithColon(JSONToken.LITERAL_INT);\r\n                fieldValue = IntegerCodec.instance.deserialze(this, fieldType, null);\r\n            } else if (fieldClass == String.class) {\r\n                lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);\r\n                fieldValue = StringCodec.deserialze(this);\r\n            } else if (fieldClass == long.class) {\r\n                lexer.nextTokenWithColon(JSONToken.LITERAL_INT);\r\n                fieldValue = LongCodec.instance.deserialze(this, fieldType, null);\r\n            } else {\r\n                ObjectDeserializer fieldValueDeserializer = config.getDeserializer(fieldClass, fieldType);\r\n                lexer.nextTokenWithColon(fieldValueDeserializer.getFastMatchToken());\r\n                fieldValue = fieldValueDeserializer.deserialze(this, fieldType, null);\r\n            }\r\n            fieldDeser.setValue(object, fieldValue);\r\n        }\r\n        if (lexer.token() == JSONToken.COMMA) {\r\n            continue;\r\n        }\r\n        if (lexer.token() == JSONToken.RBRACE) {\r\n            lexer.nextToken(JSONToken.COMMA);\r\n            return;\r\n        }\r\n    }\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "parseArrayWithType", "return_type": "Object", "signature": "parseArrayWithType(Type)", "body_content": "{\r\n    if (lexer.token() == JSONToken.NULL) {\r\n        lexer.nextToken();\r\n        return null;\r\n    }\r\n    Type[] actualTypes = ((ParameterizedType) collectionType).getActualTypeArguments();\r\n    if (actualTypes.length != 1) {\r\n        throw new JSONException(\"not support type \" + collectionType);\r\n    }\r\n    Type actualTypeArgument = actualTypes[0];\r\n    if (actualTypeArgument instanceof Class) {\r\n        List<Object> array = new ArrayList<Object>();\r\n        this.parseArray((Class<?>) actualTypeArgument, array);\r\n        return array;\r\n    }\r\n    if (actualTypeArgument instanceof WildcardType) {\r\n        WildcardType wildcardType = (WildcardType) actualTypeArgument;\r\n        // assert wildcardType.getUpperBounds().length == 1;\r\n        Type upperBoundType = wildcardType.getUpperBounds()[0];\r\n        // assert upperBoundType instanceof Class;\r\n        if (Object.class.equals(upperBoundType)) {\r\n            if (wildcardType.getLowerBounds().length == 0) {\r\n                // Collection<?>\r\n                return parse();\r\n            } else {\r\n                throw new JSONException(\"not support type : \" + collectionType);\r\n            }\r\n        }\r\n        List<Object> array = new ArrayList<Object>();\r\n        this.parseArray((Class<?>) upperBoundType, array);\r\n        return array;\r\n        // throw new JSONException(\"not support type : \" +\r\n        // collectionType);return parse();\r\n    }\r\n    if (actualTypeArgument instanceof TypeVariable) {\r\n        TypeVariable<?> typeVariable = (TypeVariable<?>) actualTypeArgument;\r\n        Type[] bounds = typeVariable.getBounds();\r\n        if (bounds.length != 1) {\r\n            throw new JSONException(\"not support : \" + typeVariable);\r\n        }\r\n        Type boundType = bounds[0];\r\n        if (boundType instanceof Class) {\r\n            List<Object> array = new ArrayList<Object>();\r\n            this.parseArray((Class<?>) boundType, array);\r\n            return array;\r\n        }\r\n    }\r\n    if (actualTypeArgument instanceof ParameterizedType) {\r\n        ParameterizedType parameterizedType = (ParameterizedType) actualTypeArgument;\r\n        List<Object> array = new ArrayList<Object>();\r\n        this.parseArray(parameterizedType, array);\r\n        return array;\r\n    }\r\n    throw new JSONException(\"TODO : \" + collectionType);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArrayWithType", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArrayWithType(java.lang.reflect.Type)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "acceptType", "return_type": "void", "signature": "acceptType(String)", "body_content": "{\r\n    JSONLexer lexer = this.lexer;\r\n    lexer.nextTokenWithColon();\r\n    if (lexer.token() != JSONToken.LITERAL_STRING) {\r\n        throw new JSONException(\"type not match error\");\r\n    }\r\n    if (typeName.equals(lexer.stringVal())) {\r\n        lexer.nextToken();\r\n        if (lexer.token() == JSONToken.COMMA) {\r\n            lexer.nextToken();\r\n        }\r\n    } else {\r\n        throw new JSONException(\"type not match error\");\r\n    }\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.acceptType", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.acceptType(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getResolveStatus", "return_type": "int", "signature": "getResolveStatus()", "body_content": "{\r\n    return resolveStatus;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getResolveStatus", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getResolveStatus()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "setResolveStatus", "return_type": "void", "signature": "setResolveStatus(int)", "body_content": "{\r\n    this.resolveStatus = resolveStatus;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.setResolveStatus", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.setResolveStatus(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getObject", "return_type": "Object", "signature": "getObject(String)", "body_content": "{\r\n    for (int i = 0; i < contextArrayIndex; ++i) {\r\n        if (path.equals(contextArray[i].toString())) {\r\n            return contextArray[i].object;\r\n        }\r\n    }\r\n    return null;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getObject", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getObject(java.lang.String)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "checkListResolve", "return_type": "void", "signature": "checkListResolve(Collection)", "body_content": "{\r\n    if (resolveStatus == NeedToResolve) {\r\n        if (array instanceof List) {\r\n            final int index = array.size() - 1;\r\n            final List list = (List) array;\r\n            ResolveTask task = getLastResolveTask();\r\n            task.fieldDeserializer = new ResolveFieldDeserializer(this, list, index);\r\n            task.ownerContext = context;\r\n            setResolveStatus(DefaultJSONParser.NONE);\r\n        } else {\r\n            ResolveTask task = getLastResolveTask();\r\n            task.fieldDeserializer = new ResolveFieldDeserializer(array);\r\n            task.ownerContext = context;\r\n            setResolveStatus(DefaultJSONParser.NONE);\r\n        }\r\n    }\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.checkListResolve", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.checkListResolve(java.util.Collection)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "checkMapResolve", "return_type": "void", "signature": "checkMapResolve(Map, Object)", "body_content": "{\r\n    if (resolveStatus == NeedToResolve) {\r\n        ResolveFieldDeserializer fieldResolver = new ResolveFieldDeserializer(object, fieldName);\r\n        ResolveTask task = getLastResolveTask();\r\n        task.fieldDeserializer = fieldResolver;\r\n        task.ownerContext = context;\r\n        setResolveStatus(DefaultJSONParser.NONE);\r\n    }\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.checkMapResolve", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.checkMapResolve(java.util.Map, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "parseObject", "return_type": "Object", "signature": "parseObject(Map)", "body_content": "{\r\n    return parseObject(object, null);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(java.util.Map)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "parseObject", "return_type": "JSONObject", "signature": "parseObject()", "body_content": "{\r\n    JSONObject object = new JSONObject(lexer.isEnabled(Feature.OrderedField));\r\n    object = (JSONObject) parseObject(object);\r\n    return object;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseObject()", "qualified_return_type": "com.alibaba.fastjson.JSONObject"}
{"java_doc": "", "method_name": "parseArray", "return_type": "void", "signature": "parseArray(Collection)", "body_content": "{\r\n    parseArray(array, null);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray(java.util.Collection)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "parseArray", "return_type": "void", "signature": "parseArray(Collection, Object)", "body_content": "{\r\n    final JSONLexer lexer = this.lexer;\r\n    if (lexer.token() == JSONToken.SET || lexer.token() == JSONToken.TREE_SET) {\r\n        lexer.nextToken();\r\n    }\r\n    if (lexer.token() != JSONToken.LBRACKET) {\r\n        throw new JSONException(\"syntax error, expect [, actual \" + JSONToken.name(lexer.token()) + \", pos \" + lexer.pos());\r\n    }\r\n    lexer.nextToken(JSONToken.LITERAL_STRING);\r\n    ParseContext context = this.context;\r\n    this.setContext(array, fieldName);\r\n    try {\r\n        for (int i = 0; ; ++i) {\r\n            if (lexer.isEnabled(Feature.AllowArbitraryCommas)) {\r\n                while (lexer.token() == JSONToken.COMMA) {\r\n                    lexer.nextToken();\r\n                    continue;\r\n                }\r\n            }\r\n            Object value;\r\n            switch(lexer.token()) {\r\n                case LITERAL_INT:\r\n                    value = lexer.integerValue();\r\n                    lexer.nextToken(JSONToken.COMMA);\r\n                    break;\r\n                case LITERAL_FLOAT:\r\n                    if (lexer.isEnabled(Feature.UseBigDecimal)) {\r\n                        value = lexer.decimalValue(true);\r\n                    } else {\r\n                        value = lexer.decimalValue(false);\r\n                    }\r\n                    lexer.nextToken(JSONToken.COMMA);\r\n                    break;\r\n                case LITERAL_STRING:\r\n                    String stringLiteral = lexer.stringVal();\r\n                    lexer.nextToken(JSONToken.COMMA);\r\n                    if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\r\n                        JSONScanner iso8601Lexer = new JSONScanner(stringLiteral);\r\n                        if (iso8601Lexer.scanISO8601DateIfMatch()) {\r\n                            value = iso8601Lexer.getCalendar().getTime();\r\n                        } else {\r\n                            value = stringLiteral;\r\n                        }\r\n                        iso8601Lexer.close();\r\n                    } else {\r\n                        value = stringLiteral;\r\n                    }\r\n                    break;\r\n                case TRUE:\r\n                    value = Boolean.TRUE;\r\n                    lexer.nextToken(JSONToken.COMMA);\r\n                    break;\r\n                case FALSE:\r\n                    value = Boolean.FALSE;\r\n                    lexer.nextToken(JSONToken.COMMA);\r\n                    break;\r\n                case LBRACE:\r\n                    JSONObject object = new JSONObject(lexer.isEnabled(Feature.OrderedField));\r\n                    value = parseObject(object, i);\r\n                    break;\r\n                case LBRACKET:\r\n                    Collection items = new JSONArray();\r\n                    parseArray(items, i);\r\n                    if (lexer.isEnabled(Feature.UseObjectArray)) {\r\n                        value = items.toArray();\r\n                    } else {\r\n                        value = items;\r\n                    }\r\n                    break;\r\n                case NULL:\r\n                    value = null;\r\n                    lexer.nextToken(JSONToken.LITERAL_STRING);\r\n                    break;\r\n                case UNDEFINED:\r\n                    value = null;\r\n                    lexer.nextToken(JSONToken.LITERAL_STRING);\r\n                    break;\r\n                case RBRACKET:\r\n                    lexer.nextToken(JSONToken.COMMA);\r\n                    return;\r\n                case EOF:\r\n                    throw new JSONException(\"unclosed jsonArray\");\r\n                default:\r\n                    value = parse();\r\n                    break;\r\n            }\r\n            array.add(value);\r\n            checkListResolve(array);\r\n            if (lexer.token() == JSONToken.COMMA) {\r\n                lexer.nextToken(JSONToken.LITERAL_STRING);\r\n                continue;\r\n            }\r\n        }\r\n    } finally {\r\n        this.setContext(context);\r\n    }\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseArray(java.util.Collection, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getContext", "return_type": "ParseContext", "signature": "getContext()", "body_content": "{\r\n    return context;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getContext", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getContext()", "qualified_return_type": "com.alibaba.fastjson.parser.ParseContext"}
{"java_doc": "", "method_name": "getResolveTaskList", "return_type": "List<ResolveTask>", "signature": "getResolveTaskList()", "body_content": "{\r\n    if (resolveTaskList == null) {\r\n        resolveTaskList = new ArrayList<ResolveTask>(2);\r\n    }\r\n    return resolveTaskList;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getResolveTaskList", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getResolveTaskList()", "qualified_return_type": "java.util.List<com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask>"}
{"java_doc": "", "method_name": "addResolveTask", "return_type": "void", "signature": "addResolveTask(ResolveTask)", "body_content": "{\r\n    if (resolveTaskList == null) {\r\n        resolveTaskList = new ArrayList<ResolveTask>(2);\r\n    }\r\n    resolveTaskList.add(task);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.addResolveTask", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.addResolveTask(com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getLastResolveTask", "return_type": "ResolveTask", "signature": "getLastResolveTask()", "body_content": "{\r\n    return resolveTaskList.get(resolveTaskList.size() - 1);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getLastResolveTask", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getLastResolveTask()", "qualified_return_type": "com.alibaba.fastjson.parser.DefaultJSONParser.ResolveTask"}
{"java_doc": "", "method_name": "getExtraProcessors", "return_type": "List<ExtraProcessor>", "signature": "getExtraProcessors()", "body_content": "{\r\n    if (extraProcessors == null) {\r\n        extraProcessors = new ArrayList<ExtraProcessor>(2);\r\n    }\r\n    return extraProcessors;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getExtraProcessors", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getExtraProcessors()", "qualified_return_type": "java.util.List<com.alibaba.fastjson.parser.deserializer.ExtraProcessor>"}
{"java_doc": "", "method_name": "getExtraTypeProviders", "return_type": "List<ExtraTypeProvider>", "signature": "getExtraTypeProviders()", "body_content": "{\r\n    if (extraTypeProviders == null) {\r\n        extraTypeProviders = new ArrayList<ExtraTypeProvider>(2);\r\n    }\r\n    return extraTypeProviders;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getExtraTypeProviders", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getExtraTypeProviders()", "qualified_return_type": "java.util.List<com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider>"}
{"java_doc": "", "method_name": "getFieldTypeResolver", "return_type": "FieldTypeResolver", "signature": "getFieldTypeResolver()", "body_content": "{\r\n    return fieldTypeResolver;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getFieldTypeResolver", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getFieldTypeResolver()", "qualified_return_type": "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver"}
{"java_doc": "", "method_name": "setFieldTypeResolver", "return_type": "void", "signature": "setFieldTypeResolver(FieldTypeResolver)", "body_content": "{\r\n    this.fieldTypeResolver = fieldTypeResolver;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.setFieldTypeResolver", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.setFieldTypeResolver(com.alibaba.fastjson.parser.deserializer.FieldTypeResolver)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setContext", "return_type": "void", "signature": "setContext(ParseContext)", "body_content": "{\r\n    if (lexer.isEnabled(Feature.DisableCircularReferenceDetect)) {\r\n        return;\r\n    }\r\n    this.context = context;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.setContext", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.setContext(com.alibaba.fastjson.parser.ParseContext)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "popContext", "return_type": "void", "signature": "popContext()", "body_content": "{\r\n    if (lexer.isEnabled(Feature.DisableCircularReferenceDetect)) {\r\n        return;\r\n    }\r\n    this.context = this.context.parent;\r\n    contextArray[contextArrayIndex - 1] = null;\r\n    contextArrayIndex--;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.popContext", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.popContext()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setContext", "return_type": "ParseContext", "signature": "setContext(Object, Object)", "body_content": "{\r\n    if (lexer.isEnabled(Feature.DisableCircularReferenceDetect)) {\r\n        return null;\r\n    }\r\n    return setContext(this.context, object, fieldName);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.setContext", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.setContext(java.lang.Object, java.lang.Object)", "qualified_return_type": "com.alibaba.fastjson.parser.ParseContext"}
{"java_doc": "", "method_name": "setContext", "return_type": "ParseContext", "signature": "setContext(ParseContext, Object, Object)", "body_content": "{\r\n    if (lexer.isEnabled(Feature.DisableCircularReferenceDetect)) {\r\n        return null;\r\n    }\r\n    this.context = new ParseContext(parent, object, fieldName);\r\n    addContext(this.context);\r\n    return this.context;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.setContext", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.setContext(com.alibaba.fastjson.parser.ParseContext, java.lang.Object, java.lang.Object)", "qualified_return_type": "com.alibaba.fastjson.parser.ParseContext"}
{"java_doc": "", "method_name": "addContext", "return_type": "void", "signature": "addContext(ParseContext)", "body_content": "{\r\n    int i = contextArrayIndex++;\r\n    if (contextArray == null) {\r\n        contextArray = new ParseContext[8];\r\n    } else if (i >= contextArray.length) {\r\n        int newLen = (contextArray.length * 3) / 2;\r\n        ParseContext[] newArray = new ParseContext[newLen];\r\n        System.arraycopy(contextArray, 0, newArray, 0, contextArray.length);\r\n        contextArray = newArray;\r\n    }\r\n    contextArray[i] = context;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.addContext", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.addContext(com.alibaba.fastjson.parser.ParseContext)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "parse", "return_type": "Object", "signature": "parse()", "body_content": "{\r\n    return parse(null);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parse", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parse()", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "parseKey", "return_type": "Object", "signature": "parseKey()", "body_content": "{\r\n    if (lexer.token() == JSONToken.IDENTIFIER) {\r\n        String value = lexer.stringVal();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return value;\r\n    }\r\n    return parse(null);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseKey", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseKey()", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "parse", "return_type": "Object", "signature": "parse(Object)", "body_content": "{\r\n    final JSONLexer lexer = this.lexer;\r\n    switch(lexer.token()) {\r\n        case SET:\r\n            lexer.nextToken();\r\n            HashSet<Object> set = new HashSet<Object>();\r\n            parseArray(set, fieldName);\r\n            return set;\r\n        case TREE_SET:\r\n            lexer.nextToken();\r\n            TreeSet<Object> treeSet = new TreeSet<Object>();\r\n            parseArray(treeSet, fieldName);\r\n            return treeSet;\r\n        case LBRACKET:\r\n            JSONArray array = new JSONArray();\r\n            parseArray(array, fieldName);\r\n            if (lexer.isEnabled(Feature.UseObjectArray)) {\r\n                return array.toArray();\r\n            }\r\n            return array;\r\n        case LBRACE:\r\n            JSONObject object = new JSONObject(lexer.isEnabled(Feature.OrderedField));\r\n            return parseObject(object, fieldName);\r\n        case LITERAL_INT:\r\n            Number intValue = lexer.integerValue();\r\n            lexer.nextToken();\r\n            return intValue;\r\n        case LITERAL_FLOAT:\r\n            Object value = lexer.decimalValue(lexer.isEnabled(Feature.UseBigDecimal));\r\n            lexer.nextToken();\r\n            return value;\r\n        case LITERAL_STRING:\r\n            String stringLiteral = lexer.stringVal();\r\n            lexer.nextToken(JSONToken.COMMA);\r\n            if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\r\n                JSONScanner iso8601Lexer = new JSONScanner(stringLiteral);\r\n                try {\r\n                    if (iso8601Lexer.scanISO8601DateIfMatch()) {\r\n                        return iso8601Lexer.getCalendar().getTime();\r\n                    }\r\n                } finally {\r\n                    iso8601Lexer.close();\r\n                }\r\n            }\r\n            return stringLiteral;\r\n        case NULL:\r\n            lexer.nextToken();\r\n            return null;\r\n        case UNDEFINED:\r\n            lexer.nextToken();\r\n            return null;\r\n        case TRUE:\r\n            lexer.nextToken();\r\n            return Boolean.TRUE;\r\n        case FALSE:\r\n            lexer.nextToken();\r\n            return Boolean.FALSE;\r\n        case NEW:\r\n            lexer.nextToken(JSONToken.IDENTIFIER);\r\n            if (lexer.token() != JSONToken.IDENTIFIER) {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n            lexer.nextToken(JSONToken.LPAREN);\r\n            accept(JSONToken.LPAREN);\r\n            long time = ((Number) lexer.integerValue()).longValue();\r\n            accept(JSONToken.LITERAL_INT);\r\n            accept(JSONToken.RPAREN);\r\n            return new Date(time);\r\n        case EOF:\r\n            if (lexer.isBlankInput()) {\r\n                return null;\r\n            }\r\n            throw new JSONException(\"unterminated json string, \" + lexer.info());\r\n        case ERROR:\r\n        default:\r\n            throw new JSONException(\"syntax error, \" + lexer.info());\r\n    }\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parse", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parse(java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "config", "return_type": "void", "signature": "config(Feature, boolean)", "body_content": "{\r\n    this.lexer.config(feature, state);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.config", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.config(com.alibaba.fastjson.parser.Feature, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "isEnabled", "return_type": "boolean", "signature": "isEnabled(Feature)", "body_content": "{\r\n    return lexer.isEnabled(feature);\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.isEnabled", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.isEnabled(com.alibaba.fastjson.parser.Feature)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getLexer", "return_type": "JSONLexer", "signature": "getLexer()", "body_content": "{\r\n    return lexer;\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.getLexer", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.getLexer()", "qualified_return_type": "com.alibaba.fastjson.parser.JSONLexer"}
{"java_doc": "", "method_name": "accept", "return_type": "void", "signature": "accept(int)", "body_content": "{\r\n    final JSONLexer lexer = this.lexer;\r\n    if (lexer.token() == token) {\r\n        lexer.nextToken();\r\n    } else {\r\n        throw new JSONException(\"syntax error, expect \" + JSONToken.name(token) + \", actual \" + JSONToken.name(lexer.token()));\r\n    }\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.accept", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.accept(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "accept", "return_type": "void", "signature": "accept(int, int)", "body_content": "{\r\n    final JSONLexer lexer = this.lexer;\r\n    if (lexer.token() == token) {\r\n        lexer.nextToken(nextExpectToken);\r\n    } else {\r\n        throwException(token);\r\n    }\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.accept", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.accept(int, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "throwException", "return_type": "void", "signature": "throwException(int)", "body_content": "{\r\n    throw new JSONException(\"syntax error, expect \" + JSONToken.name(token) + \", actual \" + JSONToken.name(lexer.token()));\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.throwException", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.throwException(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "close", "return_type": "void", "signature": "close()", "body_content": "{\r\n    final JSONLexer lexer = this.lexer;\r\n    try {\r\n        if (lexer.isEnabled(Feature.AutoCloseSource)) {\r\n            if (lexer.token() != JSONToken.EOF) {\r\n                throw new JSONException(\"not close json text, token : \" + JSONToken.name(lexer.token()));\r\n            }\r\n        }\r\n    } finally {\r\n        lexer.close();\r\n    }\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.close", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.close()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "handleResovleTask", "return_type": "void", "signature": "handleResovleTask(Object)", "body_content": "{\r\n    if (resolveTaskList == null) {\r\n        return;\r\n    }\r\n    for (int i = 0, size = resolveTaskList.size(); i < size; ++i) {\r\n        ResolveTask task = resolveTaskList.get(i);\r\n        String ref = task.referenceValue;\r\n        Object object = null;\r\n        if (task.ownerContext != null) {\r\n            object = task.ownerContext.object;\r\n        }\r\n        Object refValue = ref.startsWith(\"$\") ? getObject(ref) : task.context.object;\r\n        FieldDeserializer fieldDeser = task.fieldDeserializer;\r\n        if (fieldDeser != null) {\r\n            fieldDeser.setValue(object, refValue);\r\n        }\r\n    }\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.handleResovleTask", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.handleResovleTask(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "parseExtra", "return_type": "void", "signature": "parseExtra(Object, String)", "body_content": "{\r\n    // xxx\r\n    final JSONLexer lexer = this.lexer;\r\n    lexer.nextTokenWithColon();\r\n    Type type = null;\r\n    if (extraTypeProviders != null) {\r\n        for (ExtraTypeProvider extraProvider : extraTypeProviders) {\r\n            type = extraProvider.getExtraType(object, key);\r\n        }\r\n    }\r\n    Object value = // \r\n    type == null ? // skip\r\n    parse() : parseObject(type);\r\n    if (object instanceof ExtraProcessable) {\r\n        ExtraProcessable extraProcessable = ((ExtraProcessable) object);\r\n        extraProcessable.processExtra(key, value);\r\n        return;\r\n    }\r\n    if (extraProcessors != null) {\r\n        for (ExtraProcessor process : extraProcessors) {\r\n            process.processExtra(object, key, value);\r\n        }\r\n    }\r\n}", "class_name": "DefaultJSONParser", "qualified_method_name": "com.alibaba.fastjson.parser.DefaultJSONParser.parseExtra", "qualified_signature": "com.alibaba.fastjson.parser.DefaultJSONParser.parseExtra(java.lang.Object, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    JSONSerializable jsonSerializable = ((JSONSerializable) object);\r\n    jsonSerializable.write(serializer, fieldName, fieldType, 0);\r\n}", "class_name": "JSONSerializableSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.JSONSerializableSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.JSONSerializableSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    final JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.LITERAL_INT) {\r\n        if (clazz == double.class || clazz == Double.class) {\r\n            String val = lexer.numberString();\r\n            lexer.nextToken(JSONToken.COMMA);\r\n            return (T) Double.valueOf(Double.parseDouble(val));\r\n        }\r\n        long val = lexer.longValue();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        if (clazz == short.class || clazz == Short.class) {\r\n            if (val > Short.MAX_VALUE || val < Short.MIN_VALUE) {\r\n                throw new JSONException(\"short overflow : \" + val);\r\n            }\r\n            return (T) Short.valueOf((short) val);\r\n        }\r\n        if (clazz == byte.class || clazz == Byte.class) {\r\n            if (val > Byte.MAX_VALUE || val < Byte.MIN_VALUE) {\r\n                throw new JSONException(\"short overflow : \" + val);\r\n            }\r\n            return (T) Byte.valueOf((byte) val);\r\n        }\r\n        if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\r\n            return (T) Integer.valueOf((int) val);\r\n        }\r\n        return (T) Long.valueOf(val);\r\n    }\r\n    if (lexer.token() == JSONToken.LITERAL_FLOAT) {\r\n        if (clazz == double.class || clazz == Double.class) {\r\n            String val = lexer.numberString();\r\n            lexer.nextToken(JSONToken.COMMA);\r\n            return (T) Double.valueOf(Double.parseDouble(val));\r\n        }\r\n        BigDecimal val = lexer.decimalValue();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        if (clazz == short.class || clazz == Short.class) {\r\n            return (T) Short.valueOf(val.shortValue());\r\n        }\r\n        if (clazz == byte.class || clazz == Byte.class) {\r\n            return (T) Byte.valueOf(val.byteValue());\r\n        }\r\n        return (T) val;\r\n    }\r\n    Object value = parser.parse();\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (clazz == double.class || clazz == Double.class) {\r\n        return (T) TypeUtils.castToDouble(value);\r\n    }\r\n    if (clazz == short.class || clazz == Short.class) {\r\n        return (T) TypeUtils.castToShort(value);\r\n    }\r\n    if (clazz == byte.class || clazz == Byte.class) {\r\n        return (T) TypeUtils.castToByte(value);\r\n    }\r\n    return (T) TypeUtils.castToBigDecimal(value);\r\n}", "class_name": "NumberDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.NumberDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.NumberDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_INT;\r\n}", "class_name": "NumberDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.NumberDeserializer.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.NumberDeserializer.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "visit", "return_type": "void", "signature": "visit(int, int, String, String, String[])", "body_content": "{\r\n    this.version = version;\r\n    this.access = access;\r\n    this.name = newClassItem(name).index;\r\n    thisName = name;\r\n    this.superName = superName == null ? 0 : newClassItem(superName).index;\r\n    if (interfaces != null && interfaces.length > 0) {\r\n        interfaceCount = interfaces.length;\r\n        this.interfaces = new int[interfaceCount];\r\n        for (int i = 0; i < interfaceCount; ++i) {\r\n            this.interfaces[i] = newClassItem(interfaces[i]).index;\r\n        }\r\n    }\r\n}", "class_name": "ClassWriter", "qualified_method_name": "com.alibaba.fastjson.asm.ClassWriter.visit", "qualified_signature": "com.alibaba.fastjson.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String[])", "qualified_return_type": "void"}
{"java_doc": "Returns the bytecode of the class that was build with this class writer.\r\n\r\n@return the bytecode of the class that was build with this class writer.\r\n", "method_name": "toByteArray", "return_type": "byte[]", "signature": "toByteArray()", "body_content": "{\r\n    // computes the real size of the bytecode of this class\r\n    int size = 24 + 2 * interfaceCount;\r\n    int nbFields = 0;\r\n    FieldWriter fb = firstField;\r\n    while (fb != null) {\r\n        ++nbFields;\r\n        size += fb.getSize();\r\n        fb = fb.next;\r\n    }\r\n    int nbMethods = 0;\r\n    MethodWriter mb = firstMethod;\r\n    while (mb != null) {\r\n        ++nbMethods;\r\n        size += mb.getSize();\r\n        mb = mb.next;\r\n    }\r\n    int attributeCount = 0;\r\n    size += pool.length;\r\n    // allocates a byte vector of this size, in order to avoid unnecessary\r\n    // arraycopy operations in the ByteVector.enlarge() method\r\n    ByteVector out = new ByteVector(size);\r\n    out.putInt(0xCAFEBABE).putInt(version);\r\n    out.putShort(index).putByteArray(pool.data, 0, pool.length);\r\n    // Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / (ClassWriter.ACC_SYNTHETIC_ATTRIBUTE / Opcodes.ACC_SYNTHETIC));\r\n    int mask = 393216;\r\n    out.putShort(access & ~mask).putShort(name).putShort(superName);\r\n    out.putShort(interfaceCount);\r\n    for (int i = 0; i < interfaceCount; ++i) {\r\n        out.putShort(interfaces[i]);\r\n    }\r\n    out.putShort(nbFields);\r\n    fb = firstField;\r\n    while (fb != null) {\r\n        fb.put(out);\r\n        fb = fb.next;\r\n    }\r\n    out.putShort(nbMethods);\r\n    mb = firstMethod;\r\n    while (mb != null) {\r\n        mb.put(out);\r\n        mb = mb.next;\r\n    }\r\n    out.putShort(attributeCount);\r\n    return out.data;\r\n}", "class_name": "ClassWriter", "qualified_method_name": "com.alibaba.fastjson.asm.ClassWriter.toByteArray", "qualified_signature": "com.alibaba.fastjson.asm.ClassWriter.toByteArray()", "qualified_return_type": "byte[]"}
{"java_doc": "Adds a number or string constant to the constant pool of the class being build. Does nothing if the constant pool\r\nalready contains a similar item.\r\n\r\n@param cst the value of the constant to be added to the constant pool. This parameter must be an {@link Integer},\r\na {@link Float}, a {@link Long}, a {@link Double}, a {@link String} or a {@link Type}.\r\n@return a new or already existing constant item with the given value.\r\n", "method_name": "newConstItem", "return_type": "Item", "signature": "newConstItem(Object)", "body_content": "{\r\n    if (cst instanceof Integer) {\r\n        int val = ((Integer) cst).intValue();\r\n        // return newInteger(val);\r\n        key.set(val);\r\n        Item result = get(key);\r\n        if (result == null) {\r\n            pool.putByte(3).putInt(val);\r\n            result = new Item(index++, key);\r\n            put(result);\r\n        }\r\n        return result;\r\n    } else if (cst instanceof String) {\r\n        return newString((String) cst);\r\n    } else if (cst instanceof Type) {\r\n        Type t = (Type) cst;\r\n        return newClassItem(t.sort == 10 ? /*Type.OBJECT*/\r\n        t.getInternalName() : t.getDescriptor());\r\n    } else {\r\n        throw new IllegalArgumentException(\"value \" + cst);\r\n    }\r\n}", "class_name": "ClassWriter", "qualified_method_name": "com.alibaba.fastjson.asm.ClassWriter.newConstItem", "qualified_signature": "com.alibaba.fastjson.asm.ClassWriter.newConstItem(java.lang.Object)", "qualified_return_type": "com.alibaba.fastjson.asm.Item"}
{"java_doc": "", "method_name": "newUTF8", "return_type": "int", "signature": "newUTF8(String)", "body_content": "{\r\n    key.set(1, /* UTF8 */\r\n    value, null, null);\r\n    Item result = get(key);\r\n    if (result == null) {\r\n        pool.putByte(1).putUTF8(value);\r\n        result = new Item(index++, key);\r\n        put(result);\r\n    }\r\n    return result.index;\r\n}", "class_name": "ClassWriter", "qualified_method_name": "com.alibaba.fastjson.asm.ClassWriter.newUTF8", "qualified_signature": "com.alibaba.fastjson.asm.ClassWriter.newUTF8(java.lang.String)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "newClassItem", "return_type": "Item", "signature": "newClassItem(String)", "body_content": "{\r\n    key2.set(7, /* CLASS */\r\n    value, null, null);\r\n    Item result = get(key2);\r\n    if (result == null) {\r\n        pool.put12(7, /* CLASS */\r\n        newUTF8(value));\r\n        result = new Item(index++, key2);\r\n        put(result);\r\n    }\r\n    return result;\r\n}", "class_name": "ClassWriter", "qualified_method_name": "com.alibaba.fastjson.asm.ClassWriter.newClassItem", "qualified_signature": "com.alibaba.fastjson.asm.ClassWriter.newClassItem(java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.asm.Item"}
{"java_doc": "Adds a field reference to the constant pool of the class being build. Does nothing if the constant pool already\r\ncontains a similar item.\r\n\r\n@param owner the internal name of the field's owner class.\r\n@param name the field's name.\r\n@param desc the field's descriptor.\r\n@return a new or already existing field reference item.\r\n", "method_name": "newFieldItem", "return_type": "Item", "signature": "newFieldItem(String, String, String)", "body_content": "{\r\n    key3.set(9, /* FIELD */\r\n    owner, name, desc);\r\n    Item result = get(key3);\r\n    if (result == null) {\r\n        // put122(9 /* FIELD */, newClassItem(owner).index, newNameTypeItem(name, desc).index);\r\n        int s1 = newClassItem(owner).index, s2 = newNameTypeItem(name, desc).index;\r\n        pool.put12(9, /* FIELD */\r\n        s1).putShort(s2);\r\n        result = new Item(index++, key3);\r\n        put(result);\r\n    }\r\n    return result;\r\n}", "class_name": "ClassWriter", "qualified_method_name": "com.alibaba.fastjson.asm.ClassWriter.newFieldItem", "qualified_signature": "com.alibaba.fastjson.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.asm.Item"}
{"java_doc": "Adds a method reference to the constant pool of the class being build. Does nothing if the constant pool already\r\ncontains a similar item.\r\n\r\n@param owner the internal name of the method's owner class.\r\n@param name the method's name.\r\n@param desc the method's descriptor.\r\n@param itf <tt>true</tt> if <tt>owner</tt> is an interface.\r\n@return a new or already existing method reference item.\r\n", "method_name": "newMethodItem", "return_type": "Item", "signature": "newMethodItem(String, String, String, boolean)", "body_content": "{\r\n    int type = itf ? 11 : /* IMETH */\r\n    10;\r\n    key3.set(type, owner, name, desc);\r\n    Item result = get(key3);\r\n    if (result == null) {\r\n        // put122(type, newClassItem(owner).index, newNameTypeItem(name, desc).index);\r\n        int s1 = newClassItem(owner).index, s2 = newNameTypeItem(name, desc).index;\r\n        pool.put12(type, s1).putShort(s2);\r\n        result = new Item(index++, key3);\r\n        put(result);\r\n    }\r\n    return result;\r\n}", "class_name": "ClassWriter", "qualified_method_name": "com.alibaba.fastjson.asm.ClassWriter.newMethodItem", "qualified_signature": "com.alibaba.fastjson.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)", "qualified_return_type": "com.alibaba.fastjson.asm.Item"}
{"java_doc": "Adds a string to the constant pool of the class being build. Does nothing if the constant pool already contains a\r\nsimilar item.\r\n\r\n@param value the String value.\r\n@return a new or already existing string item.\r\n", "method_name": "newString", "return_type": "Item", "signature": "newString(String)", "body_content": "{\r\n    key2.set(8, /* STR */\r\n    value, null, null);\r\n    Item result = get(key2);\r\n    if (result == null) {\r\n        pool.put12(8, /*STR*/\r\n        newUTF8(value));\r\n        result = new Item(index++, key2);\r\n        put(result);\r\n    }\r\n    return result;\r\n}", "class_name": "ClassWriter", "qualified_method_name": "com.alibaba.fastjson.asm.ClassWriter.newString", "qualified_signature": "com.alibaba.fastjson.asm.ClassWriter.newString(java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.asm.Item"}
{"java_doc": "Adds a name and type to the constant pool of the class being build. Does nothing if the constant pool already\r\ncontains a similar item.\r\n\r\n@param name a name.\r\n@param desc a type descriptor.\r\n@return a new or already existing name and type item.\r\n", "method_name": "newNameTypeItem", "return_type": "Item", "signature": "newNameTypeItem(String, String)", "body_content": "{\r\n    key2.set(12, /* NAME_TYPE */\r\n    name, desc, null);\r\n    Item result = get(key2);\r\n    if (result == null) {\r\n        // put122(12 /* NAME_TYPE */, newUTF8(name), newUTF8(desc));\r\n        int s1 = newUTF8(name), s2 = newUTF8(desc);\r\n        pool.put12(12, /* NAME_TYPE */\r\n        s1).putShort(s2);\r\n        result = new Item(index++, key2);\r\n        put(result);\r\n    }\r\n    return result;\r\n}", "class_name": "ClassWriter", "qualified_method_name": "com.alibaba.fastjson.asm.ClassWriter.newNameTypeItem", "qualified_signature": "com.alibaba.fastjson.asm.ClassWriter.newNameTypeItem(java.lang.String, java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.asm.Item"}
{"java_doc": "Returns the constant pool's hash table item which is equal to the given item.\r\n\r\n@param key a constant pool item.\r\n@return the constant pool's hash table item which is equal to the given item, or <tt>null</tt> if there is no\r\nsuch item.\r\n", "method_name": "get", "return_type": "Item", "signature": "get(Item)", "body_content": "{\r\n    Item i = items[key.hashCode % items.length];\r\n    while (i != null && (i.type != key.type || !key.isEqualTo(i))) {\r\n        i = i.next;\r\n    }\r\n    return i;\r\n}", "class_name": "ClassWriter", "qualified_method_name": "com.alibaba.fastjson.asm.ClassWriter.get", "qualified_signature": "com.alibaba.fastjson.asm.ClassWriter.get(com.alibaba.fastjson.asm.Item)", "qualified_return_type": "com.alibaba.fastjson.asm.Item"}
{"java_doc": "Puts the given item in the constant pool's hash table. The hash table <i>must</i> not already contains this item.\r\n\r\n@param i the item to be added to the constant pool's hash table.\r\n", "method_name": "put", "return_type": "void", "signature": "put(Item)", "body_content": "{\r\n    if (index > threshold) {\r\n        int ll = items.length;\r\n        int nl = ll * 2 + 1;\r\n        Item[] newItems = new Item[nl];\r\n        for (int l = ll - 1; l >= 0; --l) {\r\n            Item j = items[l];\r\n            while (j != null) {\r\n                int index = j.hashCode % newItems.length;\r\n                Item k = j.next;\r\n                j.next = newItems[index];\r\n                newItems[index] = j;\r\n                j = k;\r\n            }\r\n        }\r\n        items = newItems;\r\n        threshold = (int) (nl * 0.75);\r\n    }\r\n    int index = i.hashCode % items.length;\r\n    i.next = items[index];\r\n    items[index] = i;\r\n}", "class_name": "ClassWriter", "qualified_method_name": "com.alibaba.fastjson.asm.ClassWriter.put", "qualified_signature": "com.alibaba.fastjson.asm.ClassWriter.put(com.alibaba.fastjson.asm.Item)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull();\r\n        return;\r\n    }\r\n    Calendar calendar;\r\n    if (object instanceof XMLGregorianCalendar) {\r\n        calendar = ((XMLGregorianCalendar) object).toGregorianCalendar();\r\n    } else {\r\n        calendar = (Calendar) object;\r\n    }\r\n    if (out.isEnabled(SerializerFeature.UseISO8601DateFormat)) {\r\n        final char quote = // \r\n        out.isEnabled(SerializerFeature.UseSingleQuotes) ? // \r\n        '\\'' : '\\\"';\r\n        out.append(quote);\r\n        int year = calendar.get(Calendar.YEAR);\r\n        int month = calendar.get(Calendar.MONTH) + 1;\r\n        int day = calendar.get(Calendar.DAY_OF_MONTH);\r\n        int hour = calendar.get(Calendar.HOUR_OF_DAY);\r\n        int minute = calendar.get(Calendar.MINUTE);\r\n        int second = calendar.get(Calendar.SECOND);\r\n        int millis = calendar.get(Calendar.MILLISECOND);\r\n        char[] buf;\r\n        if (millis != 0) {\r\n            buf = \"0000-00-00T00:00:00.000\".toCharArray();\r\n            IOUtils.getChars(millis, 23, buf);\r\n            IOUtils.getChars(second, 19, buf);\r\n            IOUtils.getChars(minute, 16, buf);\r\n            IOUtils.getChars(hour, 13, buf);\r\n            IOUtils.getChars(day, 10, buf);\r\n            IOUtils.getChars(month, 7, buf);\r\n            IOUtils.getChars(year, 4, buf);\r\n        } else {\r\n            if (second == 0 && minute == 0 && hour == 0) {\r\n                buf = \"0000-00-00\".toCharArray();\r\n                IOUtils.getChars(day, 10, buf);\r\n                IOUtils.getChars(month, 7, buf);\r\n                IOUtils.getChars(year, 4, buf);\r\n            } else {\r\n                buf = \"0000-00-00T00:00:00\".toCharArray();\r\n                IOUtils.getChars(second, 19, buf);\r\n                IOUtils.getChars(minute, 16, buf);\r\n                IOUtils.getChars(hour, 13, buf);\r\n                IOUtils.getChars(day, 10, buf);\r\n                IOUtils.getChars(month, 7, buf);\r\n                IOUtils.getChars(year, 4, buf);\r\n            }\r\n        }\r\n        out.write(buf);\r\n        int timeZone = calendar.getTimeZone().getRawOffset() / (3600 * 1000);\r\n        if (timeZone == 0) {\r\n            out.append(\"Z\");\r\n        } else if (timeZone > 0) {\r\n            out.append(\"+\").append(String.format(\"%02d\", timeZone)).append(\":00\");\r\n        } else {\r\n            out.append(\"-\").append(String.format(\"%02d\", -timeZone)).append(\":00\");\r\n        }\r\n        out.append(quote);\r\n    } else {\r\n        Date date = calendar.getTime();\r\n        serializer.write(date);\r\n    }\r\n}", "class_name": "CalendarCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.CalendarCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.CalendarCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    Object value = DateCodec.instance.deserialze(parser, type, fieldName);\r\n    if (value instanceof Calendar) {\r\n        return (T) value;\r\n    }\r\n    Date date = (Date) value;\r\n    if (date == null) {\r\n        return null;\r\n    }\r\n    JSONLexer lexer = parser.lexer;\r\n    Calendar calendar = Calendar.getInstance(lexer.getTimeZone(), lexer.getLocale());\r\n    calendar.setTime(date);\r\n    if (type == XMLGregorianCalendar.class) {\r\n        if (dateFactory == null) {\r\n            try {\r\n                dateFactory = DatatypeFactory.newInstance();\r\n            } catch (DatatypeConfigurationException e) {\r\n                throw new IllegalStateException(\"Could not obtain an instance of DatatypeFactory.\", e);\r\n            }\r\n        }\r\n        return (T) dateFactory.newXMLGregorianCalendar((GregorianCalendar) calendar);\r\n    }\r\n    return (T) calendar;\r\n}", "class_name": "CalendarCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.CalendarCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.CalendarCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_INT;\r\n}", "class_name": "CalendarCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.CalendarCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.CalendarCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object, String, int)", "body_content": "{\r\n    JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n        String text = lexer.stringVal();\r\n        lexer.nextToken();\r\n        DateTimeFormatter formatter = null;\r\n        if (format != null) {\r\n            formatter = DateTimeFormatter.ofPattern(format);\r\n        }\r\n        if (type == LocalDateTime.class) {\r\n            LocalDateTime localDateTime;\r\n            if (text.length() == 10 || text.length() == 8) {\r\n                LocalDate localDate = parseLocalDate(text, format, formatter);\r\n                localDateTime = LocalDateTime.of(localDate, LocalTime.MIN);\r\n            } else {\r\n                localDateTime = parseDateTime(text, formatter);\r\n            }\r\n            return (T) localDateTime;\r\n        } else if (type == LocalDate.class) {\r\n            LocalDate localDate;\r\n            if (text.length() == 23) {\r\n                LocalDateTime localDateTime = LocalDateTime.parse(text);\r\n                localDate = LocalDate.of(localDateTime.getYear(), localDateTime.getMonthValue(), localDateTime.getDayOfMonth());\r\n            } else {\r\n                localDate = parseLocalDate(text, format, formatter);\r\n            }\r\n            return (T) localDate;\r\n        } else if (type == LocalTime.class) {\r\n            LocalTime localDate;\r\n            if (text.length() == 23) {\r\n                LocalDateTime localDateTime = LocalDateTime.parse(text);\r\n                localDate = LocalTime.of(localDateTime.getHour(), localDateTime.getMinute(), localDateTime.getSecond(), localDateTime.getNano());\r\n            } else {\r\n                localDate = LocalTime.parse(text);\r\n            }\r\n            return (T) localDate;\r\n        } else if (type == ZonedDateTime.class) {\r\n            ZonedDateTime zonedDateTime = ZonedDateTime.parse(text);\r\n            return (T) zonedDateTime;\r\n        } else if (type == OffsetDateTime.class) {\r\n            OffsetDateTime offsetDateTime = OffsetDateTime.parse(text);\r\n            return (T) offsetDateTime;\r\n        } else if (type == OffsetTime.class) {\r\n            OffsetTime offsetTime = OffsetTime.parse(text);\r\n            return (T) offsetTime;\r\n        } else if (type == ZoneId.class) {\r\n            ZoneId offsetTime = ZoneId.of(text);\r\n            return (T) offsetTime;\r\n        } else if (type == Period.class) {\r\n            Period period = Period.parse(text);\r\n            return (T) period;\r\n        } else if (type == Duration.class) {\r\n            Duration duration = Duration.parse(text);\r\n            return (T) duration;\r\n        } else if (type == Instant.class) {\r\n            Instant instant = Instant.parse(text);\r\n            return (T) instant;\r\n        }\r\n    } else {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n    return null;\r\n}", "class_name": "Jdk8DateCodec", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.String, int)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "parseDateTime", "return_type": "LocalDateTime", "signature": "parseDateTime(String, DateTimeFormatter)", "body_content": "{\r\n    if (formatter == null) {\r\n        if (text.length() == 19) {\r\n            char c4 = text.charAt(4);\r\n            char c7 = text.charAt(7);\r\n            char c10 = text.charAt(10);\r\n            char c13 = text.charAt(13);\r\n            char c16 = text.charAt(16);\r\n            if (c13 == ':' && c16 == ':') {\r\n                if (c4 == '-' && c7 == '-') {\r\n                    if (c10 == 'T') {\r\n                        formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;\r\n                    } else if (c10 == ' ') {\r\n                        formatter = defaultFormatter;\r\n                    }\r\n                } else if (c4 == '-' && c7 == '-') {\r\n                    formatter = defaultFormatter;\r\n                } else if (c4 == '/' && c7 == '/') {\r\n                    // tw yyyy/mm/dd\r\n                    formatter = formatter_dt19_tw;\r\n                } else {\r\n                    char c0 = text.charAt(0);\r\n                    char c1 = text.charAt(1);\r\n                    char c2 = text.charAt(2);\r\n                    char c3 = text.charAt(3);\r\n                    char c5 = text.charAt(5);\r\n                    if (c2 == '/' && c5 == '/') {\r\n                        // mm/dd/yyyy or mm/dd/yyyy\r\n                        int v0 = (c0 - '0') * 10 + (c1 - '0');\r\n                        int v1 = (c3 - '0') * 10 + (c4 - '0');\r\n                        if (v0 > 12) {\r\n                            formatter = formatter_dt19_eur;\r\n                        } else if (v1 > 12) {\r\n                            formatter = formatter_dt19_us;\r\n                        } else {\r\n                            String country = Locale.getDefault().getCountry();\r\n                            if (country.equals(\"US\")) {\r\n                                formatter = formatter_dt19_us;\r\n                            } else if (// \r\n                            country.equals(\"BR\") || country.equals(\"AU\")) {\r\n                                formatter = formatter_dt19_eur;\r\n                            }\r\n                        }\r\n                    } else if (c2 == '.' && c5 == '.') {\r\n                        // dd.mm.yyyy\r\n                        formatter = formatter_dt19_de;\r\n                    } else if (c2 == '-' && c5 == '-') {\r\n                        // dd-mm-yyyy\r\n                        formatter = formatter_dt19_in;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (text.length() >= 17) {\r\n            char c4 = text.charAt(4);\r\n            if (c4 == '年') {\r\n                if (text.charAt(text.length() - 1) == '秒') {\r\n                    formatter = formatter_dt19_cn_1;\r\n                } else {\r\n                    formatter = formatter_dt19_cn;\r\n                }\r\n            } else if (c4 == '년') {\r\n                formatter = formatter_dt19_kr;\r\n            }\r\n        }\r\n    }\r\n    return // \r\n    formatter == null ? // \r\n    LocalDateTime.parse(text) : LocalDateTime.parse(text, formatter);\r\n}", "class_name": "Jdk8DateCodec", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.parseDateTime", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.parseDateTime(java.lang.String, java.time.format.DateTimeFormatter)", "qualified_return_type": "java.time.LocalDateTime"}
{"java_doc": "", "method_name": "parseLocalDate", "return_type": "LocalDate", "signature": "parseLocalDate(String, String, DateTimeFormatter)", "body_content": "{\r\n    if (formatter == null) {\r\n        if (text.length() == 8) {\r\n            formatter = formatter_d8;\r\n        }\r\n        if (text.length() == 10) {\r\n            char c4 = text.charAt(4);\r\n            char c7 = text.charAt(7);\r\n            if (c4 == '/' && c7 == '/') {\r\n                // tw yyyy/mm/dd\r\n                formatter = formatter_d10_tw;\r\n            }\r\n            char c0 = text.charAt(0);\r\n            char c1 = text.charAt(1);\r\n            char c2 = text.charAt(2);\r\n            char c3 = text.charAt(3);\r\n            char c5 = text.charAt(5);\r\n            if (c2 == '/' && c5 == '/') {\r\n                // mm/dd/yyyy or mm/dd/yyyy\r\n                int v0 = (c0 - '0') * 10 + (c1 - '0');\r\n                int v1 = (c3 - '0') * 10 + (c4 - '0');\r\n                if (v0 > 12) {\r\n                    formatter = formatter_d10_eur;\r\n                } else if (v1 > 12) {\r\n                    formatter = formatter_d10_us;\r\n                } else {\r\n                    String country = Locale.getDefault().getCountry();\r\n                    if (country.equals(\"US\")) {\r\n                        formatter = formatter_d10_us;\r\n                    } else if (// \r\n                    country.equals(\"BR\") || country.equals(\"AU\")) {\r\n                        formatter = formatter_d10_eur;\r\n                    }\r\n                }\r\n            } else if (c2 == '.' && c5 == '.') {\r\n                // dd.mm.yyyy\r\n                formatter = formatter_d10_de;\r\n            } else if (c2 == '-' && c5 == '-') {\r\n                // dd-mm-yyyy\r\n                formatter = formatter_d10_in;\r\n            }\r\n        }\r\n        if (text.length() >= 9) {\r\n            char c4 = text.charAt(4);\r\n            if (c4 == '年') {\r\n                formatter = formatter_d10_cn;\r\n            } else if (c4 == '년') {\r\n                formatter = formatter_d10_kr;\r\n            }\r\n        }\r\n    }\r\n    return // \r\n    formatter == null ? // \r\n    LocalDate.parse(text) : LocalDate.parse(text, formatter);\r\n}", "class_name": "Jdk8DateCodec", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.parseLocalDate", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.parseLocalDate(java.lang.String, java.lang.String, java.time.format.DateTimeFormatter)", "qualified_return_type": "java.time.LocalDate"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_STRING;\r\n}", "class_name": "Jdk8DateCodec", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull();\r\n    } else {\r\n        if (fieldType == LocalDateTime.class) {\r\n            LocalDateTime dateTime = (LocalDateTime) object;\r\n            if (dateTime.getNano() == 0) {\r\n                String format = serializer.getDateFormatPattern();\r\n                if (format == null) {\r\n                    format = JSON.DEFFAULT_DATE_FORMAT;\r\n                }\r\n                write(out, dateTime, format);\r\n            } else {\r\n                out.writeString(object.toString());\r\n            }\r\n        } else {\r\n            out.writeString(object.toString());\r\n        }\r\n    }\r\n}", "class_name": "Jdk8DateCodec", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.write", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, BeanContext)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    String format = context.getFormat();\r\n    write(out, (TemporalAccessor) object, format);\r\n}", "class_name": "Jdk8DateCodec", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.write", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, com.alibaba.fastjson.serializer.BeanContext)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(SerializeWriter, TemporalAccessor, String)", "body_content": "{\r\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(format);\r\n    String text = formatter.format((TemporalAccessor) object);\r\n    out.writeString(text);\r\n}", "class_name": "Jdk8DateCodec", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.write", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec.write(com.alibaba.fastjson.serializer.SerializeWriter, java.time.temporal.TemporalAccessor, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    return deserialze(parser, type, fieldName, null, 0);\r\n}", "class_name": "ContextObjectDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object, String, int)", "body_content": "", "class_name": "ContextObjectDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.String, int)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "addSymbol", "return_type": "String", "signature": "addSymbol(char[], int, int)", "body_content": "{\r\n    // search for identical symbol\r\n    int hash = hash(buffer, offset, len);\r\n    return addSymbol(buffer, offset, len, hash);\r\n}", "class_name": "SymbolTable", "qualified_method_name": "com.alibaba.fastjson.parser.SymbolTable.addSymbol", "qualified_signature": "com.alibaba.fastjson.parser.SymbolTable.addSymbol(char[], int, int)", "qualified_return_type": "java.lang.String"}
{"java_doc": "Adds the specified symbol to the symbol table and returns a reference to the unique symbol. If the symbol already\r\nexists, the previous symbol reference is returned instead, in order guarantee that symbol references remain\r\nunique.\r\n\r\n@param buffer The buffer containing the new symbol.\r\n@param offset The offset into the buffer of the new symbol.\r\n@param len The length of the new symbol in the buffer.\r\n", "method_name": "addSymbol", "return_type": "String", "signature": "addSymbol(char[], int, int, int)", "body_content": "{\r\n    final int bucket = hash & indexMask;\r\n    String symbol = symbols[bucket];\r\n    if (symbol != null) {\r\n        boolean eq = true;\r\n        if (// \r\n        hash == symbol.hashCode() && len == symbol.length()) {\r\n            for (int i = 0; i < len; i++) {\r\n                if (buffer[offset + i] != symbol.charAt(i)) {\r\n                    eq = false;\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            eq = false;\r\n        }\r\n        if (eq) {\r\n            return symbol;\r\n        } else {\r\n            return new String(buffer, offset, len);\r\n        }\r\n    }\r\n    symbol = new String(buffer, offset, len).intern();\r\n    symbols[bucket] = symbol;\r\n    return symbol;\r\n}", "class_name": "SymbolTable", "qualified_method_name": "com.alibaba.fastjson.parser.SymbolTable.addSymbol", "qualified_signature": "com.alibaba.fastjson.parser.SymbolTable.addSymbol(char[], int, int, int)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "addSymbol", "return_type": "String", "signature": "addSymbol(String, int, int, int)", "body_content": "{\r\n    final int bucket = hash & indexMask;\r\n    String symbol = symbols[bucket];\r\n    if (symbol != null) {\r\n        if (// \r\n        hash == symbol.hashCode() && // \r\n        len == symbol.length() && buffer.startsWith(symbol, offset)) {\r\n            return symbol;\r\n        }\r\n        return subString(buffer, offset, len);\r\n    }\r\n    symbol = // \r\n    len == buffer.length() ? // \r\n    buffer : subString(buffer, offset, len);\r\n    symbol = symbol.intern();\r\n    symbols[bucket] = symbol;\r\n    return symbol;\r\n}", "class_name": "SymbolTable", "qualified_method_name": "com.alibaba.fastjson.parser.SymbolTable.addSymbol", "qualified_signature": "com.alibaba.fastjson.parser.SymbolTable.addSymbol(java.lang.String, int, int, int)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "subString", "return_type": "String", "signature": "subString(String, int, int)", "body_content": "{\r\n    char[] chars = new char[len];\r\n    src.getChars(offset, offset + len, chars, 0);\r\n    return new String(chars);\r\n}", "class_name": "SymbolTable", "qualified_method_name": "com.alibaba.fastjson.parser.SymbolTable.subString", "qualified_signature": "com.alibaba.fastjson.parser.SymbolTable.subString(java.lang.String, int, int)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "hash", "return_type": "int", "signature": "hash(char[], int, int)", "body_content": "{\r\n    int h = 0;\r\n    int off = offset;\r\n    for (int i = 0; i < len; i++) {\r\n        h = 31 * h + buffer[off++];\r\n    }\r\n    return h;\r\n}", "class_name": "SymbolTable", "qualified_method_name": "com.alibaba.fastjson.parser.SymbolTable.hash", "qualified_signature": "com.alibaba.fastjson.parser.SymbolTable.hash(char[], int, int)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    Number value = (Number) object;\r\n    if (value == null) {\r\n        out.writeNull(SerializerFeature.WriteNullNumberAsZero);\r\n        return;\r\n    }\r\n    if (object instanceof Long) {\r\n        out.writeLong(value.longValue());\r\n    } else {\r\n        out.writeInt(value.intValue());\r\n    }\r\n    if (out.isEnabled(SerializerFeature.WriteClassName)) {\r\n        Class<?> clazz = value.getClass();\r\n        if (clazz == Byte.class) {\r\n            out.write('B');\r\n        } else if (clazz == Short.class) {\r\n            out.write('S');\r\n        }\r\n    }\r\n}", "class_name": "IntegerCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.IntegerCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.IntegerCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    final JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.NULL) {\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return null;\r\n    }\r\n    Integer intObj;\r\n    if (lexer.token() == JSONToken.LITERAL_INT) {\r\n        int val;\r\n        try {\r\n            val = lexer.intValue();\r\n        } catch (NumberFormatException ex) {\r\n            throw new JSONException(\"int value overflow, field : \" + fieldName, ex);\r\n        }\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        intObj = Integer.valueOf(val);\r\n    } else if (lexer.token() == JSONToken.LITERAL_FLOAT) {\r\n        BigDecimal decimalValue = lexer.decimalValue();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        intObj = Integer.valueOf(decimalValue.intValue());\r\n    } else {\r\n        Object value = parser.parse();\r\n        intObj = TypeUtils.castToInt(value);\r\n    }\r\n    if (clazz == AtomicInteger.class) {\r\n        return (T) new AtomicInteger(intObj.intValue());\r\n    }\r\n    return (T) intObj;\r\n}", "class_name": "IntegerCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.IntegerCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.IntegerCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_INT;\r\n}", "class_name": "IntegerCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.IntegerCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.IntegerCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull();\r\n        return;\r\n    }\r\n    Class<?> objClass = object.getClass();\r\n    String strVal;\r\n    if (objClass == SimpleDateFormat.class) {\r\n        String pattern = ((SimpleDateFormat) object).toPattern();\r\n        if (out.isEnabled(SerializerFeature.WriteClassName)) {\r\n            if (object.getClass() != fieldType) {\r\n                out.write('{');\r\n                out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\r\n                serializer.write(object.getClass().getName());\r\n                out.writeFieldValue(',', \"val\", pattern);\r\n                out.write('}');\r\n                return;\r\n            }\r\n        }\r\n        strVal = pattern;\r\n    } else if (objClass == Class.class) {\r\n        Class<?> clazz = (Class<?>) object;\r\n        strVal = clazz.getName();\r\n    } else if (objClass == InetSocketAddress.class) {\r\n        InetSocketAddress address = (InetSocketAddress) object;\r\n        InetAddress inetAddress = address.getAddress();\r\n        out.write('{');\r\n        if (inetAddress != null) {\r\n            out.writeFieldName(\"address\");\r\n            serializer.write(inetAddress);\r\n            out.write(',');\r\n        }\r\n        out.writeFieldName(\"port\");\r\n        out.writeInt(address.getPort());\r\n        out.write('}');\r\n        return;\r\n    } else if (object instanceof File) {\r\n        strVal = ((File) object).getPath();\r\n    } else if (object instanceof InetAddress) {\r\n        strVal = ((InetAddress) object).getHostAddress();\r\n    } else if (object instanceof TimeZone) {\r\n        TimeZone timeZone = (TimeZone) object;\r\n        strVal = timeZone.getID();\r\n    } else if (object instanceof Currency) {\r\n        Currency currency = (Currency) object;\r\n        strVal = currency.getCurrencyCode();\r\n    } else if (object instanceof JSONStreamAware) {\r\n        JSONStreamAware aware = (JSONStreamAware) object;\r\n        aware.writeJSONString(out);\r\n        return;\r\n    } else if (object instanceof Iterator) {\r\n        Iterator<?> it = ((Iterator<?>) object);\r\n        writeIterator(serializer, out, it);\r\n        return;\r\n    } else if (object instanceof Iterable) {\r\n        Iterator<?> it = ((Iterable<?>) object).iterator();\r\n        writeIterator(serializer, out, it);\r\n        return;\r\n    } else {\r\n        throw new JSONException(\"not support class : \" + objClass);\r\n    }\r\n    out.writeString(strVal);\r\n}", "class_name": "MiscCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.MiscCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.MiscCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeIterator", "return_type": "void", "signature": "writeIterator(JSONSerializer, SerializeWriter, Iterator)", "body_content": "{\r\n    int i = 0;\r\n    out.write('[');\r\n    while (it.hasNext()) {\r\n        if (i != 0) {\r\n            out.write(',');\r\n        }\r\n        Object item = it.next();\r\n        serializer.write(item);\r\n        ++i;\r\n    }\r\n    out.write(']');\r\n    return;\r\n}", "class_name": "MiscCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.MiscCodec.writeIterator", "qualified_signature": "com.alibaba.fastjson.serializer.MiscCodec.writeIterator(com.alibaba.fastjson.serializer.JSONSerializer, com.alibaba.fastjson.serializer.SerializeWriter, java.util.Iterator<?>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    JSONLexer lexer = parser.lexer;\r\n    if (clazz == InetSocketAddress.class) {\r\n        if (lexer.token() == JSONToken.NULL) {\r\n            lexer.nextToken();\r\n            return null;\r\n        }\r\n        parser.accept(JSONToken.LBRACE);\r\n        InetAddress address = null;\r\n        int port = 0;\r\n        for (; ; ) {\r\n            String key = lexer.stringVal();\r\n            lexer.nextToken(JSONToken.COLON);\r\n            if (key.equals(\"address\")) {\r\n                parser.accept(JSONToken.COLON);\r\n                address = parser.parseObject(InetAddress.class);\r\n            } else if (key.equals(\"port\")) {\r\n                parser.accept(JSONToken.COLON);\r\n                if (lexer.token() != JSONToken.LITERAL_INT) {\r\n                    throw new JSONException(\"port is not int\");\r\n                }\r\n                port = lexer.intValue();\r\n                lexer.nextToken();\r\n            } else {\r\n                parser.accept(JSONToken.COLON);\r\n                parser.parse();\r\n            }\r\n            if (lexer.token() == JSONToken.COMMA) {\r\n                lexer.nextToken();\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        parser.accept(JSONToken.RBRACE);\r\n        return (T) new InetSocketAddress(address, port);\r\n    }\r\n    Object objVal;\r\n    if (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) {\r\n        parser.resolveStatus = DefaultJSONParser.NONE;\r\n        parser.accept(JSONToken.COMMA);\r\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n            if (!\"val\".equals(lexer.stringVal())) {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n            lexer.nextToken();\r\n        } else {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        parser.accept(JSONToken.COLON);\r\n        objVal = parser.parse();\r\n        parser.accept(JSONToken.RBRACE);\r\n    } else {\r\n        objVal = parser.parse();\r\n    }\r\n    String strVal;\r\n    if (objVal == null) {\r\n        strVal = null;\r\n    } else if (objVal instanceof String) {\r\n        strVal = (String) objVal;\r\n    } else {\r\n        throw new JSONException(\"expect string\");\r\n    }\r\n    if (strVal == null || strVal.length() == 0) {\r\n        return null;\r\n    }\r\n    if (clazz == UUID.class) {\r\n        return (T) UUID.fromString(strVal);\r\n    }\r\n    if (clazz == URI.class) {\r\n        return (T) URI.create(strVal);\r\n    }\r\n    if (clazz == URL.class) {\r\n        try {\r\n            return (T) new URL(strVal);\r\n        } catch (MalformedURLException e) {\r\n            throw new JSONException(\"create url error\", e);\r\n        }\r\n    }\r\n    if (clazz == Pattern.class) {\r\n        return (T) Pattern.compile(strVal);\r\n    }\r\n    if (clazz == Locale.class) {\r\n        String[] items = strVal.split(\"_\");\r\n        if (items.length == 1) {\r\n            return (T) new Locale(items[0]);\r\n        }\r\n        if (items.length == 2) {\r\n            return (T) new Locale(items[0], items[1]);\r\n        }\r\n        return (T) new Locale(items[0], items[1], items[2]);\r\n    }\r\n    if (clazz == SimpleDateFormat.class) {\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(strVal, lexer.getLocale());\r\n        dateFormat.setTimeZone(lexer.getTimeZone());\r\n        return (T) dateFormat;\r\n    }\r\n    if (clazz == InetAddress.class || clazz == Inet4Address.class || clazz == Inet6Address.class) {\r\n        try {\r\n            return (T) InetAddress.getByName(strVal);\r\n        } catch (UnknownHostException e) {\r\n            throw new JSONException(\"deserialize inet adress error\", e);\r\n        }\r\n    }\r\n    if (clazz == File.class) {\r\n        return (T) new File(strVal);\r\n    }\r\n    if (clazz == TimeZone.class) {\r\n        return (T) TimeZone.getTimeZone(strVal);\r\n    }\r\n    if (clazz instanceof ParameterizedType) {\r\n        ParameterizedType parmeterizedType = (ParameterizedType) clazz;\r\n        clazz = parmeterizedType.getRawType();\r\n    }\r\n    if (clazz == Class.class) {\r\n        return (T) TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader());\r\n    }\r\n    if (clazz == Charset.class) {\r\n        return (T) Charset.forName(strVal);\r\n    }\r\n    if (clazz == Currency.class) {\r\n        return (T) Currency.getInstance(strVal);\r\n    }\r\n    if (clazz == JSONPath.class) {\r\n        return (T) new JSONPath(strVal);\r\n    }\r\n    String className = clazz.getTypeName();\r\n    if (className.equals(\"java.nio.file.Path\")) {\r\n        try {\r\n            if (method_paths_get == null && !method_paths_get_error) {\r\n                Class<?> paths = TypeUtils.loadClass(\"java.nio.file.Paths\");\r\n                method_paths_get = paths.getMethod(\"get\", String.class, String[].class);\r\n            }\r\n            if (method_paths_get != null) {\r\n                return (T) method_paths_get.invoke(null, strVal, new String[0]);\r\n            }\r\n            throw new JSONException(\"Path deserialize erorr\");\r\n        } catch (NoSuchMethodException ex) {\r\n            method_paths_get_error = true;\r\n        } catch (IllegalAccessException ex) {\r\n            throw new JSONException(\"Path deserialize erorr\", ex);\r\n        } catch (InvocationTargetException ex) {\r\n            throw new JSONException(\"Path deserialize erorr\", ex);\r\n        }\r\n    }\r\n    throw new JSONException(\"MiscCodec not support \" + className);\r\n}", "class_name": "MiscCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.MiscCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.MiscCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_STRING;\r\n}", "class_name": "MiscCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.MiscCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.MiscCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "getBeanClass", "return_type": "Class<?>", "signature": "getBeanClass()", "body_content": "{\r\n    return beanClass;\r\n}", "class_name": "BeanContext", "qualified_method_name": "com.alibaba.fastjson.serializer.BeanContext.getBeanClass", "qualified_signature": "com.alibaba.fastjson.serializer.BeanContext.getBeanClass()", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "getMethod", "return_type": "Method", "signature": "getMethod()", "body_content": "{\r\n    return fieldInfo.method;\r\n}", "class_name": "BeanContext", "qualified_method_name": "com.alibaba.fastjson.serializer.BeanContext.getMethod", "qualified_signature": "com.alibaba.fastjson.serializer.BeanContext.getMethod()", "qualified_return_type": "java.lang.reflect.Method"}
{"java_doc": "", "method_name": "getField", "return_type": "Field", "signature": "getField()", "body_content": "{\r\n    return fieldInfo.field;\r\n}", "class_name": "BeanContext", "qualified_method_name": "com.alibaba.fastjson.serializer.BeanContext.getField", "qualified_signature": "com.alibaba.fastjson.serializer.BeanContext.getField()", "qualified_return_type": "java.lang.reflect.Field"}
{"java_doc": "", "method_name": "getName", "return_type": "String", "signature": "getName()", "body_content": "{\r\n    return fieldInfo.name;\r\n}", "class_name": "BeanContext", "qualified_method_name": "com.alibaba.fastjson.serializer.BeanContext.getName", "qualified_signature": "com.alibaba.fastjson.serializer.BeanContext.getName()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getLabel", "return_type": "String", "signature": "getLabel()", "body_content": "{\r\n    return fieldInfo.label;\r\n}", "class_name": "BeanContext", "qualified_method_name": "com.alibaba.fastjson.serializer.BeanContext.getLabel", "qualified_signature": "com.alibaba.fastjson.serializer.BeanContext.getLabel()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getFieldClass", "return_type": "Class<?>", "signature": "getFieldClass()", "body_content": "{\r\n    return fieldInfo.fieldClass;\r\n}", "class_name": "BeanContext", "qualified_method_name": "com.alibaba.fastjson.serializer.BeanContext.getFieldClass", "qualified_signature": "com.alibaba.fastjson.serializer.BeanContext.getFieldClass()", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "getFieldType", "return_type": "Type", "signature": "getFieldType()", "body_content": "{\r\n    return fieldInfo.fieldType;\r\n}", "class_name": "BeanContext", "qualified_method_name": "com.alibaba.fastjson.serializer.BeanContext.getFieldType", "qualified_signature": "com.alibaba.fastjson.serializer.BeanContext.getFieldType()", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "", "method_name": "getFeatures", "return_type": "int", "signature": "getFeatures()", "body_content": "{\r\n    return fieldInfo.serialzeFeatures;\r\n}", "class_name": "BeanContext", "qualified_method_name": "com.alibaba.fastjson.serializer.BeanContext.getFeatures", "qualified_signature": "com.alibaba.fastjson.serializer.BeanContext.getFeatures()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "isJsonDirect", "return_type": "boolean", "signature": "isJsonDirect()", "body_content": "{\r\n    return this.fieldInfo.jsonDirect;\r\n}", "class_name": "BeanContext", "qualified_method_name": "com.alibaba.fastjson.serializer.BeanContext.isJsonDirect", "qualified_signature": "com.alibaba.fastjson.serializer.BeanContext.isJsonDirect()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getAnnation", "return_type": "T", "signature": "getAnnation(Class)", "body_content": "{\r\n    return fieldInfo.getAnnation(annotationClass);\r\n}", "class_name": "BeanContext", "qualified_method_name": "com.alibaba.fastjson.serializer.BeanContext.getAnnation", "qualified_signature": "com.alibaba.fastjson.serializer.BeanContext.getAnnation(java.lang.Class<T>)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFormat", "return_type": "String", "signature": "getFormat()", "body_content": "{\r\n    return format;\r\n}", "class_name": "BeanContext", "qualified_method_name": "com.alibaba.fastjson.serializer.BeanContext.getFormat", "qualified_signature": "com.alibaba.fastjson.serializer.BeanContext.getFormat()", "qualified_return_type": "java.lang.String"}
{"java_doc": "fastjson invokes this call-back method during serialization when it encounters a field of the\r\nspecified type.\r\n\r\n@param serializer\r\n@param object src the object that needs to be converted to Json.\r\n@param fieldName parent object field name\r\n@param fieldType parent object field type\r\n@param features parent object field serializer features\r\n@throws IOException\r\n", "method_name": "// \r\nwrite", "return_type": "// \r\nvoid", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "", "class_name": "ObjectSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.ObjectSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.ObjectSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    return deserialze(parser, clazz, fieldName, null, 0);\r\n}", "class_name": "AbstractDateDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object, String, int)", "body_content": "{\r\n    JSONLexer lexer = parser.lexer;\r\n    Object val;\r\n    if (lexer.token() == JSONToken.LITERAL_INT) {\r\n        val = lexer.longValue();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n    } else if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n        String strVal = lexer.stringVal();\r\n        if (format != null) {\r\n            SimpleDateFormat simpleDateFormat = null;\r\n            try {\r\n                simpleDateFormat = new SimpleDateFormat(format);\r\n            } catch (IllegalArgumentException ex) {\r\n                if (format.equals(\"yyyy-MM-ddTHH:mm:ss.SSS\")) {\r\n                    format = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\r\n                    simpleDateFormat = new SimpleDateFormat(format);\r\n                } else if (format.equals(\"yyyy-MM-ddTHH:mm:ss\")) {\r\n                    format = \"yyyy-MM-dd'T'HH:mm:ss\";\r\n                    simpleDateFormat = new SimpleDateFormat(format);\r\n                }\r\n            }\r\n            try {\r\n                val = simpleDateFormat.parse(strVal);\r\n            } catch (ParseException ex) {\r\n                if (// \r\n                format.equals(\"yyyy-MM-dd'T'HH:mm:ss.SSS\") && strVal.length() == 19) {\r\n                    try {\r\n                        val = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").parse(strVal);\r\n                    } catch (ParseException ex2) {\r\n                        // skip\r\n                        val = null;\r\n                    }\r\n                } else {\r\n                    // skip\r\n                    val = null;\r\n                }\r\n            }\r\n        } else {\r\n            val = null;\r\n        }\r\n        if (val == null) {\r\n            val = strVal;\r\n            lexer.nextToken(JSONToken.COMMA);\r\n            if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\r\n                JSONScanner iso8601Lexer = new JSONScanner(strVal);\r\n                if (iso8601Lexer.scanISO8601DateIfMatch()) {\r\n                    val = iso8601Lexer.getCalendar().getTime();\r\n                }\r\n                iso8601Lexer.close();\r\n            }\r\n        }\r\n    } else if (lexer.token() == JSONToken.NULL) {\r\n        lexer.nextToken();\r\n        val = null;\r\n    } else if (lexer.token() == JSONToken.LBRACE) {\r\n        lexer.nextToken();\r\n        String key;\r\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n            key = lexer.stringVal();\r\n            if (JSON.DEFAULT_TYPE_KEY.equals(key)) {\r\n                lexer.nextToken();\r\n                parser.accept(JSONToken.COLON);\r\n                String typeName = lexer.stringVal();\r\n                Class<?> type = TypeUtils.loadClass(typeName, parser.getConfig().getDefaultClassLoader());\r\n                if (type != null) {\r\n                    clazz = type;\r\n                }\r\n                parser.accept(JSONToken.LITERAL_STRING);\r\n                parser.accept(JSONToken.COMMA);\r\n            }\r\n            lexer.nextTokenWithColon(JSONToken.LITERAL_INT);\r\n        } else {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        long timeMillis;\r\n        if (lexer.token() == JSONToken.LITERAL_INT) {\r\n            timeMillis = lexer.longValue();\r\n            lexer.nextToken();\r\n        } else {\r\n            throw new JSONException(\"syntax error : \" + lexer.tokenName());\r\n        }\r\n        val = timeMillis;\r\n        parser.accept(JSONToken.RBRACE);\r\n    } else if (parser.getResolveStatus() == DefaultJSONParser.TypeNameRedirect) {\r\n        parser.setResolveStatus(DefaultJSONParser.NONE);\r\n        parser.accept(JSONToken.COMMA);\r\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n            if (!\"val\".equals(lexer.stringVal())) {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n            lexer.nextToken();\r\n        } else {\r\n            throw new JSONException(\"syntax error\");\r\n        }\r\n        parser.accept(JSONToken.COLON);\r\n        val = parser.parse();\r\n        parser.accept(JSONToken.RBRACE);\r\n    } else {\r\n        val = parser.parse();\r\n    }\r\n    return (T) cast(parser, clazz, fieldName, val);\r\n}", "class_name": "AbstractDateDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.String, int)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "cast", "return_type": "T", "signature": "cast(DefaultJSONParser, Type, Object, Object)", "body_content": "", "class_name": "AbstractDateDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer.cast", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer.cast(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getExtraType", "return_type": "Type", "signature": "getExtraType(Object, String)", "body_content": "", "class_name": "ExtraTypeProvider", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider.getExtraType", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider.getExtraType(java.lang.Object, java.lang.String)", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "", "method_name": "// \r\nwrite", "return_type": "// \r\nvoid", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.getWriter();\r\n    Json json = (Json) object;\r\n    String value = json.value();\r\n    out.write(value);\r\n}", "class_name": "SwaggerJsonSerializer", "qualified_method_name": "com.alibaba.fastjson.support.springfox.SwaggerJsonSerializer.write", "qualified_signature": "com.alibaba.fastjson.support.springfox.SwaggerJsonSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    try {\r\n        if (object == null) {\r\n            serializer.writeNull();\r\n            return;\r\n        }\r\n        Clob clob = (Clob) object;\r\n        Reader reader = clob.getCharacterStream();\r\n        StringBuilder buf = new StringBuilder();\r\n        try {\r\n            char[] chars = new char[2048];\r\n            for (; ; ) {\r\n                int len = reader.read(chars, 0, chars.length);\r\n                if (len < 0) {\r\n                    break;\r\n                }\r\n                buf.append(chars, 0, len);\r\n            }\r\n        } catch (Exception ex) {\r\n            throw new JSONException(\"read string from reader error\", ex);\r\n        }\r\n        String text = buf.toString();\r\n        reader.close();\r\n        serializer.write(text);\r\n    } catch (SQLException e) {\r\n        throw new IOException(\"write clob error\", e);\r\n    }\r\n}", "class_name": "ClobSeriliazer", "qualified_method_name": "com.alibaba.fastjson.serializer.ClobSeriliazer.write", "qualified_signature": "com.alibaba.fastjson.serializer.ClobSeriliazer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getField", "return_type": "FieldInfo", "signature": "getField(List, String)", "body_content": "{\r\n    for (FieldInfo item : fieldList) {\r\n        if (item.name.equals(propertyName)) {\r\n            return item;\r\n        }\r\n    }\r\n    return null;\r\n}", "class_name": "JavaBeanInfo", "qualified_method_name": "com.alibaba.fastjson.util.JavaBeanInfo.getField", "qualified_signature": "com.alibaba.fastjson.util.JavaBeanInfo.getField(java.util.List<com.alibaba.fastjson.util.FieldInfo>, java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.util.FieldInfo"}
{"java_doc": "", "method_name": "add", "return_type": "boolean", "signature": "add(List, FieldInfo)", "body_content": "{\r\n    for (int i = fieldList.size() - 1; i >= 0; --i) {\r\n        FieldInfo item = fieldList.get(i);\r\n        if (item.name.equals(field.name)) {\r\n            if (item.getOnly && !field.getOnly) {\r\n                continue;\r\n            }\r\n            if (item.fieldClass.isAssignableFrom(field.fieldClass)) {\r\n                fieldList.remove(i);\r\n                break;\r\n            }\r\n            int result = item.compareTo(field);\r\n            if (result < 0) {\r\n                fieldList.remove(i);\r\n                break;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    fieldList.add(field);\r\n    return true;\r\n}", "class_name": "JavaBeanInfo", "qualified_method_name": "com.alibaba.fastjson.util.JavaBeanInfo.add", "qualified_signature": "com.alibaba.fastjson.util.JavaBeanInfo.add(java.util.List<com.alibaba.fastjson.util.FieldInfo>, com.alibaba.fastjson.util.FieldInfo)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "build", "return_type": "JavaBeanInfo", "signature": "build(Class, Type, PropertyNamingStrategy)", "body_content": "{\r\n    JSONType jsonType = clazz.getAnnotation(JSONType.class);\r\n    Class<?> builderClass = getBuilderClass(jsonType);\r\n    Field[] declaredFields = clazz.getDeclaredFields();\r\n    Method[] methods = clazz.getMethods();\r\n    Constructor<?> defaultConstructor = getDefaultConstructor(builderClass == null ? clazz : builderClass);\r\n    Constructor<?> creatorConstructor = null;\r\n    Method buildMethod = null;\r\n    List<FieldInfo> fieldList = new ArrayList<FieldInfo>();\r\n    if (defaultConstructor == null && !(clazz.isInterface() || Modifier.isAbstract(clazz.getModifiers()))) {\r\n        creatorConstructor = getCreatorConstructor(clazz);\r\n        if (creatorConstructor != null) {\r\n            // 基于标记 JSONCreator 注解的构造方法\r\n            TypeUtils.setAccessible(creatorConstructor);\r\n            Class<?>[] types = creatorConstructor.getParameterTypes();\r\n            if (types.length > 0) {\r\n                Annotation[][] paramAnnotationArrays = creatorConstructor.getParameterAnnotations();\r\n                for (int i = 0; i < types.length; ++i) {\r\n                    Annotation[] paramAnnotations = paramAnnotationArrays[i];\r\n                    JSONField fieldAnnotation = null;\r\n                    for (Annotation paramAnnotation : paramAnnotations) {\r\n                        if (paramAnnotation instanceof JSONField) {\r\n                            fieldAnnotation = (JSONField) paramAnnotation;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (fieldAnnotation == null) {\r\n                        throw new JSONException(\"illegal json creator\");\r\n                    }\r\n                    Class<?> fieldClass = types[i];\r\n                    Type fieldType = creatorConstructor.getGenericParameterTypes()[i];\r\n                    Field field = TypeUtils.getField(clazz, fieldAnnotation.name(), declaredFields);\r\n                    final int ordinal = fieldAnnotation.ordinal();\r\n                    final int serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());\r\n                    final int parserFeatures = Feature.of(fieldAnnotation.parseFeatures());\r\n                    FieldInfo fieldInfo = new FieldInfo(fieldAnnotation.name(), clazz, fieldClass, fieldType, field, ordinal, serialzeFeatures, parserFeatures);\r\n                    add(fieldList, fieldInfo);\r\n                }\r\n            }\r\n            return new JavaBeanInfo(clazz, builderClass, null, creatorConstructor, null, null, jsonType, fieldList);\r\n        }\r\n        // 基于标记 JSONCreator 注解的工厂方法\r\n        Method factoryMethod = getFactoryMethod(clazz, methods);\r\n        if (factoryMethod != null) {\r\n            TypeUtils.setAccessible(factoryMethod);\r\n            Class<?>[] types = factoryMethod.getParameterTypes();\r\n            if (types.length > 0) {\r\n                Annotation[][] paramAnnotationArrays = factoryMethod.getParameterAnnotations();\r\n                for (int i = 0; i < types.length; ++i) {\r\n                    Annotation[] paramAnnotations = paramAnnotationArrays[i];\r\n                    JSONField fieldAnnotation = null;\r\n                    for (Annotation paramAnnotation : paramAnnotations) {\r\n                        if (paramAnnotation instanceof JSONField) {\r\n                            fieldAnnotation = (JSONField) paramAnnotation;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (fieldAnnotation == null) {\r\n                        throw new JSONException(\"illegal json creator\");\r\n                    }\r\n                    Class<?> fieldClass = types[i];\r\n                    Type fieldType = factoryMethod.getGenericParameterTypes()[i];\r\n                    Field field = TypeUtils.getField(clazz, fieldAnnotation.name(), declaredFields);\r\n                    final int ordinal = fieldAnnotation.ordinal();\r\n                    final int serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());\r\n                    final int parserFeatures = Feature.of(fieldAnnotation.parseFeatures());\r\n                    FieldInfo fieldInfo = new FieldInfo(fieldAnnotation.name(), clazz, fieldClass, fieldType, field, ordinal, serialzeFeatures, parserFeatures);\r\n                    add(fieldList, fieldInfo);\r\n                }\r\n            }\r\n            return new JavaBeanInfo(clazz, builderClass, null, null, factoryMethod, null, jsonType, fieldList);\r\n        }\r\n        throw new JSONException(\"default constructor not found. \" + clazz);\r\n    }\r\n    if (defaultConstructor != null) {\r\n        TypeUtils.setAccessible(defaultConstructor);\r\n    }\r\n    if (builderClass != null) {\r\n        String withPrefix = null;\r\n        JSONPOJOBuilder builderAnno = builderClass.getAnnotation(JSONPOJOBuilder.class);\r\n        if (builderAnno != null) {\r\n            withPrefix = builderAnno.withPrefix();\r\n        }\r\n        if (withPrefix == null || withPrefix.length() == 0) {\r\n            withPrefix = \"with\";\r\n        }\r\n        for (Method method : builderClass.getMethods()) {\r\n            if (Modifier.isStatic(method.getModifiers())) {\r\n                continue;\r\n            }\r\n            if (!(method.getReturnType().equals(builderClass))) {\r\n                continue;\r\n            }\r\n            int ordinal = 0, serialzeFeatures = 0, parserFeatures = 0;\r\n            JSONField annotation = method.getAnnotation(JSONField.class);\r\n            if (annotation == null) {\r\n                annotation = TypeUtils.getSuperMethodAnnotation(clazz, method);\r\n            }\r\n            if (annotation != null) {\r\n                if (!annotation.deserialize()) {\r\n                    continue;\r\n                }\r\n                ordinal = annotation.ordinal();\r\n                serialzeFeatures = SerializerFeature.of(annotation.serialzeFeatures());\r\n                parserFeatures = Feature.of(annotation.parseFeatures());\r\n                if (annotation.name().length() != 0) {\r\n                    String propertyName = annotation.name();\r\n                    add(fieldList, new FieldInfo(propertyName, method, null, clazz, type, ordinal, serialzeFeatures, parserFeatures, annotation, null, null));\r\n                    continue;\r\n                }\r\n            }\r\n            String methodName = method.getName();\r\n            if (!methodName.startsWith(withPrefix)) {\r\n                continue;\r\n            }\r\n            if (methodName.length() <= withPrefix.length()) {\r\n                continue;\r\n            }\r\n            char c0 = methodName.charAt(withPrefix.length());\r\n            if (!Character.isUpperCase(c0)) {\r\n                continue;\r\n            }\r\n            StringBuilder properNameBuilder = new StringBuilder(methodName.substring(withPrefix.length()));\r\n            properNameBuilder.setCharAt(0, Character.toLowerCase(c0));\r\n            String propertyName = properNameBuilder.toString();\r\n            add(fieldList, new FieldInfo(propertyName, method, null, clazz, type, ordinal, serialzeFeatures, parserFeatures, annotation, null, null));\r\n        }\r\n        if (builderClass != null) {\r\n            JSONPOJOBuilder builderAnnotation = builderClass.getAnnotation(JSONPOJOBuilder.class);\r\n            String buildMethodName = null;\r\n            if (builderAnnotation != null) {\r\n                buildMethodName = builderAnnotation.buildMethod();\r\n            }\r\n            if (buildMethodName == null || buildMethodName.length() == 0) {\r\n                buildMethodName = \"build\";\r\n            }\r\n            try {\r\n                buildMethod = builderClass.getMethod(buildMethodName);\r\n            } catch (NoSuchMethodException e) {\r\n                // skip\r\n            } catch (SecurityException e) {\r\n                // skip\r\n            }\r\n            if (buildMethod == null) {\r\n                try {\r\n                    buildMethod = builderClass.getMethod(\"create\");\r\n                } catch (NoSuchMethodException e) {\r\n                    // skip\r\n                } catch (SecurityException e) {\r\n                    // skip\r\n                }\r\n            }\r\n            if (buildMethod == null) {\r\n                throw new JSONException(\"buildMethod not found.\");\r\n            }\r\n            TypeUtils.setAccessible(buildMethod);\r\n        }\r\n    }\r\n    for (Method method : methods) {\r\n        // \r\n        int ordinal = 0, serialzeFeatures = 0, parserFeatures = 0;\r\n        String methodName = method.getName();\r\n        if (methodName.length() < 4) {\r\n            continue;\r\n        }\r\n        if (Modifier.isStatic(method.getModifiers())) {\r\n            continue;\r\n        }\r\n        // support builder set\r\n        if (!(method.getReturnType().equals(Void.TYPE) || method.getReturnType().equals(method.getDeclaringClass()))) {\r\n            continue;\r\n        }\r\n        Class<?>[] types = method.getParameterTypes();\r\n        if (types.length != 1) {\r\n            continue;\r\n        }\r\n        JSONField annotation = method.getAnnotation(JSONField.class);\r\n        if (annotation == null) {\r\n            annotation = TypeUtils.getSuperMethodAnnotation(clazz, method);\r\n        }\r\n        if (annotation != null) {\r\n            if (!annotation.deserialize()) {\r\n                continue;\r\n            }\r\n            ordinal = annotation.ordinal();\r\n            serialzeFeatures = SerializerFeature.of(annotation.serialzeFeatures());\r\n            parserFeatures = Feature.of(annotation.parseFeatures());\r\n            if (annotation.name().length() != 0) {\r\n                String propertyName = annotation.name();\r\n                add(fieldList, new FieldInfo(propertyName, method, null, clazz, type, ordinal, serialzeFeatures, parserFeatures, annotation, null, null));\r\n                continue;\r\n            }\r\n        }\r\n        if (!methodName.startsWith(\"set\")) {\r\n            // TODO \"set\"的判断放在 JSONField 注解后面，意思是允许非 setter 方法标记 JSONField 注解？\r\n            continue;\r\n        }\r\n        char c3 = methodName.charAt(3);\r\n        String propertyName;\r\n        if (// \r\n        Character.isUpperCase(c3) || // for unicode method name\r\n        c3 > 512) {\r\n            if (TypeUtils.compatibleWithJavaBean) {\r\n                propertyName = TypeUtils.decapitalize(methodName.substring(3));\r\n            } else {\r\n                propertyName = Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\r\n            }\r\n        } else if (c3 == '_') {\r\n            propertyName = methodName.substring(4);\r\n        } else if (c3 == 'f') {\r\n            propertyName = methodName.substring(3);\r\n        } else if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\r\n            propertyName = TypeUtils.decapitalize(methodName.substring(3));\r\n        } else {\r\n            continue;\r\n        }\r\n        Field field = TypeUtils.getField(clazz, propertyName, declaredFields);\r\n        if (field == null && types[0] == boolean.class) {\r\n            String isFieldName = \"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\r\n            field = TypeUtils.getField(clazz, isFieldName, declaredFields);\r\n        }\r\n        JSONField fieldAnnotation = null;\r\n        if (field != null) {\r\n            fieldAnnotation = field.getAnnotation(JSONField.class);\r\n            if (fieldAnnotation != null) {\r\n                if (!fieldAnnotation.deserialize()) {\r\n                    continue;\r\n                }\r\n                ordinal = fieldAnnotation.ordinal();\r\n                serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());\r\n                parserFeatures = Feature.of(fieldAnnotation.parseFeatures());\r\n                if (fieldAnnotation.name().length() != 0) {\r\n                    propertyName = fieldAnnotation.name();\r\n                    add(fieldList, new FieldInfo(propertyName, method, field, clazz, type, ordinal, serialzeFeatures, parserFeatures, annotation, fieldAnnotation, null));\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        if (propertyNamingStrategy != null) {\r\n            propertyName = propertyNamingStrategy.translate(propertyName);\r\n        }\r\n        add(fieldList, new FieldInfo(propertyName, method, field, clazz, type, ordinal, serialzeFeatures, parserFeatures, annotation, fieldAnnotation, null));\r\n    }\r\n    for (Field field : clazz.getFields()) {\r\n        // public static fields\r\n        int modifiers = field.getModifiers();\r\n        if ((modifiers & Modifier.STATIC) != 0) {\r\n            continue;\r\n        }\r\n        if ((modifiers & Modifier.FINAL) != 0) {\r\n            Class<?> fieldType = field.getType();\r\n            boolean supportReadOnly = Map.class.isAssignableFrom(fieldType) || Collection.class.isAssignableFrom(fieldType) || // \r\n            AtomicLong.class.equals(fieldType) || // \r\n            AtomicInteger.class.equals(fieldType) || AtomicBoolean.class.equals(fieldType);\r\n            if (!supportReadOnly) {\r\n                continue;\r\n            }\r\n        }\r\n        boolean contains = false;\r\n        for (FieldInfo item : fieldList) {\r\n            if (item.name.equals(field.getName())) {\r\n                contains = true;\r\n                // 已经是 contains = true，无需继续遍历\r\n                break;\r\n            }\r\n        }\r\n        if (contains) {\r\n            continue;\r\n        }\r\n        int ordinal = 0, serialzeFeatures = 0, parserFeatures = 0;\r\n        String propertyName = field.getName();\r\n        JSONField fieldAnnotation = field.getAnnotation(JSONField.class);\r\n        if (fieldAnnotation != null) {\r\n            if (!fieldAnnotation.deserialize()) {\r\n                continue;\r\n            }\r\n            ordinal = fieldAnnotation.ordinal();\r\n            serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());\r\n            parserFeatures = Feature.of(fieldAnnotation.parseFeatures());\r\n            if (fieldAnnotation.name().length() != 0) {\r\n                propertyName = fieldAnnotation.name();\r\n            }\r\n        }\r\n        if (propertyNamingStrategy != null) {\r\n            propertyName = propertyNamingStrategy.translate(propertyName);\r\n        }\r\n        add(fieldList, new FieldInfo(propertyName, null, field, clazz, type, ordinal, serialzeFeatures, parserFeatures, null, fieldAnnotation, null));\r\n    }\r\n    for (Method method : clazz.getMethods()) {\r\n        // getter methods\r\n        String methodName = method.getName();\r\n        if (methodName.length() < 4) {\r\n            continue;\r\n        }\r\n        if (Modifier.isStatic(method.getModifiers())) {\r\n            continue;\r\n        }\r\n        if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\r\n            if (method.getParameterTypes().length != 0) {\r\n                continue;\r\n            }\r\n            if (// \r\n            Collection.class.isAssignableFrom(method.getReturnType()) || // \r\n            Map.class.isAssignableFrom(method.getReturnType()) || // \r\n            AtomicBoolean.class == method.getReturnType() || // \r\n            AtomicInteger.class == method.getReturnType() || // \r\n            AtomicLong.class == method.getReturnType()) {\r\n                String propertyName;\r\n                JSONField annotation = method.getAnnotation(JSONField.class);\r\n                if (annotation != null && annotation.deserialize()) {\r\n                    continue;\r\n                }\r\n                if (annotation != null && annotation.name().length() > 0) {\r\n                    propertyName = annotation.name();\r\n                } else {\r\n                    propertyName = Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\r\n                }\r\n                FieldInfo fieldInfo = getField(fieldList, propertyName);\r\n                if (fieldInfo != null) {\r\n                    continue;\r\n                }\r\n                if (propertyNamingStrategy != null) {\r\n                    propertyName = propertyNamingStrategy.translate(propertyName);\r\n                }\r\n                add(fieldList, new FieldInfo(propertyName, method, null, clazz, type, 0, 0, 0, annotation, null, null));\r\n            }\r\n        }\r\n    }\r\n    return new JavaBeanInfo(clazz, builderClass, defaultConstructor, null, null, buildMethod, jsonType, fieldList);\r\n}", "class_name": "JavaBeanInfo", "qualified_method_name": "com.alibaba.fastjson.util.JavaBeanInfo.build", "qualified_signature": "com.alibaba.fastjson.util.JavaBeanInfo.build(java.lang.Class<?>, java.lang.reflect.Type, com.alibaba.fastjson.PropertyNamingStrategy)", "qualified_return_type": "com.alibaba.fastjson.util.JavaBeanInfo"}
{"java_doc": "", "method_name": "getDefaultConstructor", "return_type": "Constructor<?>", "signature": "getDefaultConstructor(Class)", "body_content": "{\r\n    if (Modifier.isAbstract(clazz.getModifiers())) {\r\n        return null;\r\n    }\r\n    Constructor<?> defaultConstructor = null;\r\n    final Constructor<?>[] constructors = clazz.getDeclaredConstructors();\r\n    for (Constructor<?> constructor : constructors) {\r\n        if (constructor.getParameterTypes().length == 0) {\r\n            defaultConstructor = constructor;\r\n            break;\r\n        }\r\n    }\r\n    if (defaultConstructor == null) {\r\n        if (clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers())) {\r\n            Class<?>[] types;\r\n            for (Constructor<?> constructor : constructors) {\r\n                if ((types = constructor.getParameterTypes()).length == 1 && types[0].equals(clazz.getDeclaringClass())) {\r\n                    defaultConstructor = constructor;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return defaultConstructor;\r\n}", "class_name": "JavaBeanInfo", "qualified_method_name": "com.alibaba.fastjson.util.JavaBeanInfo.getDefaultConstructor", "qualified_signature": "com.alibaba.fastjson.util.JavaBeanInfo.getDefaultConstructor(java.lang.Class<?>)", "qualified_return_type": "java.lang.reflect.Constructor<?>"}
{"java_doc": "", "method_name": "getCreatorConstructor", "return_type": "Constructor<?>", "signature": "getCreatorConstructor(Class)", "body_content": "{\r\n    Constructor<?> creatorConstructor = null;\r\n    for (Constructor<?> constructor : clazz.getDeclaredConstructors()) {\r\n        JSONCreator annotation = constructor.getAnnotation(JSONCreator.class);\r\n        if (annotation != null) {\r\n            if (creatorConstructor != null) {\r\n                throw new JSONException(\"multi-JSONCreator\");\r\n            }\r\n            creatorConstructor = constructor;\r\n            // 不应该break，否则多个构造方法上存在 JSONCreator 注解时，并不会触发上述异常抛出\r\n        }\r\n    }\r\n    return creatorConstructor;\r\n}", "class_name": "JavaBeanInfo", "qualified_method_name": "com.alibaba.fastjson.util.JavaBeanInfo.getCreatorConstructor", "qualified_signature": "com.alibaba.fastjson.util.JavaBeanInfo.getCreatorConstructor(java.lang.Class<?>)", "qualified_return_type": "java.lang.reflect.Constructor<?>"}
{"java_doc": "", "method_name": "getFactoryMethod", "return_type": "Method", "signature": "getFactoryMethod(Class, Method[])", "body_content": "{\r\n    Method factoryMethod = null;\r\n    for (Method method : methods) {\r\n        if (!Modifier.isStatic(method.getModifiers())) {\r\n            continue;\r\n        }\r\n        if (!clazz.isAssignableFrom(method.getReturnType())) {\r\n            continue;\r\n        }\r\n        JSONCreator annotation = method.getAnnotation(JSONCreator.class);\r\n        if (annotation != null) {\r\n            if (factoryMethod != null) {\r\n                throw new JSONException(\"multi-JSONCreator\");\r\n            }\r\n            factoryMethod = method;\r\n            // 不应该break，否则多个静态工厂方法上存在 JSONCreator 注解时，并不会触发上述异常抛出\r\n        }\r\n    }\r\n    return factoryMethod;\r\n}", "class_name": "JavaBeanInfo", "qualified_method_name": "com.alibaba.fastjson.util.JavaBeanInfo.getFactoryMethod", "qualified_signature": "com.alibaba.fastjson.util.JavaBeanInfo.getFactoryMethod(java.lang.Class<?>, java.lang.reflect.Method[])", "qualified_return_type": "java.lang.reflect.Method"}
{"java_doc": "", "method_name": "getBuilderClass", "return_type": "Class<?>", "signature": "getBuilderClass(JSONType)", "body_content": "{\r\n    if (type == null) {\r\n        return null;\r\n    }\r\n    Class<?> builderClass = type.builder();\r\n    if (builderClass == Void.class) {\r\n        return null;\r\n    }\r\n    return builderClass;\r\n}", "class_name": "JavaBeanInfo", "qualified_method_name": "com.alibaba.fastjson.util.JavaBeanInfo.getBuilderClass", "qualified_signature": "com.alibaba.fastjson.util.JavaBeanInfo.getBuilderClass(com.alibaba.fastjson.annotation.JSONType)", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "process", "return_type": "Object", "signature": "process(Object, String, Object)", "body_content": "", "class_name": "ValueFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.ValueFilter.process", "qualified_signature": "com.alibaba.fastjson.serializer.ValueFilter.process(java.lang.Object, java.lang.String, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "\r\n@return the serializeConfig\r\n", "method_name": "getSerializeConfig", "return_type": "SerializeConfig", "signature": "getSerializeConfig()", "body_content": "{\r\n    return serializeConfig;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.getSerializeConfig", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.getSerializeConfig()", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializeConfig"}
{"java_doc": "\r\n@param serializeConfig the serializeConfig to set\r\n", "method_name": "setSerializeConfig", "return_type": "void", "signature": "setSerializeConfig(SerializeConfig)", "body_content": "{\r\n    this.serializeConfig = serializeConfig;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.setSerializeConfig", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.setSerializeConfig(com.alibaba.fastjson.serializer.SerializeConfig)", "qualified_return_type": "void"}
{"java_doc": "\r\n@return the parserConfig\r\n", "method_name": "getParserConfig", "return_type": "ParserConfig", "signature": "getParserConfig()", "body_content": "{\r\n    return parserConfig;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.getParserConfig", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.getParserConfig()", "qualified_return_type": "com.alibaba.fastjson.parser.ParserConfig"}
{"java_doc": "\r\n@param parserConfig the parserConfig to set\r\n", "method_name": "setParserConfig", "return_type": "void", "signature": "setParserConfig(ParserConfig)", "body_content": "{\r\n    this.parserConfig = parserConfig;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.setParserConfig", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.setParserConfig(com.alibaba.fastjson.parser.ParserConfig)", "qualified_return_type": "void"}
{"java_doc": "\r\n@return the serializerFeatures\r\n", "method_name": "getSerializerFeatures", "return_type": "SerializerFeature[]", "signature": "getSerializerFeatures()", "body_content": "{\r\n    return serializerFeatures;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.getSerializerFeatures", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.getSerializerFeatures()", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializerFeature[]"}
{"java_doc": "\r\n@param serializerFeatures the serializerFeatures to set\r\n", "method_name": "setSerializerFeatures", "return_type": "void", "signature": "setSerializerFeatures(SerializerFeature[])", "body_content": "{\r\n    this.serializerFeatures = serializerFeatures;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.setSerializerFeatures", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.setSerializerFeatures(com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "void"}
{"java_doc": "\r\n@return the serializeFilters\r\n", "method_name": "getSerializeFilters", "return_type": "SerializeFilter[]", "signature": "getSerializeFilters()", "body_content": "{\r\n    return serializeFilters;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.getSerializeFilters", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.getSerializeFilters()", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializeFilter[]"}
{"java_doc": "\r\n@param serializeFilters the serializeFilters to set\r\n", "method_name": "setSerializeFilters", "return_type": "void", "signature": "setSerializeFilters(SerializeFilter[])", "body_content": "{\r\n    this.serializeFilters = serializeFilters;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.setSerializeFilters", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.setSerializeFilters(com.alibaba.fastjson.serializer.SerializeFilter...)", "qualified_return_type": "void"}
{"java_doc": "\r\n@return the features\r\n", "method_name": "getFeatures", "return_type": "Feature[]", "signature": "getFeatures()", "body_content": "{\r\n    return features;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.getFeatures", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.getFeatures()", "qualified_return_type": "com.alibaba.fastjson.parser.Feature[]"}
{"java_doc": "\r\n@param features the features to set\r\n", "method_name": "setFeatures", "return_type": "void", "signature": "setFeatures(Feature[])", "body_content": "{\r\n    this.features = features;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.setFeatures", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.setFeatures(com.alibaba.fastjson.parser.Feature...)", "qualified_return_type": "void"}
{"java_doc": "\r\n@return the classSerializeFilters\r\n", "method_name": "getClassSerializeFilters", "return_type": "Map<Class<?>, SerializeFilter>", "signature": "getClassSerializeFilters()", "body_content": "{\r\n    return classSerializeFilters;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.getClassSerializeFilters", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.getClassSerializeFilters()", "qualified_return_type": "java.util.Map<java.lang.Class<?>, com.alibaba.fastjson.serializer.SerializeFilter>"}
{"java_doc": "\r\n@param classSerializeFilters the classSerializeFilters to set\r\n", "method_name": "setClassSerializeFilters", "return_type": "void", "signature": "setClassSerializeFilters(Map)", "body_content": "{\r\n    if (classSerializeFilters == null)\r\n        return;\r\n    for (Entry<Class<?>, SerializeFilter> entry : classSerializeFilters.entrySet()) this.serializeConfig.addFilter(entry.getKey(), entry.getValue());\r\n    this.classSerializeFilters = classSerializeFilters;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.setClassSerializeFilters", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.setClassSerializeFilters(java.util.Map<java.lang.Class<?>, com.alibaba.fastjson.serializer.SerializeFilter>)", "qualified_return_type": "void"}
{"java_doc": "\r\n@return the dateFormat\r\n", "method_name": "getDateFormat", "return_type": "String", "signature": "getDateFormat()", "body_content": "{\r\n    return dateFormat;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.getDateFormat", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.getDateFormat()", "qualified_return_type": "java.lang.String"}
{"java_doc": "\r\n@param dateFormat the dateFormat to set\r\n", "method_name": "setDateFormat", "return_type": "void", "signature": "setDateFormat(String)", "body_content": "{\r\n    this.dateFormat = dateFormat;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.setDateFormat", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.setDateFormat(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "\r\n@return the charset\r\n", "method_name": "getCharset", "return_type": "Charset", "signature": "getCharset()", "body_content": "{\r\n    return charset;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.getCharset", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.getCharset()", "qualified_return_type": "java.nio.charset.Charset"}
{"java_doc": "\r\n@param charset the charset to set\r\n", "method_name": "setCharset", "return_type": "void", "signature": "setCharset(Charset)", "body_content": "{\r\n    this.charset = charset;\r\n}", "class_name": "FastJsonConfig", "qualified_method_name": "com.alibaba.fastjson.support.config.FastJsonConfig.setCharset", "qualified_signature": "com.alibaba.fastjson.support.config.FastJsonConfig.setCharset(java.nio.charset.Charset)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "config", "return_type": "void", "signature": "config(SerializerFeature, boolean)", "body_content": "{\r\n    this.writer.config(feature, state);\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.config", "qualified_signature": "com.alibaba.fastjson.JSONWriter.config(com.alibaba.fastjson.serializer.SerializerFeature, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "startObject", "return_type": "void", "signature": "startObject()", "body_content": "{\r\n    if (context != null) {\r\n        beginStructure();\r\n    }\r\n    context = new JSONStreamContext(context, JSONStreamContext.StartObject);\r\n    writer.write('{');\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.startObject", "qualified_signature": "com.alibaba.fastjson.JSONWriter.startObject()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "endObject", "return_type": "void", "signature": "endObject()", "body_content": "{\r\n    writer.write('}');\r\n    endStructure();\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.endObject", "qualified_signature": "com.alibaba.fastjson.JSONWriter.endObject()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeKey", "return_type": "void", "signature": "writeKey(String)", "body_content": "{\r\n    writeObject(key);\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.writeKey", "qualified_signature": "com.alibaba.fastjson.JSONWriter.writeKey(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeValue", "return_type": "void", "signature": "writeValue(Object)", "body_content": "{\r\n    writeObject(object);\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.writeValue", "qualified_signature": "com.alibaba.fastjson.JSONWriter.writeValue(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeObject", "return_type": "void", "signature": "writeObject(String)", "body_content": "{\r\n    beforeWrite();\r\n    serializer.write(object);\r\n    afterWriter();\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.writeObject", "qualified_signature": "com.alibaba.fastjson.JSONWriter.writeObject(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeObject", "return_type": "void", "signature": "writeObject(Object)", "body_content": "{\r\n    beforeWrite();\r\n    serializer.write(object);\r\n    afterWriter();\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.writeObject", "qualified_signature": "com.alibaba.fastjson.JSONWriter.writeObject(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "startArray", "return_type": "void", "signature": "startArray()", "body_content": "{\r\n    if (context != null) {\r\n        beginStructure();\r\n    }\r\n    context = new JSONStreamContext(context, StartArray);\r\n    writer.write('[');\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.startArray", "qualified_signature": "com.alibaba.fastjson.JSONWriter.startArray()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "beginStructure", "return_type": "void", "signature": "beginStructure()", "body_content": "{\r\n    final int state = context.state;\r\n    switch(context.state) {\r\n        case PropertyKey:\r\n            writer.write(':');\r\n            break;\r\n        case ArrayValue:\r\n            writer.write(',');\r\n            break;\r\n        case StartObject:\r\n            break;\r\n        case StartArray:\r\n            break;\r\n        default:\r\n            throw new JSONException(\"illegal state : \" + state);\r\n    }\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.beginStructure", "qualified_signature": "com.alibaba.fastjson.JSONWriter.beginStructure()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "endArray", "return_type": "void", "signature": "endArray()", "body_content": "{\r\n    writer.write(']');\r\n    endStructure();\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.endArray", "qualified_signature": "com.alibaba.fastjson.JSONWriter.endArray()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "endStructure", "return_type": "void", "signature": "endStructure()", "body_content": "{\r\n    context = context.parent;\r\n    if (context == null) {\r\n        return;\r\n    }\r\n    int newState = -1;\r\n    switch(context.state) {\r\n        case PropertyKey:\r\n            newState = PropertyValue;\r\n            break;\r\n        case StartArray:\r\n            newState = ArrayValue;\r\n            break;\r\n        case ArrayValue:\r\n            break;\r\n        case StartObject:\r\n            newState = PropertyKey;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    if (newState != -1) {\r\n        context.state = newState;\r\n    }\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.endStructure", "qualified_signature": "com.alibaba.fastjson.JSONWriter.endStructure()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "beforeWrite", "return_type": "void", "signature": "beforeWrite()", "body_content": "{\r\n    if (context == null) {\r\n        return;\r\n    }\r\n    switch(context.state) {\r\n        case StartObject:\r\n        case StartArray:\r\n            break;\r\n        case PropertyKey:\r\n            writer.write(':');\r\n            break;\r\n        case PropertyValue:\r\n            writer.write(',');\r\n            break;\r\n        case ArrayValue:\r\n            writer.write(',');\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.beforeWrite", "qualified_signature": "com.alibaba.fastjson.JSONWriter.beforeWrite()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "afterWriter", "return_type": "void", "signature": "afterWriter()", "body_content": "{\r\n    if (context == null) {\r\n        return;\r\n    }\r\n    final int state = context.state;\r\n    int newState = -1;\r\n    switch(state) {\r\n        case PropertyKey:\r\n            newState = PropertyValue;\r\n            break;\r\n        case StartObject:\r\n        case PropertyValue:\r\n            newState = PropertyKey;\r\n            break;\r\n        case StartArray:\r\n            newState = ArrayValue;\r\n            break;\r\n        case ArrayValue:\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    if (newState != -1) {\r\n        context.state = newState;\r\n    }\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.afterWriter", "qualified_signature": "com.alibaba.fastjson.JSONWriter.afterWriter()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "flush", "return_type": "void", "signature": "flush()", "body_content": "{\r\n    writer.flush();\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.flush", "qualified_signature": "com.alibaba.fastjson.JSONWriter.flush()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "close", "return_type": "void", "signature": "close()", "body_content": "{\r\n    writer.close();\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.close", "qualified_signature": "com.alibaba.fastjson.JSONWriter.close()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeStartObject", "return_type": "void", "signature": "writeStartObject()", "body_content": "{\r\n    startObject();\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.writeStartObject", "qualified_signature": "com.alibaba.fastjson.JSONWriter.writeStartObject()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeEndObject", "return_type": "void", "signature": "writeEndObject()", "body_content": "{\r\n    endObject();\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.writeEndObject", "qualified_signature": "com.alibaba.fastjson.JSONWriter.writeEndObject()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeStartArray", "return_type": "void", "signature": "writeStartArray()", "body_content": "{\r\n    startArray();\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.writeStartArray", "qualified_signature": "com.alibaba.fastjson.JSONWriter.writeStartArray()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "writeEndArray", "return_type": "void", "signature": "writeEndArray()", "body_content": "{\r\n    endArray();\r\n}", "class_name": "JSONWriter", "qualified_method_name": "com.alibaba.fastjson.JSONWriter.writeEndArray", "qualified_signature": "com.alibaba.fastjson.JSONWriter.writeEndArray()", "qualified_return_type": "void"}
{"java_doc": "fastjson invokes this call-back method during deserialization when it encounters a field of the\r\nspecified type.\r\n<p>In the implementation of this call-back method, you should consider invoking\r\n{@link JSON#parseObject(String, Type, Feature[])} method to create objects\r\nfor any non-trivial field of the returned object.\r\n\r\n@param parser context DefaultJSONParser being deserialized\r\n@param type The type of the Object to deserialize to\r\n@param fieldName parent object field name\r\n@return a deserialized object of the specified type which is a subclass of {@code T}\r\n", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "", "class_name": "ObjectDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "", "class_name": "ObjectDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "isAndroid", "return_type": "boolean", "signature": "isAndroid(String)", "body_content": "{\r\n    if (vmName == null) {\r\n        // default is false\r\n        return false;\r\n    }\r\n    String lowerVMName = vmName.toLowerCase();\r\n    return // \r\n    lowerVMName.contains(\"dalvik\") || // aliyun-vm name\r\n    lowerVMName.contains(\"lemur\");\r\n}", "class_name": "ASMUtils", "qualified_method_name": "com.alibaba.fastjson.util.ASMUtils.isAndroid", "qualified_signature": "com.alibaba.fastjson.util.ASMUtils.isAndroid(java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "desc", "return_type": "String", "signature": "desc(Method)", "body_content": "{\r\n    Class<?>[] types = method.getParameterTypes();\r\n    StringBuilder buf = new StringBuilder((types.length + 1) << 4);\r\n    buf.append('(');\r\n    for (int i = 0; i < types.length; ++i) {\r\n        buf.append(desc(types[i]));\r\n    }\r\n    buf.append(')');\r\n    buf.append(desc(method.getReturnType()));\r\n    return buf.toString();\r\n}", "class_name": "ASMUtils", "qualified_method_name": "com.alibaba.fastjson.util.ASMUtils.desc", "qualified_signature": "com.alibaba.fastjson.util.ASMUtils.desc(java.lang.reflect.Method)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "desc", "return_type": "String", "signature": "desc(Class)", "body_content": "{\r\n    if (returnType.isPrimitive()) {\r\n        return getPrimitiveLetter(returnType);\r\n    } else if (returnType.isArray()) {\r\n        return \"[\" + desc(returnType.getComponentType());\r\n    } else {\r\n        return \"L\" + type(returnType) + \";\";\r\n    }\r\n}", "class_name": "ASMUtils", "qualified_method_name": "com.alibaba.fastjson.util.ASMUtils.desc", "qualified_signature": "com.alibaba.fastjson.util.ASMUtils.desc(java.lang.Class<?>)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "type", "return_type": "String", "signature": "type(Class)", "body_content": "{\r\n    if (parameterType.isArray()) {\r\n        return \"[\" + desc(parameterType.getComponentType());\r\n    } else {\r\n        if (!parameterType.isPrimitive()) {\r\n            String clsName = parameterType.getName();\r\n            // 直接基于字符串替换，不使用正则替换\r\n            return clsName.replace('.', '/');\r\n        } else {\r\n            return getPrimitiveLetter(parameterType);\r\n        }\r\n    }\r\n}", "class_name": "ASMUtils", "qualified_method_name": "com.alibaba.fastjson.util.ASMUtils.type", "qualified_signature": "com.alibaba.fastjson.util.ASMUtils.type(java.lang.Class<?>)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getPrimitiveLetter", "return_type": "String", "signature": "getPrimitiveLetter(Class)", "body_content": "{\r\n    if (Integer.TYPE == type) {\r\n        return \"I\";\r\n    } else if (Void.TYPE == type) {\r\n        return \"V\";\r\n    } else if (Boolean.TYPE == type) {\r\n        return \"Z\";\r\n    } else if (Character.TYPE == type) {\r\n        return \"C\";\r\n    } else if (Byte.TYPE == type) {\r\n        return \"B\";\r\n    } else if (Short.TYPE == type) {\r\n        return \"S\";\r\n    } else if (Float.TYPE == type) {\r\n        return \"F\";\r\n    } else if (Long.TYPE == type) {\r\n        return \"J\";\r\n    } else if (Double.TYPE == type) {\r\n        return \"D\";\r\n    }\r\n    throw new IllegalStateException(\"Type: \" + type.getCanonicalName() + \" is not a primitive type\");\r\n}", "class_name": "ASMUtils", "qualified_method_name": "com.alibaba.fastjson.util.ASMUtils.getPrimitiveLetter", "qualified_signature": "com.alibaba.fastjson.util.ASMUtils.getPrimitiveLetter(java.lang.Class<?>)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getMethodType", "return_type": "Type", "signature": "getMethodType(Class, String)", "body_content": "{\r\n    try {\r\n        Method method = clazz.getMethod(methodName);\r\n        return method.getGenericReturnType();\r\n    } catch (Exception ex) {\r\n        return null;\r\n    }\r\n}", "class_name": "ASMUtils", "qualified_method_name": "com.alibaba.fastjson.util.ASMUtils.getMethodType", "qualified_signature": "com.alibaba.fastjson.util.ASMUtils.getMethodType(java.lang.Class<?>, java.lang.String)", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "", "method_name": "checkName", "return_type": "boolean", "signature": "checkName(String)", "body_content": "{\r\n    for (int i = 0; i < name.length(); ++i) {\r\n        char c = name.charAt(i);\r\n        if (c < '\\001' || c > '\\177' || c == '.') {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "class_name": "ASMUtils", "qualified_method_name": "com.alibaba.fastjson.util.ASMUtils.checkName", "qualified_signature": "com.alibaba.fastjson.util.ASMUtils.checkName(java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "load", "return_type": "Set<T>", "signature": "load(Class, ClassLoader)", "body_content": "{\r\n    if (classLoader == null) {\r\n        return Collections.emptySet();\r\n    }\r\n    Set<T> services = new HashSet<T>();\r\n    String className = clazz.getName();\r\n    String path = PREFIX + className;\r\n    Set<String> serviceNames = new HashSet<String>();\r\n    try {\r\n        Enumeration<URL> urls = classLoader.getResources(path);\r\n        while (urls.hasMoreElements()) {\r\n            URL url = urls.nextElement();\r\n            if (loadedUrls.contains(url.toString())) {\r\n                continue;\r\n            }\r\n            load(url, serviceNames);\r\n            loadedUrls.add(url.toString());\r\n        }\r\n    } catch (IOException ex) {\r\n        // skip\r\n    }\r\n    for (String serviceName : serviceNames) {\r\n        try {\r\n            Class<?> serviceClass = classLoader.loadClass(serviceName);\r\n            T service = (T) serviceClass.newInstance();\r\n            services.add(service);\r\n        } catch (Exception e) {\r\n            // skip\r\n        }\r\n    }\r\n    return services;\r\n}", "class_name": "ServiceLoader", "qualified_method_name": "com.alibaba.fastjson.util.ServiceLoader.load", "qualified_signature": "com.alibaba.fastjson.util.ServiceLoader.load(java.lang.Class<T>, java.lang.ClassLoader)", "qualified_return_type": "java.util.Set<T>"}
{"java_doc": "", "method_name": "load", "return_type": "void", "signature": "load(URL, Set)", "body_content": "{\r\n    InputStream is = null;\r\n    BufferedReader reader = null;\r\n    try {\r\n        is = url.openStream();\r\n        reader = new BufferedReader(new InputStreamReader(is, \"utf-8\"));\r\n        for (; ; ) {\r\n            String line = reader.readLine();\r\n            if (line == null) {\r\n                break;\r\n            }\r\n            int ci = line.indexOf('#');\r\n            if (ci >= 0) {\r\n                line = line.substring(0, ci);\r\n            }\r\n            line = line.trim();\r\n            if (line.length() == 0) {\r\n                continue;\r\n            }\r\n            set.add(line);\r\n        }\r\n    } finally {\r\n        IOUtils.close(reader);\r\n        IOUtils.close(is);\r\n    }\r\n}", "class_name": "ServiceLoader", "qualified_method_name": "com.alibaba.fastjson.util.ServiceLoader.load", "qualified_signature": "com.alibaba.fastjson.util.ServiceLoader.load(java.net.URL, java.util.Set<java.lang.String>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    return (T) deserialze(parser);\r\n}", "class_name": "CharArrayCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.CharArrayCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.CharArrayCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser)", "body_content": "{\r\n    final JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n        String val = lexer.stringVal();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return (T) val.toCharArray();\r\n    }\r\n    if (lexer.token() == JSONToken.LITERAL_INT) {\r\n        Number val = lexer.integerValue();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return (T) val.toString().toCharArray();\r\n    }\r\n    Object value = parser.parse();\r\n    if (value instanceof String) {\r\n        return (T) ((String) value).toCharArray();\r\n    }\r\n    if (value instanceof Collection) {\r\n        Collection<?> collection = (Collection) value;\r\n        boolean accept = true;\r\n        for (Object item : collection) {\r\n            if (item instanceof String) {\r\n                int itemLength = ((String) item).length();\r\n                if (itemLength != 1) {\r\n                    accept = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!accept) {\r\n            throw new JSONException(\"can not cast to char[]\");\r\n        }\r\n    }\r\n    return // \r\n    value == null ? // \r\n    null : (T) JSON.toJSONString(value).toCharArray();\r\n}", "class_name": "CharArrayCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.CharArrayCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.CharArrayCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_STRING;\r\n}", "class_name": "CharArrayCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.CharArrayCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.CharArrayCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "castToString", "return_type": "String", "signature": "castToString(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    return value.toString();\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToString", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToString(java.lang.Object)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "castToByte", "return_type": "Byte", "signature": "castToByte(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (value instanceof Number) {\r\n        return ((Number) value).byteValue();\r\n    }\r\n    if (value instanceof String) {\r\n        String strVal = (String) value;\r\n        if (// \r\n        strVal.length() == 0 || // \r\n        \"null\".equals(strVal) || \"NULL\".equals(strVal)) {\r\n            return null;\r\n        }\r\n        return Byte.parseByte(strVal);\r\n    }\r\n    throw new JSONException(\"can not cast to byte, value : \" + value);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToByte", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToByte(java.lang.Object)", "qualified_return_type": "java.lang.Byte"}
{"java_doc": "", "method_name": "castToChar", "return_type": "Character", "signature": "castToChar(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (value instanceof Character) {\r\n        return (Character) value;\r\n    }\r\n    if (value instanceof String) {\r\n        String strVal = (String) value;\r\n        if (strVal.length() == 0) {\r\n            return null;\r\n        }\r\n        if (strVal.length() != 1) {\r\n            throw new JSONException(\"can not cast to char, value : \" + value);\r\n        }\r\n        return strVal.charAt(0);\r\n    }\r\n    throw new JSONException(\"can not cast to char, value : \" + value);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToChar", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToChar(java.lang.Object)", "qualified_return_type": "java.lang.Character"}
{"java_doc": "", "method_name": "castToShort", "return_type": "Short", "signature": "castToShort(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (value instanceof Number) {\r\n        return ((Number) value).shortValue();\r\n    }\r\n    if (value instanceof String) {\r\n        String strVal = (String) value;\r\n        if (// \r\n        strVal.length() == 0 || // \r\n        \"null\".equals(strVal) || \"NULL\".equals(strVal)) {\r\n            return null;\r\n        }\r\n        return Short.parseShort(strVal);\r\n    }\r\n    throw new JSONException(\"can not cast to short, value : \" + value);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToShort", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToShort(java.lang.Object)", "qualified_return_type": "java.lang.Short"}
{"java_doc": "", "method_name": "castToBigDecimal", "return_type": "BigDecimal", "signature": "castToBigDecimal(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (value instanceof BigDecimal) {\r\n        return (BigDecimal) value;\r\n    }\r\n    if (value instanceof BigInteger) {\r\n        return new BigDecimal((BigInteger) value);\r\n    }\r\n    String strVal = value.toString();\r\n    if (strVal.length() == 0) {\r\n        return null;\r\n    }\r\n    return new BigDecimal(strVal);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToBigDecimal", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToBigDecimal(java.lang.Object)", "qualified_return_type": "java.math.BigDecimal"}
{"java_doc": "", "method_name": "castToBigInteger", "return_type": "BigInteger", "signature": "castToBigInteger(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (value instanceof BigInteger) {\r\n        return (BigInteger) value;\r\n    }\r\n    if (value instanceof Float || value instanceof Double) {\r\n        return BigInteger.valueOf(((Number) value).longValue());\r\n    }\r\n    String strVal = value.toString();\r\n    if (// \r\n    strVal.length() == 0 || // \r\n    \"null\".equals(strVal) || \"NULL\".equals(strVal)) {\r\n        return null;\r\n    }\r\n    return new BigInteger(strVal);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToBigInteger", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToBigInteger(java.lang.Object)", "qualified_return_type": "java.math.BigInteger"}
{"java_doc": "", "method_name": "castToFloat", "return_type": "Float", "signature": "castToFloat(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (value instanceof Number) {\r\n        return ((Number) value).floatValue();\r\n    }\r\n    if (value instanceof String) {\r\n        String strVal = value.toString();\r\n        if (// \r\n        strVal.length() == 0 || // \r\n        \"null\".equals(strVal) || \"NULL\".equals(strVal)) {\r\n            return null;\r\n        }\r\n        if (strVal.indexOf(',') != 0) {\r\n            strVal = strVal.replaceAll(\",\", \"\");\r\n        }\r\n        return Float.parseFloat(strVal);\r\n    }\r\n    throw new JSONException(\"can not cast to float, value : \" + value);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToFloat", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToFloat(java.lang.Object)", "qualified_return_type": "java.lang.Float"}
{"java_doc": "", "method_name": "castToDouble", "return_type": "Double", "signature": "castToDouble(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (value instanceof Number) {\r\n        return ((Number) value).doubleValue();\r\n    }\r\n    if (value instanceof String) {\r\n        String strVal = value.toString();\r\n        if (// \r\n        strVal.length() == 0 || // \r\n        \"null\".equals(strVal) || \"NULL\".equals(strVal)) {\r\n            return null;\r\n        }\r\n        if (strVal.indexOf(',') != 0) {\r\n            strVal = strVal.replaceAll(\",\", \"\");\r\n        }\r\n        return Double.parseDouble(strVal);\r\n    }\r\n    throw new JSONException(\"can not cast to double, value : \" + value);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToDouble", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToDouble(java.lang.Object)", "qualified_return_type": "java.lang.Double"}
{"java_doc": "", "method_name": "castToDate", "return_type": "Date", "signature": "castToDate(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (value instanceof Date) {\r\n        // 使用频率最高的，应优先处理\r\n        return (Date) value;\r\n    }\r\n    if (value instanceof Calendar) {\r\n        return ((Calendar) value).getTime();\r\n    }\r\n    long longValue = -1;\r\n    if (value instanceof Number) {\r\n        longValue = ((Number) value).longValue();\r\n        return new Date(longValue);\r\n    }\r\n    if (value instanceof String) {\r\n        String strVal = (String) value;\r\n        JSONScanner dateLexer = new JSONScanner(strVal);\r\n        try {\r\n            if (dateLexer.scanISO8601DateIfMatch(false)) {\r\n                Calendar calendar = dateLexer.getCalendar();\r\n                return calendar.getTime();\r\n            }\r\n        } finally {\r\n            dateLexer.close();\r\n        }\r\n        if (strVal.startsWith(\"/Date(\") && strVal.endsWith(\")/\")) {\r\n            String dotnetDateStr = strVal.substring(6, strVal.length() - 2);\r\n            strVal = dotnetDateStr;\r\n        }\r\n        if (strVal.indexOf('-') != -1) {\r\n            String format;\r\n            if (strVal.length() == JSON.DEFFAULT_DATE_FORMAT.length()) {\r\n                format = JSON.DEFFAULT_DATE_FORMAT;\r\n            } else if (strVal.length() == 10) {\r\n                format = \"yyyy-MM-dd\";\r\n            } else if (strVal.length() == \"yyyy-MM-dd HH:mm:ss\".length()) {\r\n                format = \"yyyy-MM-dd HH:mm:ss\";\r\n            } else {\r\n                format = \"yyyy-MM-dd HH:mm:ss.SSS\";\r\n            }\r\n            SimpleDateFormat dateFormat = new SimpleDateFormat(format, JSON.defaultLocale);\r\n            dateFormat.setTimeZone(JSON.defaultTimeZone);\r\n            try {\r\n                return (Date) dateFormat.parse(strVal);\r\n            } catch (ParseException e) {\r\n                throw new JSONException(\"can not cast to Date, value : \" + strVal);\r\n            }\r\n        }\r\n        if (strVal.length() == 0) {\r\n            return null;\r\n        }\r\n        longValue = Long.parseLong(strVal);\r\n    }\r\n    if (longValue < 0) {\r\n        Class<?> clazz = value.getClass();\r\n        if (\"oracle.sql.TIMESTAMP\".equals(clazz.getName())) {\r\n            if (oracleTimestampMethod == null && !oracleTimestampMethodInited) {\r\n                try {\r\n                    oracleTimestampMethod = clazz.getMethod(\"toJdbc\");\r\n                } catch (NoSuchMethodException e) {\r\n                    // skip\r\n                } finally {\r\n                    oracleTimestampMethodInited = true;\r\n                }\r\n            }\r\n            Object result;\r\n            try {\r\n                result = oracleTimestampMethod.invoke(value);\r\n            } catch (Exception e) {\r\n                throw new JSONException(\"can not cast oracle.sql.TIMESTAMP to Date\", e);\r\n            }\r\n            return (Date) result;\r\n        }\r\n        if (\"oracle.sql.DATE\".equals(clazz.getName())) {\r\n            if (oracleDateMethod == null && !oracleDateMethodInited) {\r\n                try {\r\n                    oracleDateMethod = clazz.getMethod(\"toJdbc\");\r\n                } catch (NoSuchMethodException e) {\r\n                    // skip\r\n                } finally {\r\n                    oracleDateMethodInited = true;\r\n                }\r\n            }\r\n            Object result;\r\n            try {\r\n                result = oracleDateMethod.invoke(value);\r\n            } catch (Exception e) {\r\n                throw new JSONException(\"can not cast oracle.sql.DATE to Date\", e);\r\n            }\r\n            return (Date) result;\r\n        }\r\n        throw new JSONException(\"can not cast to Date, value : \" + value);\r\n    }\r\n    return new Date(longValue);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToDate", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToDate(java.lang.Object)", "qualified_return_type": "java.util.Date"}
{"java_doc": "", "method_name": "castToSqlDate", "return_type": "java.sql.Date", "signature": "castToSqlDate(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (value instanceof java.sql.Date) {\r\n        return (java.sql.Date) value;\r\n    }\r\n    if (value instanceof java.util.Date) {\r\n        return new java.sql.Date(((java.util.Date) value).getTime());\r\n    }\r\n    if (value instanceof Calendar) {\r\n        return new java.sql.Date(((Calendar) value).getTimeInMillis());\r\n    }\r\n    long longValue = 0;\r\n    if (value instanceof Number) {\r\n        longValue = ((Number) value).longValue();\r\n    }\r\n    if (value instanceof String) {\r\n        String strVal = (String) value;\r\n        if (// \r\n        strVal.length() == 0 || // \r\n        \"null\".equals(strVal) || \"NULL\".equals(strVal)) {\r\n            return null;\r\n        }\r\n        longValue = Long.parseLong(strVal);\r\n    }\r\n    if (longValue <= 0) {\r\n        // TODO 忽略 1970-01-01 之前的时间处理？\r\n        throw new JSONException(\"can not cast to Date, value : \" + value);\r\n    }\r\n    return new java.sql.Date(longValue);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToSqlDate", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToSqlDate(java.lang.Object)", "qualified_return_type": "java.sql.Date"}
{"java_doc": "", "method_name": "castToTimestamp", "return_type": "java.sql.Timestamp", "signature": "castToTimestamp(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (value instanceof Calendar) {\r\n        return new java.sql.Timestamp(((Calendar) value).getTimeInMillis());\r\n    }\r\n    if (value instanceof java.sql.Timestamp) {\r\n        return (java.sql.Timestamp) value;\r\n    }\r\n    if (value instanceof java.util.Date) {\r\n        return new java.sql.Timestamp(((java.util.Date) value).getTime());\r\n    }\r\n    long longValue = 0;\r\n    if (value instanceof Number) {\r\n        longValue = ((Number) value).longValue();\r\n    }\r\n    if (value instanceof String) {\r\n        String strVal = (String) value;\r\n        if (// \r\n        strVal.length() == 0 || // \r\n        \"null\".equals(strVal) || \"NULL\".equals(strVal)) {\r\n            return null;\r\n        }\r\n        longValue = Long.parseLong(strVal);\r\n    }\r\n    if (longValue <= 0) {\r\n        throw new JSONException(\"can not cast to Date, value : \" + value);\r\n    }\r\n    return new java.sql.Timestamp(longValue);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToTimestamp", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToTimestamp(java.lang.Object)", "qualified_return_type": "java.sql.Timestamp"}
{"java_doc": "", "method_name": "castToLong", "return_type": "Long", "signature": "castToLong(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (value instanceof Number) {\r\n        return ((Number) value).longValue();\r\n    }\r\n    if (value instanceof String) {\r\n        String strVal = (String) value;\r\n        if (// \r\n        strVal.length() == 0 || // \r\n        \"null\".equals(strVal) || \"NULL\".equals(strVal)) {\r\n            return null;\r\n        }\r\n        if (strVal.indexOf(',') != 0) {\r\n            strVal = strVal.replaceAll(\",\", \"\");\r\n        }\r\n        try {\r\n            return Long.parseLong(strVal);\r\n        } catch (NumberFormatException ex) {\r\n            // \r\n        }\r\n        JSONScanner dateParser = new JSONScanner(strVal);\r\n        Calendar calendar = null;\r\n        if (dateParser.scanISO8601DateIfMatch(false)) {\r\n            calendar = dateParser.getCalendar();\r\n        }\r\n        dateParser.close();\r\n        if (calendar != null) {\r\n            return calendar.getTimeInMillis();\r\n        }\r\n    }\r\n    throw new JSONException(\"can not cast to long, value : \" + value);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToLong", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToLong(java.lang.Object)", "qualified_return_type": "java.lang.Long"}
{"java_doc": "", "method_name": "castToInt", "return_type": "Integer", "signature": "castToInt(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (value instanceof Integer) {\r\n        return (Integer) value;\r\n    }\r\n    if (value instanceof Number) {\r\n        return ((Number) value).intValue();\r\n    }\r\n    if (value instanceof String) {\r\n        String strVal = (String) value;\r\n        if (// \r\n        strVal.length() == 0 || // \r\n        \"null\".equals(strVal) || \"NULL\".equals(strVal)) {\r\n            return null;\r\n        }\r\n        if (strVal.indexOf(',') != 0) {\r\n            strVal = strVal.replaceAll(\",\", \"\");\r\n        }\r\n        return Integer.parseInt(strVal);\r\n    }\r\n    if (value instanceof Boolean) {\r\n        return ((Boolean) value).booleanValue() ? 1 : 0;\r\n    }\r\n    throw new JSONException(\"can not cast to int, value : \" + value);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToInt", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToInt(java.lang.Object)", "qualified_return_type": "java.lang.Integer"}
{"java_doc": "", "method_name": "castToBytes", "return_type": "byte[]", "signature": "castToBytes(Object)", "body_content": "{\r\n    if (value instanceof byte[]) {\r\n        return (byte[]) value;\r\n    }\r\n    if (value instanceof String) {\r\n        return IOUtils.decodeBase64((String) value);\r\n    }\r\n    throw new JSONException(\"can not cast to int, value : \" + value);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToBytes", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToBytes(java.lang.Object)", "qualified_return_type": "byte[]"}
{"java_doc": "", "method_name": "castToBoolean", "return_type": "Boolean", "signature": "castToBoolean(Object)", "body_content": "{\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (value instanceof Boolean) {\r\n        return (Boolean) value;\r\n    }\r\n    if (value instanceof Number) {\r\n        return ((Number) value).intValue() == 1;\r\n    }\r\n    if (value instanceof String) {\r\n        String strVal = (String) value;\r\n        if (// \r\n        strVal.length() == 0 || // \r\n        \"null\".equals(strVal) || \"NULL\".equals(strVal)) {\r\n            return null;\r\n        }\r\n        if (// \r\n        \"true\".equalsIgnoreCase(strVal) || \"1\".equals(strVal)) {\r\n            return Boolean.TRUE;\r\n        }\r\n        if (// \r\n        \"false\".equalsIgnoreCase(strVal) || \"0\".equals(strVal)) {\r\n            return Boolean.FALSE;\r\n        }\r\n    }\r\n    throw new JSONException(\"can not cast to boolean, value : \" + value);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToBoolean", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToBoolean(java.lang.Object)", "qualified_return_type": "java.lang.Boolean"}
{"java_doc": "", "method_name": "castToJavaBean", "return_type": "T", "signature": "castToJavaBean(Object, Class)", "body_content": "{\r\n    return cast(obj, clazz, ParserConfig.getGlobalInstance());\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToJavaBean", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToJavaBean(java.lang.Object, java.lang.Class<T>)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "cast", "return_type": "T", "signature": "cast(Object, Class, ParserConfig)", "body_content": "{\r\n    if (obj == null) {\r\n        return null;\r\n    }\r\n    if (clazz == null) {\r\n        throw new IllegalArgumentException(\"clazz is null\");\r\n    }\r\n    if (clazz == obj.getClass()) {\r\n        return (T) obj;\r\n    }\r\n    if (obj instanceof Map) {\r\n        if (clazz == Map.class) {\r\n            return (T) obj;\r\n        }\r\n        Map map = (Map) obj;\r\n        if (clazz == Object.class && !map.containsKey(JSON.DEFAULT_TYPE_KEY)) {\r\n            return (T) obj;\r\n        }\r\n        return castToJavaBean((Map<String, Object>) obj, clazz, config);\r\n    }\r\n    if (clazz.isArray()) {\r\n        if (obj instanceof Collection) {\r\n            Collection collection = (Collection) obj;\r\n            int index = 0;\r\n            Object array = Array.newInstance(clazz.getComponentType(), collection.size());\r\n            for (Object item : collection) {\r\n                Object value = cast(item, clazz.getComponentType(), config);\r\n                Array.set(array, index, value);\r\n                index++;\r\n            }\r\n            return (T) array;\r\n        }\r\n        if (clazz == byte[].class) {\r\n            return (T) castToBytes(obj);\r\n        }\r\n    }\r\n    if (clazz.isAssignableFrom(obj.getClass())) {\r\n        return (T) obj;\r\n    }\r\n    if (clazz == boolean.class || clazz == Boolean.class) {\r\n        return (T) castToBoolean(obj);\r\n    }\r\n    if (clazz == byte.class || clazz == Byte.class) {\r\n        return (T) castToByte(obj);\r\n    }\r\n    // if (clazz == char.class || clazz == Character.class) {\r\n    // return (T) castToCharacter(obj);\r\n    // }\r\n    if (clazz == short.class || clazz == Short.class) {\r\n        return (T) castToShort(obj);\r\n    }\r\n    if (clazz == int.class || clazz == Integer.class) {\r\n        return (T) castToInt(obj);\r\n    }\r\n    if (clazz == long.class || clazz == Long.class) {\r\n        return (T) castToLong(obj);\r\n    }\r\n    if (clazz == float.class || clazz == Float.class) {\r\n        return (T) castToFloat(obj);\r\n    }\r\n    if (clazz == double.class || clazz == Double.class) {\r\n        return (T) castToDouble(obj);\r\n    }\r\n    if (clazz == String.class) {\r\n        return (T) castToString(obj);\r\n    }\r\n    if (clazz == BigDecimal.class) {\r\n        return (T) castToBigDecimal(obj);\r\n    }\r\n    if (clazz == BigInteger.class) {\r\n        return (T) castToBigInteger(obj);\r\n    }\r\n    if (clazz == Date.class) {\r\n        return (T) castToDate(obj);\r\n    }\r\n    if (clazz == java.sql.Date.class) {\r\n        return (T) castToSqlDate(obj);\r\n    }\r\n    if (clazz == java.sql.Timestamp.class) {\r\n        return (T) castToTimestamp(obj);\r\n    }\r\n    if (clazz.isEnum()) {\r\n        return (T) castToEnum(obj, clazz, config);\r\n    }\r\n    if (Calendar.class.isAssignableFrom(clazz)) {\r\n        Date date = castToDate(obj);\r\n        Calendar calendar;\r\n        if (clazz == Calendar.class) {\r\n            calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\r\n        } else {\r\n            try {\r\n                calendar = (Calendar) clazz.newInstance();\r\n            } catch (Exception e) {\r\n                throw new JSONException(\"can not cast to : \" + clazz.getName(), e);\r\n            }\r\n        }\r\n        calendar.setTime(date);\r\n        return (T) calendar;\r\n    }\r\n    if (obj instanceof String) {\r\n        String strVal = (String) obj;\r\n        if (// \r\n        strVal.length() == 0 || // \r\n        \"null\".equals(strVal) || \"NULL\".equals(strVal)) {\r\n            return null;\r\n        }\r\n        if (clazz == java.util.Currency.class) {\r\n            return (T) java.util.Currency.getInstance(strVal);\r\n        }\r\n    }\r\n    throw new JSONException(\"can not cast to : \" + clazz.getName());\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.cast", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.cast(java.lang.Object, java.lang.Class<T>, com.alibaba.fastjson.parser.ParserConfig)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "castToEnum", "return_type": "T", "signature": "castToEnum(Object, Class, ParserConfig)", "body_content": "{\r\n    try {\r\n        if (obj instanceof String) {\r\n            String name = (String) obj;\r\n            if (name.length() == 0) {\r\n                return null;\r\n            }\r\n            return (T) Enum.valueOf((Class<? extends Enum>) clazz, name);\r\n        }\r\n        if (obj instanceof Number) {\r\n            int ordinal = ((Number) obj).intValue();\r\n            Object[] values = clazz.getEnumConstants();\r\n            if (ordinal < values.length) {\r\n                return (T) values[ordinal];\r\n            }\r\n        }\r\n    } catch (Exception ex) {\r\n        throw new JSONException(\"can not cast to : \" + clazz.getName(), ex);\r\n    }\r\n    throw new JSONException(\"can not cast to : \" + clazz.getName());\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToEnum", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToEnum(java.lang.Object, java.lang.Class<T>, com.alibaba.fastjson.parser.ParserConfig)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "cast", "return_type": "T", "signature": "cast(Object, Type, ParserConfig)", "body_content": "{\r\n    if (obj == null) {\r\n        return null;\r\n    }\r\n    if (type instanceof Class) {\r\n        return (T) cast(obj, (Class<T>) type, mapping);\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        return (T) cast(obj, (ParameterizedType) type, mapping);\r\n    }\r\n    if (obj instanceof String) {\r\n        String strVal = (String) obj;\r\n        if (// \r\n        strVal.length() == 0 || // \r\n        \"null\".equals(strVal) || \"NULL\".equals(strVal)) {\r\n            return null;\r\n        }\r\n    }\r\n    if (type instanceof TypeVariable) {\r\n        return (T) obj;\r\n    }\r\n    throw new JSONException(\"can not cast to : \" + type);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.cast", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.cast(java.lang.Object, java.lang.reflect.Type, com.alibaba.fastjson.parser.ParserConfig)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "cast", "return_type": "T", "signature": "cast(Object, ParameterizedType, ParserConfig)", "body_content": "{\r\n    Type rawTye = type.getRawType();\r\n    if (// \r\n    rawTye == Set.class || rawTye == HashSet.class || // \r\n    rawTye == TreeSet.class || // \r\n    rawTye == List.class || rawTye == ArrayList.class) {\r\n        Type itemType = type.getActualTypeArguments()[0];\r\n        if (obj instanceof Iterable) {\r\n            Collection collection;\r\n            if (rawTye == Set.class || rawTye == HashSet.class) {\r\n                collection = new HashSet();\r\n            } else if (rawTye == TreeSet.class) {\r\n                collection = new TreeSet();\r\n            } else {\r\n                collection = new ArrayList();\r\n            }\r\n            for (Iterator it = ((Iterable) obj).iterator(); it.hasNext(); ) {\r\n                Object item = it.next();\r\n                collection.add(cast(item, itemType, mapping));\r\n            }\r\n            return (T) collection;\r\n        }\r\n    }\r\n    if (rawTye == Map.class || rawTye == HashMap.class) {\r\n        Type keyType = type.getActualTypeArguments()[0];\r\n        Type valueType = type.getActualTypeArguments()[1];\r\n        if (obj instanceof Map) {\r\n            Map map = new HashMap();\r\n            for (Map.Entry entry : ((Map<?, ?>) obj).entrySet()) {\r\n                Object key = cast(entry.getKey(), keyType, mapping);\r\n                Object value = cast(entry.getValue(), valueType, mapping);\r\n                map.put(key, value);\r\n            }\r\n            return (T) map;\r\n        }\r\n    }\r\n    if (obj instanceof String) {\r\n        String strVal = (String) obj;\r\n        if (strVal.length() == 0) {\r\n            return null;\r\n        }\r\n    }\r\n    if (type.getActualTypeArguments().length == 1) {\r\n        Type argType = type.getActualTypeArguments()[0];\r\n        if (argType instanceof WildcardType) {\r\n            return (T) cast(obj, rawTye, mapping);\r\n        }\r\n    }\r\n    throw new JSONException(\"can not cast to : \" + type);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.cast", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.cast(java.lang.Object, java.lang.reflect.ParameterizedType, com.alibaba.fastjson.parser.ParserConfig)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "castToJavaBean", "return_type": "T", "signature": "castToJavaBean(Map, Class, ParserConfig)", "body_content": "{\r\n    try {\r\n        if (clazz == StackTraceElement.class) {\r\n            String declaringClass = (String) map.get(\"className\");\r\n            String methodName = (String) map.get(\"methodName\");\r\n            String fileName = (String) map.get(\"fileName\");\r\n            int lineNumber;\r\n            {\r\n                Number value = (Number) map.get(\"lineNumber\");\r\n                if (value == null) {\r\n                    lineNumber = 0;\r\n                } else {\r\n                    lineNumber = value.intValue();\r\n                }\r\n            }\r\n            return (T) new StackTraceElement(declaringClass, methodName, fileName, lineNumber);\r\n        }\r\n        {\r\n            Object iClassObject = map.get(JSON.DEFAULT_TYPE_KEY);\r\n            if (iClassObject instanceof String) {\r\n                String className = (String) iClassObject;\r\n                Class<?> loadClazz = (Class<T>) loadClass(className);\r\n                if (loadClazz == null) {\r\n                    throw new ClassNotFoundException(className + \" not found\");\r\n                }\r\n                if (!loadClazz.equals(clazz)) {\r\n                    return (T) castToJavaBean(map, loadClazz, config);\r\n                }\r\n            }\r\n        }\r\n        if (clazz.isInterface()) {\r\n            JSONObject object;\r\n            if (map instanceof JSONObject) {\r\n                object = (JSONObject) map;\r\n            } else {\r\n                object = new JSONObject(map);\r\n            }\r\n            return (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class<?>[] { clazz }, object);\r\n        }\r\n        if (config == null) {\r\n            config = ParserConfig.getGlobalInstance();\r\n        }\r\n        JavaBeanDeserializer javaBeanDeser = null;\r\n        ObjectDeserializer deserizer = config.getDeserializer(clazz);\r\n        if (deserizer instanceof JavaBeanDeserializer) {\r\n            javaBeanDeser = (JavaBeanDeserializer) deserizer;\r\n        }\r\n        if (javaBeanDeser == null) {\r\n            throw new JSONException(\"can not get javaBeanDeserializer\");\r\n        }\r\n        return (T) javaBeanDeser.createInstance(map, config);\r\n    } catch (Exception e) {\r\n        throw new JSONException(e.getMessage(), e);\r\n    }\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.castToJavaBean", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.castToJavaBean(java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<T>, com.alibaba.fastjson.parser.ParserConfig)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "addBaseClassMappings", "return_type": "void", "signature": "addBaseClassMappings()", "body_content": "{\r\n    mappings.put(\"byte\", byte.class);\r\n    mappings.put(\"short\", short.class);\r\n    mappings.put(\"int\", int.class);\r\n    mappings.put(\"long\", long.class);\r\n    mappings.put(\"float\", float.class);\r\n    mappings.put(\"double\", double.class);\r\n    mappings.put(\"boolean\", boolean.class);\r\n    mappings.put(\"char\", char.class);\r\n    mappings.put(\"[byte\", byte[].class);\r\n    mappings.put(\"[short\", short[].class);\r\n    mappings.put(\"[int\", int[].class);\r\n    mappings.put(\"[long\", long[].class);\r\n    mappings.put(\"[float\", float[].class);\r\n    mappings.put(\"[double\", double[].class);\r\n    mappings.put(\"[boolean\", boolean[].class);\r\n    mappings.put(\"[char\", char[].class);\r\n    mappings.put(HashMap.class.getName(), HashMap.class);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.addBaseClassMappings", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.addBaseClassMappings()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "clearClassMapping", "return_type": "void", "signature": "clearClassMapping()", "body_content": "{\r\n    mappings.clear();\r\n    addBaseClassMappings();\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.clearClassMapping", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.clearClassMapping()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "loadClass", "return_type": "Class<?>", "signature": "loadClass(String)", "body_content": "{\r\n    return loadClass(className, null);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.loadClass", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.loadClass(java.lang.String)", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "isPath", "return_type": "boolean", "signature": "isPath(Class)", "body_content": "{\r\n    if (pathClass == null && !pathClass_error) {\r\n        try {\r\n            pathClass = Class.forName(\"java.nio.file.Path\");\r\n        } catch (Throwable ex) {\r\n            pathClass_error = true;\r\n        }\r\n    }\r\n    if (pathClass != null) {\r\n        return pathClass.isAssignableFrom(clazz);\r\n    }\r\n    return false;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.isPath", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.isPath(java.lang.Class<?>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "loadClass", "return_type": "Class<?>", "signature": "loadClass(String, ClassLoader)", "body_content": "{\r\n    if (className == null || className.length() == 0) {\r\n        return null;\r\n    }\r\n    Class<?> clazz = mappings.get(className);\r\n    if (clazz != null) {\r\n        return clazz;\r\n    }\r\n    if (className.charAt(0) == '[') {\r\n        Class<?> componentType = loadClass(className.substring(1), classLoader);\r\n        return Array.newInstance(componentType, 0).getClass();\r\n    }\r\n    if (className.startsWith(\"L\") && className.endsWith(\";\")) {\r\n        String newClassName = className.substring(1, className.length() - 1);\r\n        return loadClass(newClassName, classLoader);\r\n    }\r\n    try {\r\n        if (classLoader != null) {\r\n            clazz = classLoader.loadClass(className);\r\n            mappings.put(className, clazz);\r\n            return clazz;\r\n        }\r\n    } catch (Throwable e) {\r\n        e.printStackTrace();\r\n        // skip\r\n    }\r\n    try {\r\n        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\r\n        if (contextClassLoader != null) {\r\n            clazz = contextClassLoader.loadClass(className);\r\n            mappings.put(className, clazz);\r\n            return clazz;\r\n        }\r\n    } catch (Throwable e) {\r\n        // skip\r\n    }\r\n    try {\r\n        clazz = Class.forName(className);\r\n        mappings.put(className, clazz);\r\n        return clazz;\r\n    } catch (Throwable e) {\r\n        // skip\r\n    }\r\n    return clazz;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.loadClass", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.loadClass(java.lang.String, java.lang.ClassLoader)", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "// \r\nbuildBeanInfo", "return_type": "// \r\nSerializeBeanInfo", "signature": "buildBeanInfo(Class, Map, PropertyNamingStrategy)", "body_content": "{\r\n    JSONType jsonType = beanType.getAnnotation(JSONType.class);\r\n    // fieldName,field ，先生成fieldName的快照，减少之后的findField的轮询\r\n    Map<String, Field> fieldCacheMap = new HashMap<String, Field>();\r\n    ParserConfig.parserAllFieldToCache(beanType, fieldCacheMap);\r\n    List<FieldInfo> fieldInfoList = computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, false, propertyNamingStrategy);\r\n    FieldInfo[] fields = new FieldInfo[fieldInfoList.size()];\r\n    fieldInfoList.toArray(fields);\r\n    String[] orders = null;\r\n    final int features;\r\n    String typeName = null;\r\n    if (jsonType != null) {\r\n        orders = jsonType.orders();\r\n        typeName = jsonType.typeName();\r\n        if (typeName.length() == 0) {\r\n            typeName = null;\r\n        }\r\n        features = SerializerFeature.of(jsonType.serialzeFeatures());\r\n    } else {\r\n        features = 0;\r\n    }\r\n    FieldInfo[] sortedFields;\r\n    List<FieldInfo> sortedFieldList;\r\n    if (orders != null && orders.length != 0) {\r\n        sortedFieldList = TypeUtils.computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, true, propertyNamingStrategy);\r\n    } else {\r\n        sortedFieldList = new ArrayList<FieldInfo>(fieldInfoList);\r\n        Collections.sort(sortedFieldList);\r\n    }\r\n    sortedFields = new FieldInfo[sortedFieldList.size()];\r\n    sortedFieldList.toArray(sortedFields);\r\n    if (Arrays.equals(sortedFields, fields)) {\r\n        sortedFields = fields;\r\n    }\r\n    return new SerializeBeanInfo(beanType, jsonType, typeName, features, fields, sortedFields);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.buildBeanInfo", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.buildBeanInfo(java.lang.Class<?>, java.util.Map<java.lang.String, java.lang.String>, com.alibaba.fastjson.PropertyNamingStrategy)", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializeBeanInfo"}
{"java_doc": "", "method_name": "// \r\ncomputeGetters", "return_type": "// \r\nList<FieldInfo>", "signature": "computeGetters(Class, JSONType, Map, Map, boolean, PropertyNamingStrategy)", "body_content": "{\r\n    Map<String, FieldInfo> fieldInfoMap = new LinkedHashMap<String, FieldInfo>();\r\n    for (Method method : clazz.getMethods()) {\r\n        String methodName = method.getName();\r\n        int ordinal = 0, serialzeFeatures = 0, parserFeatures = 0;\r\n        String label = null;\r\n        if (Modifier.isStatic(method.getModifiers())) {\r\n            continue;\r\n        }\r\n        if (method.getReturnType().equals(Void.TYPE)) {\r\n            continue;\r\n        }\r\n        if (method.getParameterTypes().length != 0) {\r\n            continue;\r\n        }\r\n        if (method.getReturnType() == ClassLoader.class) {\r\n            continue;\r\n        }\r\n        if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\r\n            continue;\r\n        }\r\n        JSONField annotation = method.getAnnotation(JSONField.class);\r\n        if (annotation == null) {\r\n            annotation = getSuperMethodAnnotation(clazz, method);\r\n        }\r\n        if (annotation != null) {\r\n            if (!annotation.serialize()) {\r\n                continue;\r\n            }\r\n            ordinal = annotation.ordinal();\r\n            serialzeFeatures = SerializerFeature.of(annotation.serialzeFeatures());\r\n            parserFeatures = Feature.of(annotation.parseFeatures());\r\n            if (annotation.name().length() != 0) {\r\n                String propertyName = annotation.name();\r\n                if (aliasMap != null) {\r\n                    propertyName = aliasMap.get(propertyName);\r\n                    if (propertyName == null) {\r\n                        continue;\r\n                    }\r\n                }\r\n                FieldInfo fieldInfo = new FieldInfo(propertyName, method, null, clazz, null, ordinal, serialzeFeatures, parserFeatures, annotation, null, label);\r\n                fieldInfoMap.put(propertyName, fieldInfo);\r\n                continue;\r\n            }\r\n            if (annotation.label().length() != 0) {\r\n                label = annotation.label();\r\n            }\r\n        }\r\n        if (methodName.startsWith(\"get\")) {\r\n            if (methodName.length() < 4) {\r\n                continue;\r\n            }\r\n            if (methodName.equals(\"getClass\")) {\r\n                continue;\r\n            }\r\n            char c3 = methodName.charAt(3);\r\n            String propertyName;\r\n            if (// \r\n            Character.isUpperCase(c3) || // for unicode method name\r\n            c3 > 512) {\r\n                if (compatibleWithJavaBean) {\r\n                    propertyName = decapitalize(methodName.substring(3));\r\n                } else {\r\n                    propertyName = Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\r\n                }\r\n                propertyName = getPropertyNameByCompatibleFieldName(fieldCacheMap, methodName, propertyName, 3);\r\n            } else if (c3 == '_') {\r\n                propertyName = methodName.substring(4);\r\n            } else if (c3 == 'f') {\r\n                propertyName = methodName.substring(3);\r\n            } else if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\r\n                propertyName = decapitalize(methodName.substring(3));\r\n            } else {\r\n                continue;\r\n            }\r\n            boolean ignore = isJSONTypeIgnore(clazz, propertyName);\r\n            if (ignore) {\r\n                continue;\r\n            }\r\n            // 假如bean的field很多的情况一下，轮询时将大大降低效率\r\n            Field field = ParserConfig.getFieldFromCache(propertyName, fieldCacheMap);\r\n            if (field == null && propertyName.length() > 1) {\r\n                char ch = propertyName.charAt(1);\r\n                if (ch >= 'A' && ch <= 'Z') {\r\n                    String javaBeanCompatiblePropertyName = decapitalize(methodName.substring(3));\r\n                    field = ParserConfig.getFieldFromCache(javaBeanCompatiblePropertyName, fieldCacheMap);\r\n                }\r\n            }\r\n            JSONField fieldAnnotation = null;\r\n            if (field != null) {\r\n                fieldAnnotation = field.getAnnotation(JSONField.class);\r\n                if (fieldAnnotation != null) {\r\n                    if (!fieldAnnotation.serialize()) {\r\n                        continue;\r\n                    }\r\n                    ordinal = fieldAnnotation.ordinal();\r\n                    serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());\r\n                    parserFeatures = Feature.of(fieldAnnotation.parseFeatures());\r\n                    if (fieldAnnotation.name().length() != 0) {\r\n                        propertyName = fieldAnnotation.name();\r\n                        if (aliasMap != null) {\r\n                            propertyName = aliasMap.get(propertyName);\r\n                            if (propertyName == null) {\r\n                                continue;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (fieldAnnotation.label().length() != 0) {\r\n                        label = fieldAnnotation.label();\r\n                    }\r\n                }\r\n            }\r\n            if (aliasMap != null) {\r\n                propertyName = aliasMap.get(propertyName);\r\n                if (propertyName == null) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (propertyNamingStrategy != null) {\r\n                propertyName = propertyNamingStrategy.translate(propertyName);\r\n            }\r\n            FieldInfo fieldInfo = new FieldInfo(propertyName, method, field, clazz, null, ordinal, serialzeFeatures, parserFeatures, annotation, fieldAnnotation, label);\r\n            fieldInfoMap.put(propertyName, fieldInfo);\r\n        }\r\n        if (methodName.startsWith(\"is\")) {\r\n            if (methodName.length() < 3) {\r\n                continue;\r\n            }\r\n            if (method.getReturnType() != Boolean.TYPE && method.getReturnType() != Boolean.class) {\r\n                continue;\r\n            }\r\n            char c2 = methodName.charAt(2);\r\n            String propertyName;\r\n            if (Character.isUpperCase(c2)) {\r\n                if (compatibleWithJavaBean) {\r\n                    propertyName = decapitalize(methodName.substring(2));\r\n                } else {\r\n                    propertyName = Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\r\n                }\r\n                propertyName = getPropertyNameByCompatibleFieldName(fieldCacheMap, methodName, propertyName, 2);\r\n            } else if (c2 == '_') {\r\n                propertyName = methodName.substring(3);\r\n            } else if (c2 == 'f') {\r\n                propertyName = methodName.substring(2);\r\n            } else {\r\n                continue;\r\n            }\r\n            Field field = ParserConfig.getFieldFromCache(propertyName, fieldCacheMap);\r\n            if (field == null) {\r\n                field = ParserConfig.getFieldFromCache(methodName, fieldCacheMap);\r\n            }\r\n            JSONField fieldAnnotation = null;\r\n            if (field != null) {\r\n                fieldAnnotation = field.getAnnotation(JSONField.class);\r\n                if (fieldAnnotation != null) {\r\n                    if (!fieldAnnotation.serialize()) {\r\n                        continue;\r\n                    }\r\n                    ordinal = fieldAnnotation.ordinal();\r\n                    serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());\r\n                    parserFeatures = Feature.of(fieldAnnotation.parseFeatures());\r\n                    if (fieldAnnotation.name().length() != 0) {\r\n                        propertyName = fieldAnnotation.name();\r\n                        if (aliasMap != null) {\r\n                            propertyName = aliasMap.get(propertyName);\r\n                            if (propertyName == null) {\r\n                                continue;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (fieldAnnotation.label().length() != 0) {\r\n                        label = fieldAnnotation.label();\r\n                    }\r\n                }\r\n            }\r\n            if (aliasMap != null) {\r\n                propertyName = aliasMap.get(propertyName);\r\n                if (propertyName == null) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (propertyNamingStrategy != null) {\r\n                propertyName = propertyNamingStrategy.translate(propertyName);\r\n            }\r\n            // 优先选择get\r\n            if (fieldInfoMap.containsKey(propertyName)) {\r\n                continue;\r\n            }\r\n            FieldInfo fieldInfo = new FieldInfo(propertyName, method, field, clazz, null, ordinal, serialzeFeatures, parserFeatures, annotation, fieldAnnotation, label);\r\n            fieldInfoMap.put(propertyName, fieldInfo);\r\n        }\r\n    }\r\n    for (Field field : clazz.getFields()) {\r\n        if (Modifier.isStatic(field.getModifiers())) {\r\n            continue;\r\n        }\r\n        JSONField fieldAnnotation = field.getAnnotation(JSONField.class);\r\n        int ordinal = 0, serialzeFeatures = 0, parserFeatures = 0;\r\n        String propertyName = field.getName();\r\n        String label = null;\r\n        if (fieldAnnotation != null) {\r\n            if (!fieldAnnotation.serialize()) {\r\n                continue;\r\n            }\r\n            ordinal = fieldAnnotation.ordinal();\r\n            serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());\r\n            parserFeatures = Feature.of(fieldAnnotation.parseFeatures());\r\n            if (fieldAnnotation.name().length() != 0) {\r\n                propertyName = fieldAnnotation.name();\r\n            }\r\n            if (fieldAnnotation.label().length() != 0) {\r\n                label = fieldAnnotation.label();\r\n            }\r\n        }\r\n        if (aliasMap != null) {\r\n            propertyName = aliasMap.get(propertyName);\r\n            if (propertyName == null) {\r\n                continue;\r\n            }\r\n        }\r\n        if (propertyNamingStrategy != null) {\r\n            propertyName = propertyNamingStrategy.translate(propertyName);\r\n        }\r\n        if (!fieldInfoMap.containsKey(propertyName)) {\r\n            FieldInfo fieldInfo = new FieldInfo(propertyName, null, field, clazz, null, ordinal, serialzeFeatures, parserFeatures, null, fieldAnnotation, label);\r\n            fieldInfoMap.put(propertyName, fieldInfo);\r\n        }\r\n    }\r\n    List<FieldInfo> fieldInfoList = new ArrayList<FieldInfo>();\r\n    boolean containsAll = false;\r\n    String[] orders = null;\r\n    JSONType annotation = clazz.getAnnotation(JSONType.class);\r\n    if (annotation != null) {\r\n        orders = annotation.orders();\r\n        if (orders != null && orders.length == fieldInfoMap.size()) {\r\n            containsAll = true;\r\n            for (String item : orders) {\r\n                if (!fieldInfoMap.containsKey(item)) {\r\n                    containsAll = false;\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            containsAll = false;\r\n        }\r\n    }\r\n    if (containsAll) {\r\n        for (String item : orders) {\r\n            FieldInfo fieldInfo = fieldInfoMap.get(item);\r\n            fieldInfoList.add(fieldInfo);\r\n        }\r\n    } else {\r\n        for (FieldInfo fieldInfo : fieldInfoMap.values()) {\r\n            fieldInfoList.add(fieldInfo);\r\n        }\r\n        if (sorted) {\r\n            Collections.sort(fieldInfoList);\r\n        }\r\n    }\r\n    return fieldInfoList;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.computeGetters", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.computeGetters(java.lang.Class<?>, com.alibaba.fastjson.annotation.JSONType, java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.reflect.Field>, boolean, com.alibaba.fastjson.PropertyNamingStrategy)", "qualified_return_type": "java.util.List<com.alibaba.fastjson.util.FieldInfo>"}
{"java_doc": "", "method_name": "getPropertyNameByCompatibleFieldName", "return_type": "String", "signature": "getPropertyNameByCompatibleFieldName(Map, String, String, int)", "body_content": "{\r\n    if (compatibleWithFieldName) {\r\n        if (!fieldCacheMap.containsKey(propertyName)) {\r\n            String tempPropertyName = methodName.substring(fromIdx);\r\n            return fieldCacheMap.containsKey(tempPropertyName) ? tempPropertyName : propertyName;\r\n        }\r\n    }\r\n    return propertyName;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.getPropertyNameByCompatibleFieldName", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.getPropertyNameByCompatibleFieldName(java.util.Map<java.lang.String, java.lang.reflect.Field>, java.lang.String, java.lang.String, int)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getSuperMethodAnnotation", "return_type": "JSONField", "signature": "getSuperMethodAnnotation(Class, Method)", "body_content": "{\r\n    Class<?>[] interfaces = clazz.getInterfaces();\r\n    if (interfaces.length > 0) {\r\n        Class<?>[] types = method.getParameterTypes();\r\n        for (Class<?> interfaceClass : interfaces) {\r\n            for (Method interfaceMethod : interfaceClass.getMethods()) {\r\n                Class<?>[] interfaceTypes = interfaceMethod.getParameterTypes();\r\n                if (interfaceTypes.length != types.length) {\r\n                    continue;\r\n                }\r\n                if (!interfaceMethod.getName().equals(method.getName())) {\r\n                    continue;\r\n                }\r\n                boolean match = true;\r\n                for (int i = 0; i < types.length; ++i) {\r\n                    if (!interfaceTypes[i].equals(types[i])) {\r\n                        match = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!match) {\r\n                    continue;\r\n                }\r\n                JSONField annotation = interfaceMethod.getAnnotation(JSONField.class);\r\n                if (annotation != null) {\r\n                    return annotation;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Class<?> superClass = clazz.getSuperclass();\r\n    if (superClass == null) {\r\n        return null;\r\n    }\r\n    if (Modifier.isAbstract(superClass.getModifiers())) {\r\n        Class<?>[] types = method.getParameterTypes();\r\n        for (Method interfaceMethod : superClass.getMethods()) {\r\n            Class<?>[] interfaceTypes = interfaceMethod.getParameterTypes();\r\n            if (interfaceTypes.length != types.length) {\r\n                continue;\r\n            }\r\n            if (!interfaceMethod.getName().equals(method.getName())) {\r\n                continue;\r\n            }\r\n            boolean match = true;\r\n            for (int i = 0; i < types.length; ++i) {\r\n                if (!interfaceTypes[i].equals(types[i])) {\r\n                    match = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (!match) {\r\n                continue;\r\n            }\r\n            JSONField annotation = interfaceMethod.getAnnotation(JSONField.class);\r\n            if (annotation != null) {\r\n                return annotation;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.getSuperMethodAnnotation", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.getSuperMethodAnnotation(java.lang.Class<?>, java.lang.reflect.Method)", "qualified_return_type": "com.alibaba.fastjson.annotation.JSONField"}
{"java_doc": "", "method_name": "isJSONTypeIgnore", "return_type": "boolean", "signature": "isJSONTypeIgnore(Class, String)", "body_content": "{\r\n    JSONType jsonType = clazz.getAnnotation(JSONType.class);\r\n    if (jsonType != null) {\r\n        // 1、新增 includes 支持，如果 JSONType 同时设置了includes 和 ignores 属性，则以includes为准。\r\n        // 2、个人认为对于大小写敏感的Java和JS而言，使用 equals() 比 equalsIgnoreCase() 更好，改动的唯一风险就是向后兼容性的问题\r\n        // 不过，相信开发者应该都是严格按照大小写敏感的方式进行属性设置的\r\n        String[] fields = jsonType.includes();\r\n        if (fields.length > 0) {\r\n            for (int i = 0; i < fields.length; i++) {\r\n                if (propertyName.equals(fields[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            fields = jsonType.ignores();\r\n            for (int i = 0; i < fields.length; i++) {\r\n                if (propertyName.equals(fields[i])) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (clazz.getSuperclass() != Object.class && clazz.getSuperclass() != null) {\r\n        if (isJSONTypeIgnore(clazz.getSuperclass(), propertyName)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.isJSONTypeIgnore", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.isJSONTypeIgnore(java.lang.Class<?>, java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isGenericParamType", "return_type": "boolean", "signature": "isGenericParamType(Type)", "body_content": "{\r\n    if (type instanceof ParameterizedType) {\r\n        return true;\r\n    }\r\n    if (type instanceof Class) {\r\n        Type superType = ((Class<?>) type).getGenericSuperclass();\r\n        if (superType == Object.class) {\r\n            return false;\r\n        }\r\n        return isGenericParamType(superType);\r\n    }\r\n    return false;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.isGenericParamType", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.isGenericParamType(java.lang.reflect.Type)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getGenericParamType", "return_type": "Type", "signature": "getGenericParamType(Type)", "body_content": "{\r\n    if (type instanceof ParameterizedType) {\r\n        return type;\r\n    }\r\n    if (type instanceof Class) {\r\n        return getGenericParamType(((Class<?>) type).getGenericSuperclass());\r\n    }\r\n    return type;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.getGenericParamType", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.getGenericParamType(java.lang.reflect.Type)", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "", "method_name": "unwrapOptional", "return_type": "Type", "signature": "unwrapOptional(Type)", "body_content": "{\r\n    if (!optionalClassInited) {\r\n        try {\r\n            optionalClass = Class.forName(\"java.util.Optional\");\r\n        } catch (Exception e) {\r\n            // skip\r\n        } finally {\r\n            optionalClassInited = true;\r\n        }\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        ParameterizedType parameterizedType = (ParameterizedType) type;\r\n        if (parameterizedType.getRawType() == optionalClass) {\r\n            return parameterizedType.getActualTypeArguments()[0];\r\n        }\r\n    }\r\n    return type;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.unwrapOptional", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.unwrapOptional(java.lang.reflect.Type)", "qualified_return_type": "java.lang.reflect.Type"}
{"java_doc": "", "method_name": "getClass", "return_type": "Class<?>", "signature": "getClass(Type)", "body_content": "{\r\n    if (type.getClass() == Class.class) {\r\n        return (Class<?>) type;\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        return getClass(((ParameterizedType) type).getRawType());\r\n    }\r\n    if (type instanceof TypeVariable) {\r\n        Type boundType = ((TypeVariable<?>) type).getBounds()[0];\r\n        return (Class<?>) boundType;\r\n    }\r\n    return Object.class;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.getClass", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.getClass(java.lang.reflect.Type)", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "getField", "return_type": "Field", "signature": "getField(Class, String, Field[])", "body_content": "{\r\n    for (Field field : declaredFields) {\r\n        if (fieldName.equals(field.getName())) {\r\n            return field;\r\n        }\r\n    }\r\n    Class<?> superClass = clazz.getSuperclass();\r\n    if (superClass != null && superClass != Object.class) {\r\n        return getField(superClass, fieldName, superClass.getDeclaredFields());\r\n    }\r\n    return null;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.getField", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.getField(java.lang.Class<?>, java.lang.String, java.lang.reflect.Field[])", "qualified_return_type": "java.lang.reflect.Field"}
{"java_doc": "", "method_name": "getSerializeFeatures", "return_type": "int", "signature": "getSerializeFeatures(Class)", "body_content": "{\r\n    JSONType annotation = clazz.getAnnotation(JSONType.class);\r\n    if (annotation == null) {\r\n        return 0;\r\n    }\r\n    return SerializerFeature.of(annotation.serialzeFeatures());\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.getSerializeFeatures", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.getSerializeFeatures(java.lang.Class<?>)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "getParserFeatures", "return_type": "int", "signature": "getParserFeatures(Class)", "body_content": "{\r\n    JSONType annotation = clazz.getAnnotation(JSONType.class);\r\n    if (annotation == null) {\r\n        return 0;\r\n    }\r\n    return Feature.of(annotation.parseFeatures());\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.getParserFeatures", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.getParserFeatures(java.lang.Class<?>)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "decapitalize", "return_type": "String", "signature": "decapitalize(String)", "body_content": "{\r\n    if (name == null || name.length() == 0) {\r\n        return name;\r\n    }\r\n    if (name.length() > 1 && Character.isUpperCase(name.charAt(1)) && Character.isUpperCase(name.charAt(0))) {\r\n        return name;\r\n    }\r\n    char[] chars = name.toCharArray();\r\n    chars[0] = Character.toLowerCase(chars[0]);\r\n    return new String(chars);\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.decapitalize", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.decapitalize(java.lang.String)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "setAccessible", "return_type": "void", "signature": "setAccessible(AccessibleObject)", "body_content": "{\r\n    if (!setAccessibleEnable) {\r\n        return;\r\n    }\r\n    if (obj.isAccessible()) {\r\n        return;\r\n    }\r\n    try {\r\n        obj.setAccessible(true);\r\n    } catch (AccessControlException error) {\r\n        setAccessibleEnable = false;\r\n    }\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.setAccessible", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.setAccessible(java.lang.reflect.AccessibleObject)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getCollectionItemClass", "return_type": "Class<?>", "signature": "getCollectionItemClass(Type)", "body_content": "{\r\n    if (fieldType instanceof ParameterizedType) {\r\n        Class<?> itemClass;\r\n        Type actualTypeArgument = ((ParameterizedType) fieldType).getActualTypeArguments()[0];\r\n        if (actualTypeArgument instanceof Class) {\r\n            itemClass = (Class<?>) actualTypeArgument;\r\n            if (!Modifier.isPublic(itemClass.getModifiers())) {\r\n                throw new JSONException(\"can not create ASMParser\");\r\n            }\r\n        } else {\r\n            throw new JSONException(\"can not create ASMParser\");\r\n        }\r\n        return itemClass;\r\n    }\r\n    return Object.class;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.getCollectionItemClass", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.getCollectionItemClass(java.lang.reflect.Type)", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "createCollection", "return_type": "Collection", "signature": "createCollection(Type)", "body_content": "{\r\n    Class<?> rawClass = getRawClass(type);\r\n    Collection list;\r\n    if (// \r\n    rawClass == AbstractCollection.class || rawClass == Collection.class) {\r\n        list = new ArrayList();\r\n    } else if (rawClass.isAssignableFrom(HashSet.class)) {\r\n        list = new HashSet();\r\n    } else if (rawClass.isAssignableFrom(LinkedHashSet.class)) {\r\n        list = new LinkedHashSet();\r\n    } else if (rawClass.isAssignableFrom(TreeSet.class)) {\r\n        list = new TreeSet();\r\n    } else if (rawClass.isAssignableFrom(ArrayList.class)) {\r\n        list = new ArrayList();\r\n    } else if (rawClass.isAssignableFrom(EnumSet.class)) {\r\n        Type itemType;\r\n        if (type instanceof ParameterizedType) {\r\n            itemType = ((ParameterizedType) type).getActualTypeArguments()[0];\r\n        } else {\r\n            itemType = Object.class;\r\n        }\r\n        list = EnumSet.noneOf((Class<Enum>) itemType);\r\n    } else {\r\n        try {\r\n            list = (Collection) rawClass.newInstance();\r\n        } catch (Exception e) {\r\n            throw new JSONException(\"create instance error, class \" + rawClass.getName());\r\n        }\r\n    }\r\n    return list;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.createCollection", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.createCollection(java.lang.reflect.Type)", "qualified_return_type": "java.util.Collection"}
{"java_doc": "", "method_name": "getRawClass", "return_type": "Class<?>", "signature": "getRawClass(Type)", "body_content": "{\r\n    if (type instanceof Class<?>) {\r\n        return (Class<?>) type;\r\n    } else if (type instanceof ParameterizedType) {\r\n        return getRawClass(((ParameterizedType) type).getRawType());\r\n    } else {\r\n        throw new JSONException(\"TODO\");\r\n    }\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.getRawClass", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.getRawClass(java.lang.reflect.Type)", "qualified_return_type": "java.lang.Class<?>"}
{"java_doc": "", "method_name": "isProxy", "return_type": "boolean", "signature": "isProxy(Class)", "body_content": "{\r\n    for (Class<?> item : clazz.getInterfaces()) {\r\n        String interfaceName = item.getName();\r\n        if (// \r\n        interfaceName.equals(\"net.sf.cglib.proxy.Factory\") || interfaceName.equals(\"org.springframework.cglib.proxy.Factory\")) {\r\n            return true;\r\n        }\r\n        if (// \r\n        interfaceName.equals(\"javassist.util.proxy.ProxyObject\") || interfaceName.equals(\"org.apache.ibatis.javassist.util.proxy.ProxyObject\")) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "class_name": "TypeUtils", "qualified_method_name": "com.alibaba.fastjson.util.TypeUtils.isProxy", "qualified_signature": "com.alibaba.fastjson.util.TypeUtils.isProxy(java.lang.Class<?>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.NULL) {\r\n        lexer.nextToken();\r\n        return null;\r\n    }\r\n    if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\r\n        throw new JSONException(\"syntax error: \" + JSONToken.name(lexer.token()));\r\n    }\r\n    String declaringClass = null;\r\n    String methodName = null;\r\n    String fileName = null;\r\n    int lineNumber = 0;\r\n    String moduleName = null;\r\n    String moduleVersion = null;\r\n    for (; ; ) {\r\n        // lexer.scanSymbol\r\n        String key = lexer.scanSymbol(parser.getSymbolTable());\r\n        if (key == null) {\r\n            if (lexer.token() == JSONToken.RBRACE) {\r\n                lexer.nextToken(JSONToken.COMMA);\r\n                break;\r\n            }\r\n            if (lexer.token() == JSONToken.COMMA) {\r\n                if (lexer.isEnabled(Feature.AllowArbitraryCommas)) {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);\r\n        if (\"className\".equals(key)) {\r\n            if (lexer.token() == JSONToken.NULL) {\r\n                declaringClass = null;\r\n            } else if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                declaringClass = lexer.stringVal();\r\n            } else {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n        } else if (\"methodName\".equals(key)) {\r\n            if (lexer.token() == JSONToken.NULL) {\r\n                methodName = null;\r\n            } else if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                methodName = lexer.stringVal();\r\n            } else {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n        } else if (\"fileName\".equals(key)) {\r\n            if (lexer.token() == JSONToken.NULL) {\r\n                fileName = null;\r\n            } else if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                fileName = lexer.stringVal();\r\n            } else {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n        } else if (\"lineNumber\".equals(key)) {\r\n            if (lexer.token() == JSONToken.NULL) {\r\n                lineNumber = 0;\r\n            } else if (lexer.token() == JSONToken.LITERAL_INT) {\r\n                lineNumber = lexer.intValue();\r\n            } else {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n        } else if (\"nativeMethod\".equals(key)) {\r\n            if (lexer.token() == JSONToken.NULL) {\r\n                lexer.nextToken(JSONToken.COMMA);\r\n            } else if (lexer.token() == JSONToken.TRUE) {\r\n                lexer.nextToken(JSONToken.COMMA);\r\n            } else if (lexer.token() == JSONToken.FALSE) {\r\n                lexer.nextToken(JSONToken.COMMA);\r\n            } else {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n        } else if (key == JSON.DEFAULT_TYPE_KEY) {\r\n            if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                String elementType = lexer.stringVal();\r\n                if (!elementType.equals(\"java.lang.StackTraceElement\")) {\r\n                    throw new JSONException(\"syntax error : \" + elementType);\r\n                }\r\n            } else {\r\n                if (lexer.token() != JSONToken.NULL) {\r\n                    throw new JSONException(\"syntax error\");\r\n                }\r\n            }\r\n        } else if (\"moduleName\".equals(key)) {\r\n            if (lexer.token() == JSONToken.NULL) {\r\n                moduleName = null;\r\n            } else if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                moduleName = lexer.stringVal();\r\n            } else {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n        } else if (\"moduleVersion\".equals(key)) {\r\n            if (lexer.token() == JSONToken.NULL) {\r\n                moduleVersion = null;\r\n            } else if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n                moduleVersion = lexer.stringVal();\r\n            } else {\r\n                throw new JSONException(\"syntax error\");\r\n            }\r\n        } else {\r\n            throw new JSONException(\"syntax error : \" + key);\r\n        }\r\n        if (lexer.token() == JSONToken.RBRACE) {\r\n            lexer.nextToken(JSONToken.COMMA);\r\n            break;\r\n        }\r\n    }\r\n    return (T) new StackTraceElement(declaringClass, methodName, fileName, lineNumber);\r\n}", "class_name": "StackTraceElementDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer.deserialze", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LBRACE;\r\n}", "class_name": "StackTraceElementDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull();\r\n        return;\r\n    }\r\n    Date date;\r\n    if (object instanceof Date) {\r\n        date = (Date) object;\r\n    } else {\r\n        date = TypeUtils.castToDate(object);\r\n    }\r\n    if (out.isEnabled(SerializerFeature.WriteDateUseDateFormat)) {\r\n        DateFormat format = serializer.getDateFormat();\r\n        if (format == null) {\r\n            format = new SimpleDateFormat(JSON.DEFFAULT_DATE_FORMAT, serializer.locale);\r\n            format.setTimeZone(serializer.timeZone);\r\n        }\r\n        String text = format.format(date);\r\n        out.writeString(text);\r\n        return;\r\n    }\r\n    if (out.isEnabled(SerializerFeature.WriteClassName)) {\r\n        if (object.getClass() != fieldType) {\r\n            if (object.getClass() == java.util.Date.class) {\r\n                out.write(\"new Date(\");\r\n                out.writeLong(((Date) object).getTime());\r\n                out.write(')');\r\n            } else {\r\n                out.write('{');\r\n                out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\r\n                serializer.write(object.getClass().getName());\r\n                out.writeFieldValue(',', \"val\", ((Date) object).getTime());\r\n                out.write('}');\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    long time = date.getTime();\r\n    if (out.isEnabled(SerializerFeature.UseISO8601DateFormat)) {\r\n        char quote = out.isEnabled(SerializerFeature.UseSingleQuotes) ? '\\'' : '\\\"';\r\n        out.write(quote);\r\n        Calendar calendar = Calendar.getInstance(serializer.timeZone, serializer.locale);\r\n        calendar.setTimeInMillis(time);\r\n        int year = calendar.get(Calendar.YEAR);\r\n        int month = calendar.get(Calendar.MONTH) + 1;\r\n        int day = calendar.get(Calendar.DAY_OF_MONTH);\r\n        int hour = calendar.get(Calendar.HOUR_OF_DAY);\r\n        int minute = calendar.get(Calendar.MINUTE);\r\n        int second = calendar.get(Calendar.SECOND);\r\n        int millis = calendar.get(Calendar.MILLISECOND);\r\n        char[] buf;\r\n        if (millis != 0) {\r\n            buf = \"0000-00-00T00:00:00.000\".toCharArray();\r\n            IOUtils.getChars(millis, 23, buf);\r\n            IOUtils.getChars(second, 19, buf);\r\n            IOUtils.getChars(minute, 16, buf);\r\n            IOUtils.getChars(hour, 13, buf);\r\n            IOUtils.getChars(day, 10, buf);\r\n            IOUtils.getChars(month, 7, buf);\r\n            IOUtils.getChars(year, 4, buf);\r\n        } else {\r\n            if (second == 0 && minute == 0 && hour == 0) {\r\n                buf = \"0000-00-00\".toCharArray();\r\n                IOUtils.getChars(day, 10, buf);\r\n                IOUtils.getChars(month, 7, buf);\r\n                IOUtils.getChars(year, 4, buf);\r\n            } else {\r\n                buf = \"0000-00-00T00:00:00\".toCharArray();\r\n                IOUtils.getChars(second, 19, buf);\r\n                IOUtils.getChars(minute, 16, buf);\r\n                IOUtils.getChars(hour, 13, buf);\r\n                IOUtils.getChars(day, 10, buf);\r\n                IOUtils.getChars(month, 7, buf);\r\n                IOUtils.getChars(year, 4, buf);\r\n            }\r\n        }\r\n        out.write(buf);\r\n        int timeZone = calendar.getTimeZone().getRawOffset() / (3600 * 1000);\r\n        if (timeZone == 0) {\r\n            out.write('Z');\r\n        } else {\r\n            if (timeZone > 0) {\r\n                out.append('+').append(String.format(\"%02d\", timeZone));\r\n            } else {\r\n                out.append('-').append(String.format(\"%02d\", -timeZone));\r\n            }\r\n            out.append(\":00\");\r\n        }\r\n        out.write(quote);\r\n    } else {\r\n        out.writeLong(time);\r\n    }\r\n}", "class_name": "DateCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.DateCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.DateCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "cast", "return_type": "T", "signature": "cast(DefaultJSONParser, Type, Object, Object)", "body_content": "{\r\n    if (val == null) {\r\n        return null;\r\n    }\r\n    if (val instanceof java.util.Date) {\r\n        return (T) val;\r\n    } else if (val instanceof Number) {\r\n        return (T) new java.util.Date(((Number) val).longValue());\r\n    } else if (val instanceof String) {\r\n        String strVal = (String) val;\r\n        if (strVal.length() == 0) {\r\n            return null;\r\n        }\r\n        JSONScanner dateLexer = new JSONScanner(strVal);\r\n        try {\r\n            if (dateLexer.scanISO8601DateIfMatch(false)) {\r\n                Calendar calendar = dateLexer.getCalendar();\r\n                if (clazz == Calendar.class) {\r\n                    return (T) calendar;\r\n                }\r\n                return (T) calendar.getTime();\r\n            }\r\n        } finally {\r\n            dateLexer.close();\r\n        }\r\n        if (strVal.length() == parser.getDateFomartPattern().length()) {\r\n            DateFormat dateFormat = parser.getDateFormat();\r\n            try {\r\n                return (T) dateFormat.parse(strVal);\r\n            } catch (ParseException e) {\r\n                // skip\r\n            }\r\n        }\r\n        if (strVal.startsWith(\"/Date(\") && strVal.endsWith(\")/\")) {\r\n            String dotnetDateStr = strVal.substring(6, strVal.length() - 2);\r\n            strVal = dotnetDateStr;\r\n        }\r\n        // JSONScanner iso8601Lexer = new JSONScanner(strVal);\r\n        // if (iso8601Lexer.scanISO8601DateIfMatch()) {\r\n        // val = iso8601Lexer.getCalendar().getTime();\r\n        // }\r\n        // iso8601Lexer.close();\r\n        // \r\n        long longVal = Long.parseLong(strVal);\r\n        return (T) new java.util.Date(longVal);\r\n    }\r\n    throw new JSONException(\"parse error\");\r\n}", "class_name": "DateCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.DateCodec.cast", "qualified_signature": "com.alibaba.fastjson.serializer.DateCodec.cast(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_INT;\r\n}", "class_name": "DateCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.DateCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.DateCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull(SerializerFeature.WriteNullNumberAsZero);\r\n    } else {\r\n        BigDecimal val = (BigDecimal) object;\r\n        String outText;\r\n        if (out.isEnabled(SerializerFeature.WriteBigDecimalAsPlain)) {\r\n            outText = val.toPlainString();\r\n        } else {\r\n            outText = val.toString();\r\n        }\r\n        out.write(outText);\r\n        if (out.isEnabled(SerializerFeature.WriteClassName) && fieldType != BigDecimal.class && val.scale() == 0) {\r\n            out.write('.');\r\n        }\r\n    }\r\n}", "class_name": "BigDecimalCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.BigDecimalCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.BigDecimalCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    return (T) deserialze(parser);\r\n}", "class_name": "BigDecimalCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.BigDecimalCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.BigDecimalCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser)", "body_content": "{\r\n    final JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.LITERAL_INT) {\r\n        BigDecimal decimalValue = lexer.decimalValue();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return (T) decimalValue;\r\n    }\r\n    if (lexer.token() == JSONToken.LITERAL_FLOAT) {\r\n        BigDecimal val = lexer.decimalValue();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return (T) val;\r\n    }\r\n    Object value = parser.parse();\r\n    return // \r\n    value == null ? // \r\n    null : (T) TypeUtils.castToBigDecimal(value);\r\n}", "class_name": "BigDecimalCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.BigDecimalCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.BigDecimalCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LITERAL_INT;\r\n}", "class_name": "BigDecimalCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.BigDecimalCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.BigDecimalCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull(SerializerFeature.WriteNullListAsEmpty);\r\n        return;\r\n    }\r\n    if (object instanceof int[]) {\r\n        int[] array = (int[]) object;\r\n        out.write('[');\r\n        for (int i = 0; i < array.length; ++i) {\r\n            if (i != 0) {\r\n                out.write(',');\r\n            }\r\n            out.writeInt(array[i]);\r\n        }\r\n        out.write(']');\r\n        return;\r\n    }\r\n    if (object instanceof short[]) {\r\n        short[] array = (short[]) object;\r\n        out.write('[');\r\n        for (int i = 0; i < array.length; ++i) {\r\n            if (i != 0) {\r\n                out.write(',');\r\n            }\r\n            out.writeInt(array[i]);\r\n        }\r\n        out.write(']');\r\n        return;\r\n    }\r\n    if (object instanceof long[]) {\r\n        long[] array = (long[]) object;\r\n        out.write('[');\r\n        for (int i = 0; i < array.length; ++i) {\r\n            if (i != 0) {\r\n                out.write(',');\r\n            }\r\n            out.writeLong(array[i]);\r\n        }\r\n        out.write(']');\r\n        return;\r\n    }\r\n    if (object instanceof boolean[]) {\r\n        boolean[] array = (boolean[]) object;\r\n        out.write('[');\r\n        for (int i = 0; i < array.length; ++i) {\r\n            if (i != 0) {\r\n                out.write(',');\r\n            }\r\n            out.write(array[i]);\r\n        }\r\n        out.write(']');\r\n        return;\r\n    }\r\n    if (object instanceof float[]) {\r\n        float[] array = (float[]) object;\r\n        out.write('[');\r\n        for (int i = 0; i < array.length; ++i) {\r\n            if (i != 0) {\r\n                out.write(',');\r\n            }\r\n            float item = array[i];\r\n            if (Float.isNaN(item)) {\r\n                out.writeNull();\r\n            } else {\r\n                out.append(Float.toString(item));\r\n            }\r\n        }\r\n        out.write(']');\r\n        return;\r\n    }\r\n    if (object instanceof double[]) {\r\n        double[] array = (double[]) object;\r\n        out.write('[');\r\n        for (int i = 0; i < array.length; ++i) {\r\n            if (i != 0) {\r\n                out.write(',');\r\n            }\r\n            double item = array[i];\r\n            if (Double.isNaN(item)) {\r\n                out.writeNull();\r\n            } else {\r\n                out.append(Double.toString(item));\r\n            }\r\n        }\r\n        out.write(']');\r\n        return;\r\n    }\r\n    if (object instanceof byte[]) {\r\n        byte[] array = (byte[]) object;\r\n        out.writeByteArray(array);\r\n        return;\r\n    }\r\n    char[] chars = (char[]) object;\r\n    out.writeString(new String(chars));\r\n}", "class_name": "PrimitiveArraySerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.PrimitiveArraySerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.PrimitiveArraySerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    Object[] array = (Object[]) object;\r\n    if (object == null) {\r\n        out.writeNull(SerializerFeature.WriteNullListAsEmpty);\r\n        return;\r\n    }\r\n    int size = array.length;\r\n    int end = size - 1;\r\n    if (end == -1) {\r\n        out.append(\"[]\");\r\n        return;\r\n    }\r\n    SerialContext context = serializer.context;\r\n    serializer.setContext(context, object, fieldName, 0);\r\n    try {\r\n        Class<?> preClazz = null;\r\n        ObjectSerializer preWriter = null;\r\n        out.append('[');\r\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\r\n            serializer.incrementIndent();\r\n            serializer.println();\r\n            for (int i = 0; i < size; ++i) {\r\n                if (i != 0) {\r\n                    out.write(',');\r\n                    serializer.println();\r\n                }\r\n                serializer.write(array[i]);\r\n            }\r\n            serializer.decrementIdent();\r\n            serializer.println();\r\n            out.write(']');\r\n            return;\r\n        }\r\n        for (int i = 0; i < end; ++i) {\r\n            Object item = array[i];\r\n            if (item == null) {\r\n                out.append(\"null,\");\r\n            } else {\r\n                if (serializer.containsReference(item)) {\r\n                    serializer.writeReference(item);\r\n                } else {\r\n                    Class<?> clazz = item.getClass();\r\n                    if (clazz == preClazz) {\r\n                        preWriter.write(serializer, item, null, null, 0);\r\n                    } else {\r\n                        preClazz = clazz;\r\n                        preWriter = serializer.getObjectWriter(clazz);\r\n                        preWriter.write(serializer, item, null, null, 0);\r\n                    }\r\n                }\r\n                out.append(',');\r\n            }\r\n        }\r\n        Object item = array[end];\r\n        if (item == null) {\r\n            out.append(\"null]\");\r\n        } else {\r\n            if (serializer.containsReference(item)) {\r\n                serializer.writeReference(item);\r\n            } else {\r\n                serializer.writeWithFieldName(item, end);\r\n            }\r\n            out.append(']');\r\n        }\r\n    } finally {\r\n        serializer.context = context;\r\n    }\r\n}", "class_name": "ObjectArrayCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.ObjectArrayCodec.write", "qualified_signature": "com.alibaba.fastjson.serializer.ObjectArrayCodec.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "deserialze", "return_type": "T", "signature": "deserialze(DefaultJSONParser, Type, Object)", "body_content": "{\r\n    final JSONLexer lexer = parser.lexer;\r\n    if (lexer.token() == JSONToken.NULL) {\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return null;\r\n    }\r\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\r\n        byte[] bytes = lexer.bytesValue();\r\n        lexer.nextToken(JSONToken.COMMA);\r\n        return (T) bytes;\r\n    }\r\n    Class componentClass;\r\n    Type componentType;\r\n    if (type instanceof GenericArrayType) {\r\n        GenericArrayType clazz = (GenericArrayType) type;\r\n        componentType = clazz.getGenericComponentType();\r\n        if (componentType instanceof TypeVariable) {\r\n            TypeVariable typeVar = (TypeVariable) componentType;\r\n            Type objType = parser.getContext().type;\r\n            if (objType instanceof ParameterizedType) {\r\n                ParameterizedType objParamType = (ParameterizedType) objType;\r\n                Type objRawType = objParamType.getRawType();\r\n                Type actualType = null;\r\n                if (objRawType instanceof Class) {\r\n                    TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters();\r\n                    for (int i = 0; i < objTypeParams.length; ++i) {\r\n                        if (objTypeParams[i].getName().equals(typeVar.getName())) {\r\n                            actualType = objParamType.getActualTypeArguments()[i];\r\n                        }\r\n                    }\r\n                }\r\n                if (actualType instanceof Class) {\r\n                    componentClass = (Class) actualType;\r\n                } else {\r\n                    componentClass = Object.class;\r\n                }\r\n            } else {\r\n                componentClass = TypeUtils.getClass(typeVar.getBounds()[0]);\r\n            }\r\n        } else {\r\n            componentClass = TypeUtils.getClass(componentType);\r\n        }\r\n    } else {\r\n        Class clazz = (Class) type;\r\n        componentType = componentClass = clazz.getComponentType();\r\n    }\r\n    JSONArray array = new JSONArray();\r\n    parser.parseArray(componentClass, array, fieldName);\r\n    return (T) toObjectArray(parser, componentClass, array);\r\n}", "class_name": "ObjectArrayCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.ObjectArrayCodec.deserialze", "qualified_signature": "com.alibaba.fastjson.serializer.ObjectArrayCodec.deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "toObjectArray", "return_type": "T", "signature": "toObjectArray(DefaultJSONParser, Class, JSONArray)", "body_content": "{\r\n    if (array == null) {\r\n        return null;\r\n    }\r\n    int size = array.size();\r\n    Object objArray = Array.newInstance(componentType, size);\r\n    for (int i = 0; i < size; ++i) {\r\n        Object value = array.get(i);\r\n        if (value == array) {\r\n            Array.set(objArray, i, objArray);\r\n            continue;\r\n        }\r\n        if (componentType.isArray()) {\r\n            Object element;\r\n            if (componentType.isInstance(value)) {\r\n                element = value;\r\n            } else {\r\n                element = toObjectArray(parser, componentType, (JSONArray) value);\r\n            }\r\n            Array.set(objArray, i, element);\r\n        } else {\r\n            Object element = null;\r\n            if (value instanceof JSONArray) {\r\n                boolean contains = false;\r\n                JSONArray valueArray = (JSONArray) value;\r\n                int valueArraySize = valueArray.size();\r\n                for (int y = 0; y < valueArraySize; ++y) {\r\n                    Object valueItem = valueArray.get(y);\r\n                    if (valueItem == array) {\r\n                        valueArray.set(i, objArray);\r\n                        contains = true;\r\n                    }\r\n                }\r\n                if (contains) {\r\n                    element = valueArray.toArray();\r\n                }\r\n            }\r\n            if (element == null) {\r\n                element = TypeUtils.cast(value, componentType, parser.getConfig());\r\n            }\r\n            Array.set(objArray, i, element);\r\n        }\r\n    }\r\n    array.setRelatedArray(objArray);\r\n    array.setComponentType(componentType);\r\n    // TODO\r\n    return (T) objArray;\r\n}", "class_name": "ObjectArrayCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.ObjectArrayCodec.toObjectArray", "qualified_signature": "com.alibaba.fastjson.serializer.ObjectArrayCodec.toObjectArray(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.Class<?>, com.alibaba.fastjson.JSONArray)", "qualified_return_type": "T"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return JSONToken.LBRACKET;\r\n}", "class_name": "ObjectArrayCodec", "qualified_method_name": "com.alibaba.fastjson.serializer.ObjectArrayCodec.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.serializer.ObjectArrayCodec.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "visitInsn", "return_type": "void", "signature": "visitInsn(int)", "body_content": "{\r\n    // adds the instruction to the bytecode of the method\r\n    code.putByte(opcode);\r\n    // update currentBlock\r\n    // Label currentBlock = this.currentBlock;\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.visitInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.visitInsn(int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "visitIntInsn", "return_type": "void", "signature": "visitIntInsn(int, int)", "body_content": "{\r\n    // Label currentBlock = this.currentBlock;\r\n    // adds the instruction to the bytecode of the method\r\n    // if (opcode == Opcodes.SIPUSH) {\r\n    // code.put12(opcode, operand);\r\n    // } else { // BIPUSH or NEWARRAY\r\n    code.put11(opcode, operand);\r\n    // }\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.visitIntInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.visitIntInsn(int, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "visitVarInsn", "return_type": "void", "signature": "visitVarInsn(int, int)", "body_content": "{\r\n    // Label currentBlock = this.currentBlock;\r\n    // adds the instruction to the bytecode of the method\r\n    if (var < 4 && opcode != Opcodes.RET) {\r\n        int opt;\r\n        if (opcode < Opcodes.ISTORE) {\r\n            /* ILOAD_0 */\r\n            opt = 26 + ((opcode - Opcodes.ILOAD) << 2) + var;\r\n        } else {\r\n            /* ISTORE_0 */\r\n            opt = 59 + ((opcode - Opcodes.ISTORE) << 2) + var;\r\n        }\r\n        code.putByte(opt);\r\n    } else if (var >= 256) {\r\n        code.putByte(196).put12(opcode, var);\r\n    } else {\r\n        code.put11(opcode, var);\r\n    }\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.visitVarInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.visitVarInsn(int, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "visitTypeInsn", "return_type": "void", "signature": "visitTypeInsn(int, String)", "body_content": "{\r\n    Item i = cw.newClassItem(type);\r\n    // Label currentBlock = this.currentBlock;\r\n    // adds the instruction to the bytecode of the method\r\n    code.put12(opcode, i.index);\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.visitTypeInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.visitTypeInsn(int, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "visitFieldInsn", "return_type": "void", "signature": "visitFieldInsn(int, String, String, String)", "body_content": "{\r\n    Item i = cw.newFieldItem(owner, name, desc);\r\n    // Label currentBlock = this.currentBlock;\r\n    // adds the instruction to the bytecode of the method\r\n    code.put12(opcode, i.index);\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.visitFieldInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "visitMethodInsn", "return_type": "void", "signature": "visitMethodInsn(int, String, String, String)", "body_content": "{\r\n    boolean itf = opcode == Opcodes.INVOKEINTERFACE;\r\n    Item i = cw.newMethodItem(owner, name, desc, itf);\r\n    int argSize = i.intVal;\r\n    // Label currentBlock = this.currentBlock;\r\n    // adds the instruction to the bytecode of the method\r\n    if (itf) {\r\n        if (argSize == 0) {\r\n            argSize = Type.getArgumentsAndReturnSizes(desc);\r\n            i.intVal = argSize;\r\n        }\r\n        code.put12(Opcodes.INVOKEINTERFACE, i.index).put11(argSize >> 2, 0);\r\n    } else {\r\n        code.put12(opcode, i.index);\r\n    }\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.visitMethodInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "visitJumpInsn", "return_type": "void", "signature": "visitJumpInsn(int, Label)", "body_content": "{\r\n    // Label currentBlock = this.currentBlock;\r\n    // adds the instruction to the bytecode of the method\r\n    if ((label.status & 2) != 0 && label.position - code.length < Short.MIN_VALUE) {\r\n        throw new UnsupportedOperationException();\r\n    } else {\r\n        /*\r\n             * case of a backward jump with an offset >= -32768, or of a forward jump with, of course, an unknown\r\n             * offset. In these cases we store the offset in 2 bytes (which will be increased in resizeInstructions, if\r\n             * needed).\r\n             */\r\n        code.putByte(opcode);\r\n        label.put(this, code, code.length - 1);\r\n    }\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.visitJumpInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.visitJumpInsn(int, com.alibaba.fastjson.asm.Label)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "visitLabel", "return_type": "void", "signature": "visitLabel(Label)", "body_content": "{\r\n    // resolves previous forward references to label, if any\r\n    label.resolve(this, code.length, code.data);\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.visitLabel", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.visitLabel(com.alibaba.fastjson.asm.Label)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "visitLdcInsn", "return_type": "void", "signature": "visitLdcInsn(Object)", "body_content": "{\r\n    Item i = cw.newConstItem(cst);\r\n    // Label currentBlock = this.currentBlock;\r\n    // adds the instruction to the bytecode of the method\r\n    int index = i.index;\r\n    if (i.type == 5 || /* ClassWriter.LONG */\r\n    i.type == 6) /* ClassWriter.DOUBLE */\r\n    {\r\n        code.put12(20, /* LDC2_W */\r\n        index);\r\n    } else if (index >= 256) {\r\n        code.put12(19, /* LDC_W */\r\n        index);\r\n    } else {\r\n        code.put11(18, /*Opcodes.LDC*/\r\n        index);\r\n    }\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.visitLdcInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.visitLdcInsn(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "visitIincInsn", "return_type": "void", "signature": "visitIincInsn(int, int)", "body_content": "{\r\n    // adds the instruction to the bytecode of the method\r\n    // if ((var > 255) || (increment > 127) || (increment < -128)) {\r\n    // code.putByte(196 /* WIDE */).put12(Opcodes.IINC, var).putShort(increment);\r\n    // } else {\r\n    code.putByte(132).put11(var, increment);\r\n    // }\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.visitIincInsn", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.visitIincInsn(int, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "visitMaxs", "return_type": "void", "signature": "visitMaxs(int, int)", "body_content": "{\r\n    this.maxStack = maxStack;\r\n    this.maxLocals = maxLocals;\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.visitMaxs", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.visitMaxs(int, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "visitEnd", "return_type": "void", "signature": "visitEnd()", "body_content": "{\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.visitEnd", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.visitEnd()", "qualified_return_type": "void"}
{"java_doc": "Returns the size of the bytecode of this method.\r\n\r\n@return the size of the bytecode of this method.\r\n", "method_name": "getSize", "return_type": "int", "signature": "getSize()", "body_content": "{\r\n    int size = 8;\r\n    if (code.length > 0) {\r\n        cw.newUTF8(\"Code\");\r\n        size += 18 + code.length + 8 * 0;\r\n    }\r\n    if (exceptionCount > 0) {\r\n        cw.newUTF8(\"Exceptions\");\r\n        size += 8 + 2 * exceptionCount;\r\n    }\r\n    return size;\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.getSize", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.getSize()", "qualified_return_type": "int"}
{"java_doc": "Puts the bytecode of this method in the given byte vector.\r\n\r\n@param out the byte vector into which the bytecode of this method must be copied.\r\n", "method_name": "put", "return_type": "void", "signature": "put(ByteVector)", "body_content": "{\r\n    // Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / (ClassWriter.ACC_SYNTHETIC_ATTRIBUTE / Opcodes.ACC_SYNTHETIC));\r\n    final int mask = 393216;\r\n    out.putShort(access & ~mask).putShort(name).putShort(desc);\r\n    int attributeCount = 0;\r\n    if (code.length > 0) {\r\n        ++attributeCount;\r\n    }\r\n    if (exceptionCount > 0) {\r\n        ++attributeCount;\r\n    }\r\n    out.putShort(attributeCount);\r\n    if (code.length > 0) {\r\n        // handlerCount\r\n        int size = 12 + code.length + 8 * 0;\r\n        out.putShort(cw.newUTF8(\"Code\")).putInt(size);\r\n        out.putShort(maxStack).putShort(maxLocals);\r\n        out.putInt(code.length).putByteArray(code.data, 0, code.length);\r\n        // handlerCount\r\n        out.putShort(0);\r\n        attributeCount = 0;\r\n        out.putShort(attributeCount);\r\n    }\r\n    if (exceptionCount > 0) {\r\n        out.putShort(cw.newUTF8(\"Exceptions\")).putInt(2 * exceptionCount + 2);\r\n        out.putShort(exceptionCount);\r\n        for (int i = 0; i < exceptionCount; ++i) {\r\n            out.putShort(exceptions[i]);\r\n        }\r\n    }\r\n}", "class_name": "MethodWriter", "qualified_method_name": "com.alibaba.fastjson.asm.MethodWriter.put", "qualified_signature": "com.alibaba.fastjson.asm.MethodWriter.put(com.alibaba.fastjson.asm.ByteVector)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getTypeKey", "return_type": "String", "signature": "getTypeKey()", "body_content": "{\r\n    return typeKey;\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.getTypeKey", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.getTypeKey()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "setTypeKey", "return_type": "void", "signature": "setTypeKey(String)", "body_content": "{\r\n    this.typeKey = typeKey;\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.setTypeKey", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.setTypeKey(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "createASMSerializer", "return_type": "JavaBeanSerializer", "signature": "createASMSerializer(SerializeBeanInfo)", "body_content": "{\r\n    JavaBeanSerializer serializer = asmFactory.createJavaBeanSerializer(beanInfo);\r\n    for (int i = 0; i < serializer.sortedGetters.length; ++i) {\r\n        FieldSerializer fieldDeser = serializer.sortedGetters[i];\r\n        Class<?> fieldClass = fieldDeser.fieldInfo.fieldClass;\r\n        if (fieldClass.isEnum()) {\r\n            ObjectSerializer fieldSer = this.getObjectWriter(fieldClass);\r\n            if (!(fieldSer instanceof EnumSerializer)) {\r\n                serializer.writeDirect = false;\r\n            }\r\n        }\r\n    }\r\n    return serializer;\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.createASMSerializer", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.createASMSerializer(com.alibaba.fastjson.serializer.SerializeBeanInfo)", "qualified_return_type": "com.alibaba.fastjson.serializer.JavaBeanSerializer"}
{"java_doc": "", "method_name": "createJavaBeanSerializer", "return_type": "ObjectSerializer", "signature": "createJavaBeanSerializer(Class)", "body_content": "{\r\n    SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, null, propertyNamingStrategy);\r\n    if (beanInfo.fields.length == 0 && Iterable.class.isAssignableFrom(clazz)) {\r\n        return MiscCodec.instance;\r\n    }\r\n    return createJavaBeanSerializer(beanInfo);\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.createJavaBeanSerializer", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.createJavaBeanSerializer(java.lang.Class<?>)", "qualified_return_type": "com.alibaba.fastjson.serializer.ObjectSerializer"}
{"java_doc": "", "method_name": "createJavaBeanSerializer", "return_type": "ObjectSerializer", "signature": "createJavaBeanSerializer(SerializeBeanInfo)", "body_content": "{\r\n    JSONType jsonType = beanInfo.jsonType;\r\n    if (jsonType != null) {\r\n        Class<?> serializerClass = jsonType.serializer();\r\n        if (serializerClass != Void.class) {\r\n            try {\r\n                Object seralizer = serializerClass.newInstance();\r\n                if (seralizer instanceof ObjectSerializer) {\r\n                    return (ObjectSerializer) seralizer;\r\n                }\r\n            } catch (Throwable e) {\r\n                // skip\r\n            }\r\n        }\r\n        if (jsonType.asm() == false) {\r\n            asm = false;\r\n        }\r\n    }\r\n    Class<?> clazz = beanInfo.beanType;\r\n    if (!Modifier.isPublic(beanInfo.beanType.getModifiers())) {\r\n        return new JavaBeanSerializer(beanInfo);\r\n    }\r\n    boolean asm = this.asm;\r\n    if (asm && asmFactory.classLoader.isExternalClass(clazz) || clazz == Serializable.class || clazz == Object.class) {\r\n        asm = false;\r\n    }\r\n    if (asm && !ASMUtils.checkName(clazz.getSimpleName())) {\r\n        asm = false;\r\n    }\r\n    if (asm) {\r\n        for (FieldInfo field : beanInfo.fields) {\r\n            JSONField annotation = field.getAnnotation();\r\n            if (annotation == null) {\r\n                continue;\r\n            }\r\n            if (// \r\n            (!ASMUtils.checkName(annotation.name())) || annotation.format().length() != 0 || annotation.jsonDirect() || annotation.serializeUsing() != Void.class) {\r\n                asm = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (asm) {\r\n        try {\r\n            ObjectSerializer asmSerializer = createASMSerializer(beanInfo);\r\n            if (asmSerializer != null) {\r\n                return asmSerializer;\r\n            }\r\n        } catch (ClassFormatError e) {\r\n            // skip\r\n        } catch (ClassCastException e) {\r\n            // skip\r\n        } catch (Throwable e) {\r\n            throw new JSONException(\"create asm serializer error, class \" + clazz, e);\r\n        }\r\n    }\r\n    return new JavaBeanSerializer(beanInfo);\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.createJavaBeanSerializer", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.createJavaBeanSerializer(com.alibaba.fastjson.serializer.SerializeBeanInfo)", "qualified_return_type": "com.alibaba.fastjson.serializer.ObjectSerializer"}
{"java_doc": "", "method_name": "isAsmEnable", "return_type": "boolean", "signature": "isAsmEnable()", "body_content": "{\r\n    return asm;\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.isAsmEnable", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.isAsmEnable()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "setAsmEnable", "return_type": "void", "signature": "setAsmEnable(boolean)", "body_content": "{\r\n    if (ASMUtils.IS_ANDROID) {\r\n        return;\r\n    }\r\n    this.asm = asmEnable;\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.setAsmEnable", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.setAsmEnable(boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getGlobalInstance", "return_type": "SerializeConfig", "signature": "getGlobalInstance()", "body_content": "{\r\n    return globalInstance;\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.getGlobalInstance", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.getGlobalInstance()", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializeConfig"}
{"java_doc": "add class level serialize filter\r\n\r\n@since 1.2.10\r\n", "method_name": "addFilter", "return_type": "void", "signature": "addFilter(Class, SerializeFilter)", "body_content": "{\r\n    ObjectSerializer serializer = getObjectWriter(clazz);\r\n    if (serializer instanceof SerializeFilterable) {\r\n        SerializeFilterable filterable = (SerializeFilterable) serializer;\r\n        if (this != SerializeConfig.globalInstance) {\r\n            if (filterable == MapSerializer.instance) {\r\n                MapSerializer newMapSer = new MapSerializer();\r\n                this.put(clazz, newMapSer);\r\n                newMapSer.addFilter(filter);\r\n                return;\r\n            }\r\n        }\r\n        filterable.addFilter(filter);\r\n    }\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.addFilter", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.addFilter(java.lang.Class<?>, com.alibaba.fastjson.serializer.SerializeFilter)", "qualified_return_type": "void"}
{"java_doc": "class level serializer feature config\r\n\r\n@since 1.2.12\r\n", "method_name": "config", "return_type": "void", "signature": "config(Class, SerializerFeature, boolean)", "body_content": "{\r\n    ObjectSerializer serializer = getObjectWriter(clazz, false);\r\n    if (serializer == null) {\r\n        SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, null, propertyNamingStrategy);\r\n        if (value) {\r\n            beanInfo.features |= feature.mask;\r\n        } else {\r\n            beanInfo.features &= ~feature.mask;\r\n        }\r\n        serializer = this.createJavaBeanSerializer(beanInfo);\r\n        put(clazz, serializer);\r\n        return;\r\n    }\r\n    if (serializer instanceof JavaBeanSerializer) {\r\n        JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) serializer;\r\n        SerializeBeanInfo beanInfo = javaBeanSerializer.beanInfo;\r\n        int originalFeaturs = beanInfo.features;\r\n        if (value) {\r\n            beanInfo.features |= feature.mask;\r\n        } else {\r\n            beanInfo.features &= ~feature.mask;\r\n        }\r\n        if (originalFeaturs == beanInfo.features) {\r\n            return;\r\n        }\r\n        Class<?> serializerClass = serializer.getClass();\r\n        if (serializerClass != JavaBeanSerializer.class) {\r\n            ObjectSerializer newSerializer = this.createJavaBeanSerializer(beanInfo);\r\n            this.put(clazz, newSerializer);\r\n        }\r\n    }\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.config", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.config(java.lang.Class<?>, com.alibaba.fastjson.serializer.SerializerFeature, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getObjectWriter", "return_type": "ObjectSerializer", "signature": "getObjectWriter(Class)", "body_content": "{\r\n    return getObjectWriter(clazz, true);\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.getObjectWriter", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.getObjectWriter(java.lang.Class<?>)", "qualified_return_type": "com.alibaba.fastjson.serializer.ObjectSerializer"}
{"java_doc": "", "method_name": "getObjectWriter", "return_type": "ObjectSerializer", "signature": "getObjectWriter(Class, boolean)", "body_content": "{\r\n    ObjectSerializer writer = serializers.get(clazz);\r\n    if (writer == null) {\r\n        try {\r\n            final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\r\n            for (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) {\r\n                if (!(o instanceof AutowiredObjectSerializer)) {\r\n                    continue;\r\n                }\r\n                AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;\r\n                for (Type forType : autowired.getAutowiredFor()) {\r\n                    put(forType, autowired);\r\n                }\r\n            }\r\n        } catch (ClassCastException ex) {\r\n            // skip\r\n        }\r\n        writer = serializers.get(clazz);\r\n    }\r\n    if (writer == null) {\r\n        final ClassLoader classLoader = JSON.class.getClassLoader();\r\n        if (classLoader != Thread.currentThread().getContextClassLoader()) {\r\n            try {\r\n                for (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) {\r\n                    if (!(o instanceof AutowiredObjectSerializer)) {\r\n                        continue;\r\n                    }\r\n                    AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;\r\n                    for (Type forType : autowired.getAutowiredFor()) {\r\n                        put(forType, autowired);\r\n                    }\r\n                }\r\n            } catch (ClassCastException ex) {\r\n                // skip\r\n            }\r\n            writer = serializers.get(clazz);\r\n        }\r\n    }\r\n    if (writer == null) {\r\n        if (Map.class.isAssignableFrom(clazz)) {\r\n            put(clazz, MapSerializer.instance);\r\n        } else if (List.class.isAssignableFrom(clazz)) {\r\n            put(clazz, ListSerializer.instance);\r\n        } else if (Collection.class.isAssignableFrom(clazz)) {\r\n            put(clazz, CollectionCodec.instance);\r\n        } else if (Date.class.isAssignableFrom(clazz)) {\r\n            put(clazz, DateCodec.instance);\r\n        } else if (JSONAware.class.isAssignableFrom(clazz)) {\r\n            put(clazz, JSONAwareSerializer.instance);\r\n        } else if (JSONSerializable.class.isAssignableFrom(clazz)) {\r\n            put(clazz, JSONSerializableSerializer.instance);\r\n        } else if (JSONStreamAware.class.isAssignableFrom(clazz)) {\r\n            put(clazz, MiscCodec.instance);\r\n        } else if (clazz.isEnum() || (clazz.getSuperclass() != null && clazz.getSuperclass().isEnum())) {\r\n            put(clazz, EnumSerializer.instance);\r\n        } else if (clazz.isArray()) {\r\n            Class<?> componentType = clazz.getComponentType();\r\n            ObjectSerializer compObjectSerializer = getObjectWriter(componentType);\r\n            put(clazz, new ArraySerializer(componentType, compObjectSerializer));\r\n        } else if (Throwable.class.isAssignableFrom(clazz)) {\r\n            SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, null, propertyNamingStrategy);\r\n            beanInfo.features |= SerializerFeature.WriteClassName.mask;\r\n            put(clazz, new JavaBeanSerializer(beanInfo));\r\n        } else if (TimeZone.class.isAssignableFrom(clazz)) {\r\n            put(clazz, MiscCodec.instance);\r\n        } else if (Appendable.class.isAssignableFrom(clazz)) {\r\n            put(clazz, AppendableSerializer.instance);\r\n        } else if (Charset.class.isAssignableFrom(clazz)) {\r\n            put(clazz, ToStringSerializer.instance);\r\n        } else if (Enumeration.class.isAssignableFrom(clazz)) {\r\n            put(clazz, EnumerationSerializer.instance);\r\n        } else if (// \r\n        Calendar.class.isAssignableFrom(clazz) || XMLGregorianCalendar.class.isAssignableFrom(clazz)) {\r\n            put(clazz, CalendarCodec.instance);\r\n        } else if (Clob.class.isAssignableFrom(clazz)) {\r\n            put(clazz, ClobSeriliazer.instance);\r\n        } else if (TypeUtils.isPath(clazz)) {\r\n            put(clazz, ToStringSerializer.instance);\r\n        } else if (Iterator.class.isAssignableFrom(clazz)) {\r\n            put(clazz, MiscCodec.instance);\r\n        } else {\r\n            String className = clazz.getName();\r\n            if (// \r\n            className.startsWith(\"java.awt.\") && // \r\n            AwtCodec.support(clazz)) {\r\n                // awt\r\n                if (!awtError) {\r\n                    try {\r\n                        put(Class.forName(\"java.awt.Color\"), AwtCodec.instance);\r\n                        put(Class.forName(\"java.awt.Font\"), AwtCodec.instance);\r\n                        put(Class.forName(\"java.awt.Point\"), AwtCodec.instance);\r\n                        put(Class.forName(\"java.awt.Rectangle\"), AwtCodec.instance);\r\n                    } catch (Throwable e) {\r\n                        awtError = true;\r\n                        // skip\r\n                    }\r\n                }\r\n                return AwtCodec.instance;\r\n            }\r\n            // jdk8\r\n            if (// \r\n            (!jdk8Error) && (// \r\n            className.startsWith(\"java.time.\") || // \r\n            className.startsWith(\"java.util.Optional\"))) {\r\n                try {\r\n                    put(Class.forName(\"java.time.LocalDateTime\"), Jdk8DateCodec.instance);\r\n                    put(Class.forName(\"java.time.LocalDate\"), Jdk8DateCodec.instance);\r\n                    put(Class.forName(\"java.time.LocalTime\"), Jdk8DateCodec.instance);\r\n                    put(Class.forName(\"java.time.ZonedDateTime\"), Jdk8DateCodec.instance);\r\n                    put(Class.forName(\"java.time.OffsetDateTime\"), Jdk8DateCodec.instance);\r\n                    put(Class.forName(\"java.time.OffsetTime\"), Jdk8DateCodec.instance);\r\n                    put(Class.forName(\"java.time.ZoneOffset\"), Jdk8DateCodec.instance);\r\n                    put(Class.forName(\"java.time.ZoneRegion\"), Jdk8DateCodec.instance);\r\n                    put(Class.forName(\"java.time.Period\"), Jdk8DateCodec.instance);\r\n                    put(Class.forName(\"java.time.Duration\"), Jdk8DateCodec.instance);\r\n                    put(Class.forName(\"java.time.Instant\"), Jdk8DateCodec.instance);\r\n                    put(Class.forName(\"java.util.Optional\"), OptionalCodec.instance);\r\n                    put(Class.forName(\"java.util.OptionalDouble\"), OptionalCodec.instance);\r\n                    put(Class.forName(\"java.util.OptionalInt\"), OptionalCodec.instance);\r\n                    put(Class.forName(\"java.util.OptionalLong\"), OptionalCodec.instance);\r\n                    writer = serializers.get(clazz);\r\n                    if (writer != null) {\r\n                        return writer;\r\n                    }\r\n                } catch (Throwable e) {\r\n                    // skip\r\n                    jdk8Error = true;\r\n                }\r\n            }\r\n            if (// \r\n            (!oracleJdbcError) && className.startsWith(\"oracle.sql.\")) {\r\n                try {\r\n                    put(Class.forName(\"oracle.sql.DATE\"), DateCodec.instance);\r\n                    put(Class.forName(\"oracle.sql.TIMESTAMP\"), DateCodec.instance);\r\n                    writer = serializers.get(clazz);\r\n                    if (writer != null) {\r\n                        return writer;\r\n                    }\r\n                } catch (Throwable e) {\r\n                    // skip\r\n                    oracleJdbcError = true;\r\n                }\r\n            }\r\n            if (// \r\n            (!springfoxError) && className.equals(\"springfox.documentation.spring.web.json.Json\")) {\r\n                try {\r\n                    // \r\n                    put(// \r\n                    Class.forName(\"springfox.documentation.spring.web.json.Json\"), SwaggerJsonSerializer.instance);\r\n                    writer = serializers.get(clazz);\r\n                    if (writer != null) {\r\n                        return writer;\r\n                    }\r\n                } catch (ClassNotFoundException e) {\r\n                    // skip\r\n                    springfoxError = true;\r\n                }\r\n            }\r\n            if (TypeUtils.isProxy(clazz)) {\r\n                Class<?> superClazz = clazz.getSuperclass();\r\n                ObjectSerializer superWriter = getObjectWriter(superClazz);\r\n                putInternal(clazz, superWriter);\r\n                return superWriter;\r\n            }\r\n            if (create) {\r\n                putInternal(clazz, createJavaBeanSerializer(clazz));\r\n            }\r\n        }\r\n        writer = serializers.get(clazz);\r\n    }\r\n    return writer;\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.getObjectWriter", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.getObjectWriter(java.lang.Class<?>, boolean)", "qualified_return_type": "com.alibaba.fastjson.serializer.ObjectSerializer"}
{"java_doc": "", "method_name": "get", "return_type": "ObjectSerializer", "signature": "get(Type)", "body_content": "{\r\n    return this.serializers.get(key);\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.get", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.get(java.lang.reflect.Type)", "qualified_return_type": "com.alibaba.fastjson.serializer.ObjectSerializer"}
{"java_doc": "", "method_name": "put", "return_type": "boolean", "signature": "put(Type, ObjectSerializer)", "body_content": "{\r\n    boolean isEnum = false;\r\n    if (type instanceof Class) {\r\n        Class<?> clazz = (Class<?>) type;\r\n        isEnum = clazz.isEnum();\r\n    }\r\n    if (isEnum) {\r\n    }\r\n    return putInternal(type, value);\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.put", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.put(java.lang.reflect.Type, com.alibaba.fastjson.serializer.ObjectSerializer)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "putInternal", "return_type": "boolean", "signature": "putInternal(Type, ObjectSerializer)", "body_content": "{\r\n    return this.serializers.put(key, value);\r\n}", "class_name": "SerializeConfig", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeConfig.putInternal", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeConfig.putInternal(java.lang.reflect.Type, com.alibaba.fastjson.serializer.ObjectSerializer)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getFunction", "return_type": "String", "signature": "getFunction()", "body_content": "{\r\n    return function;\r\n}", "class_name": "JSONPObject", "qualified_method_name": "com.alibaba.fastjson.JSONPObject.getFunction", "qualified_signature": "com.alibaba.fastjson.JSONPObject.getFunction()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "setFunction", "return_type": "void", "signature": "setFunction(String)", "body_content": "{\r\n    this.function = function;\r\n}", "class_name": "JSONPObject", "qualified_method_name": "com.alibaba.fastjson.JSONPObject.setFunction", "qualified_signature": "com.alibaba.fastjson.JSONPObject.setFunction(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getParameters", "return_type": "List<Object>", "signature": "getParameters()", "body_content": "{\r\n    return parameters;\r\n}", "class_name": "JSONPObject", "qualified_method_name": "com.alibaba.fastjson.JSONPObject.getParameters", "qualified_signature": "com.alibaba.fastjson.JSONPObject.getParameters()", "qualified_return_type": "java.util.List<java.lang.Object>"}
{"java_doc": "", "method_name": "addParameter", "return_type": "void", "signature": "addParameter(Object)", "body_content": "{\r\n    this.parameters.add(parameter);\r\n}", "class_name": "JSONPObject", "qualified_method_name": "com.alibaba.fastjson.JSONPObject.addParameter", "qualified_signature": "com.alibaba.fastjson.JSONPObject.addParameter(java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "toJSONString", "return_type": "String", "signature": "toJSONString()", "body_content": "{\r\n    return toString();\r\n}", "class_name": "JSONPObject", "qualified_method_name": "com.alibaba.fastjson.JSONPObject.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSONPObject.toJSONString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Type, int)", "body_content": "{\r\n    SerializeWriter writer = serializer.out;\r\n    writer.write(function);\r\n    writer.write('(');\r\n    for (int i = 0; i < parameters.size(); ++i) {\r\n        if (i != 0) {\r\n            writer.write(',');\r\n        }\r\n        serializer.write(parameters.get(i));\r\n    }\r\n    writer.write(')');\r\n}", "class_name": "JSONPObject", "qualified_method_name": "com.alibaba.fastjson.JSONPObject.write", "qualified_signature": "com.alibaba.fastjson.JSONPObject.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "toString", "return_type": "String", "signature": "toString()", "body_content": "{\r\n    return JSON.toJSONString(this);\r\n}", "class_name": "JSONPObject", "qualified_method_name": "com.alibaba.fastjson.JSONPObject.toString", "qualified_signature": "com.alibaba.fastjson.JSONPObject.toString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "init", "return_type": "void", "signature": "init()", "body_content": "{\r\n    if (segments != null) {\r\n        return;\r\n    }\r\n    if (\"*\".equals(path)) {\r\n        this.segments = new Segement[] { WildCardSegement.instance };\r\n    } else {\r\n        JSONPathParser parser = new JSONPathParser(path);\r\n        this.segments = parser.explain();\r\n    }\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.init", "qualified_signature": "com.alibaba.fastjson.JSONPath.init()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "eval", "return_type": "Object", "signature": "eval(Object)", "body_content": "{\r\n    if (rootObject == null) {\r\n        return null;\r\n    }\r\n    init();\r\n    Object currentObject = rootObject;\r\n    for (int i = 0; i < segments.length; ++i) {\r\n        currentObject = segments[i].eval(this, rootObject, currentObject);\r\n    }\r\n    return currentObject;\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.eval", "qualified_signature": "com.alibaba.fastjson.JSONPath.eval(java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "contains", "return_type": "boolean", "signature": "contains(Object)", "body_content": "{\r\n    if (rootObject == null) {\r\n        return false;\r\n    }\r\n    init();\r\n    Object currentObject = rootObject;\r\n    for (int i = 0; i < segments.length; ++i) {\r\n        currentObject = segments[i].eval(this, rootObject, currentObject);\r\n        if (currentObject == null) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.contains", "qualified_signature": "com.alibaba.fastjson.JSONPath.contains(java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "containsValue", "return_type": "boolean", "signature": "containsValue(Object, Object)", "body_content": "{\r\n    Object currentObject = eval(rootObject);\r\n    if (currentObject == value) {\r\n        return true;\r\n    }\r\n    if (currentObject == null) {\r\n        return false;\r\n    }\r\n    if (currentObject instanceof Iterable) {\r\n        Iterator it = ((Iterable) currentObject).iterator();\r\n        while (it.hasNext()) {\r\n            Object item = it.next();\r\n            if (eq(item, value)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    return eq(currentObject, value);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.containsValue", "qualified_signature": "com.alibaba.fastjson.JSONPath.containsValue(java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "size", "return_type": "int", "signature": "size(Object)", "body_content": "{\r\n    if (rootObject == null) {\r\n        return -1;\r\n    }\r\n    init();\r\n    Object currentObject = rootObject;\r\n    for (int i = 0; i < segments.length; ++i) {\r\n        currentObject = segments[i].eval(this, rootObject, currentObject);\r\n    }\r\n    return evalSize(currentObject);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.size", "qualified_signature": "com.alibaba.fastjson.JSONPath.size(java.lang.Object)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "arrayAdd", "return_type": "void", "signature": "arrayAdd(Object, Object[])", "body_content": "{\r\n    if (values == null || values.length == 0) {\r\n        return;\r\n    }\r\n    if (rootObject == null) {\r\n        return;\r\n    }\r\n    init();\r\n    Object currentObject = rootObject;\r\n    Object parentObject = null;\r\n    for (int i = 0; i < segments.length; ++i) {\r\n        if (i == segments.length - 1) {\r\n            parentObject = currentObject;\r\n        }\r\n        currentObject = segments[i].eval(this, rootObject, currentObject);\r\n    }\r\n    Object result = currentObject;\r\n    if (result == null) {\r\n        throw new JSONPathException(\"value not found in path \" + path);\r\n    }\r\n    if (result instanceof Collection) {\r\n        Collection collection = (Collection) result;\r\n        for (Object value : values) {\r\n            collection.add(value);\r\n        }\r\n        return;\r\n    }\r\n    Class<?> resultClass = result.getClass();\r\n    Object newResult;\r\n    if (resultClass.isArray()) {\r\n        int length = Array.getLength(result);\r\n        Object descArray = Array.newInstance(resultClass.getComponentType(), length + values.length);\r\n        System.arraycopy(result, 0, descArray, 0, length);\r\n        for (int i = 0; i < values.length; ++i) {\r\n            Array.set(descArray, length + i, values[i]);\r\n        }\r\n        newResult = descArray;\r\n    } else {\r\n        throw new JSONException(\"unsupported array put operation. \" + resultClass);\r\n    }\r\n    Segement lastSegement = segments[segments.length - 1];\r\n    if (lastSegement instanceof PropertySegement) {\r\n        PropertySegement propertySegement = (PropertySegement) lastSegement;\r\n        propertySegement.setValue(this, parentObject, newResult);\r\n        return;\r\n    }\r\n    if (lastSegement instanceof ArrayAccessSegement) {\r\n        ((ArrayAccessSegement) lastSegement).setValue(this, parentObject, newResult);\r\n        return;\r\n    }\r\n    throw new UnsupportedOperationException();\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.arrayAdd", "qualified_signature": "com.alibaba.fastjson.JSONPath.arrayAdd(java.lang.Object, java.lang.Object...)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "remove", "return_type": "boolean", "signature": "remove(Object)", "body_content": "{\r\n    if (rootObject == null) {\r\n        return false;\r\n    }\r\n    init();\r\n    Object currentObject = rootObject;\r\n    Object parentObject = null;\r\n    for (int i = 0; i < segments.length; ++i) {\r\n        if (i == segments.length - 1) {\r\n            parentObject = currentObject;\r\n            break;\r\n        }\r\n        currentObject = segments[i].eval(this, rootObject, currentObject);\r\n        if (currentObject == null) {\r\n            break;\r\n        }\r\n    }\r\n    if (parentObject == null) {\r\n        return false;\r\n    }\r\n    Segement lastSegement = segments[segments.length - 1];\r\n    if (lastSegement instanceof PropertySegement) {\r\n        PropertySegement propertySegement = (PropertySegement) lastSegement;\r\n        return propertySegement.remove(this, parentObject);\r\n    }\r\n    if (lastSegement instanceof ArrayAccessSegement) {\r\n        return ((ArrayAccessSegement) lastSegement).remove(this, parentObject);\r\n    }\r\n    throw new UnsupportedOperationException();\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.remove", "qualified_signature": "com.alibaba.fastjson.JSONPath.remove(java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "set", "return_type": "boolean", "signature": "set(Object, Object)", "body_content": "{\r\n    if (rootObject == null) {\r\n        return false;\r\n    }\r\n    init();\r\n    Object currentObject = rootObject;\r\n    Object parentObject = null;\r\n    for (int i = 0; i < segments.length; ++i) {\r\n        // if (i == segments.length - 1) {\r\n        // parentObject = currentObject;\r\n        // break;\r\n        // }\r\n        // \r\n        parentObject = currentObject;\r\n        Segement segment = segments[i];\r\n        currentObject = segment.eval(this, rootObject, currentObject);\r\n        if (currentObject == null) {\r\n            Segement nextSegement = null;\r\n            if (i < segments.length - 1) {\r\n                nextSegement = segments[i + 1];\r\n            }\r\n            Object newObj = null;\r\n            if (nextSegement instanceof PropertySegement) {\r\n                newObj = new JSONObject();\r\n            } else if (nextSegement instanceof ArrayAccessSegement) {\r\n                newObj = new JSONArray();\r\n            }\r\n            if (newObj != null) {\r\n                if (segment instanceof PropertySegement) {\r\n                    PropertySegement propSegement = (PropertySegement) segment;\r\n                    propSegement.setValue(this, parentObject, newObj);\r\n                    currentObject = newObj;\r\n                    continue;\r\n                } else if (segment instanceof ArrayAccessSegement) {\r\n                    ArrayAccessSegement arrayAccessSegement = (ArrayAccessSegement) segment;\r\n                    arrayAccessSegement.setValue(this, parentObject, newObj);\r\n                    currentObject = newObj;\r\n                    continue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    if (parentObject == null) {\r\n        return false;\r\n    }\r\n    Segement lastSegement = segments[segments.length - 1];\r\n    if (lastSegement instanceof PropertySegement) {\r\n        PropertySegement propertySegement = (PropertySegement) lastSegement;\r\n        propertySegement.setValue(this, parentObject, value);\r\n        return true;\r\n    }\r\n    if (lastSegement instanceof ArrayAccessSegement) {\r\n        return ((ArrayAccessSegement) lastSegement).setValue(this, parentObject, value);\r\n    }\r\n    throw new UnsupportedOperationException();\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.set", "qualified_signature": "com.alibaba.fastjson.JSONPath.set(java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "eval", "return_type": "Object", "signature": "eval(Object, String)", "body_content": "{\r\n    JSONPath jsonpath = compile(path);\r\n    return jsonpath.eval(rootObject);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.eval", "qualified_signature": "com.alibaba.fastjson.JSONPath.eval(java.lang.Object, java.lang.String)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "size", "return_type": "int", "signature": "size(Object, String)", "body_content": "{\r\n    JSONPath jsonpath = compile(path);\r\n    Object result = jsonpath.eval(rootObject);\r\n    return jsonpath.evalSize(result);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.size", "qualified_signature": "com.alibaba.fastjson.JSONPath.size(java.lang.Object, java.lang.String)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "contains", "return_type": "boolean", "signature": "contains(Object, String)", "body_content": "{\r\n    if (rootObject == null) {\r\n        return false;\r\n    }\r\n    JSONPath jsonpath = compile(path);\r\n    return jsonpath.contains(rootObject);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.contains", "qualified_signature": "com.alibaba.fastjson.JSONPath.contains(java.lang.Object, java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "containsValue", "return_type": "boolean", "signature": "containsValue(Object, String, Object)", "body_content": "{\r\n    JSONPath jsonpath = compile(path);\r\n    return jsonpath.containsValue(rootObject, value);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.containsValue", "qualified_signature": "com.alibaba.fastjson.JSONPath.containsValue(java.lang.Object, java.lang.String, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "arrayAdd", "return_type": "void", "signature": "arrayAdd(Object, String, Object[])", "body_content": "{\r\n    JSONPath jsonpath = compile(path);\r\n    jsonpath.arrayAdd(rootObject, values);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.arrayAdd", "qualified_signature": "com.alibaba.fastjson.JSONPath.arrayAdd(java.lang.Object, java.lang.String, java.lang.Object...)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "set", "return_type": "boolean", "signature": "set(Object, String, Object)", "body_content": "{\r\n    JSONPath jsonpath = compile(path);\r\n    return jsonpath.set(rootObject, value);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.set", "qualified_signature": "com.alibaba.fastjson.JSONPath.set(java.lang.Object, java.lang.String, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "remove", "return_type": "boolean", "signature": "remove(Object, String)", "body_content": "{\r\n    JSONPath jsonpath = compile(path);\r\n    return jsonpath.remove(root);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.remove", "qualified_signature": "com.alibaba.fastjson.JSONPath.remove(java.lang.Object, java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "compile", "return_type": "JSONPath", "signature": "compile(String)", "body_content": "{\r\n    if (path == null) {\r\n        throw new JSONPathException(\"jsonpath can not be null\");\r\n    }\r\n    JSONPath jsonpath = pathCache.get(path);\r\n    if (jsonpath == null) {\r\n        jsonpath = new JSONPath(path);\r\n        if (pathCache.size() < CACHE_SIZE) {\r\n            pathCache.putIfAbsent(path, jsonpath);\r\n            jsonpath = pathCache.get(path);\r\n        }\r\n    }\r\n    return jsonpath;\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.compile", "qualified_signature": "com.alibaba.fastjson.JSONPath.compile(java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.JSONPath"}
{"java_doc": "\r\n@since 1.2.9\r\n@param json\r\n@param path\r\n@return\r\n", "method_name": "read", "return_type": "Object", "signature": "read(String, String)", "body_content": "{\r\n    Object object = JSON.parse(json);\r\n    JSONPath jsonpath = compile(path);\r\n    return jsonpath.eval(object);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.read", "qualified_signature": "com.alibaba.fastjson.JSONPath.read(java.lang.String, java.lang.String)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "paths", "return_type": "Map<String, Object>", "signature": "paths(Object)", "body_content": "{\r\n    return paths(javaObject, SerializeConfig.globalInstance);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.paths", "qualified_signature": "com.alibaba.fastjson.JSONPath.paths(java.lang.Object)", "qualified_return_type": "java.util.Map<java.lang.String, java.lang.Object>"}
{"java_doc": "", "method_name": "paths", "return_type": "Map<String, Object>", "signature": "paths(Object, SerializeConfig)", "body_content": "{\r\n    Map<Object, String> values = new IdentityHashMap<Object, String>();\r\n    paths(values, \"/\", javaObject, config);\r\n    Map<String, Object> paths = new HashMap<String, Object>();\r\n    for (Map.Entry<Object, String> entry : values.entrySet()) {\r\n        paths.put(entry.getValue(), entry.getKey());\r\n    }\r\n    return paths;\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.paths", "qualified_signature": "com.alibaba.fastjson.JSONPath.paths(java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig)", "qualified_return_type": "java.util.Map<java.lang.String, java.lang.Object>"}
{"java_doc": "", "method_name": "paths", "return_type": "void", "signature": "paths(Map, String, Object, SerializeConfig)", "body_content": "{\r\n    if (javaObject == null) {\r\n        return;\r\n    }\r\n    if (paths.containsKey(javaObject)) {\r\n        return;\r\n    }\r\n    paths.put(javaObject, parent);\r\n    if (javaObject instanceof Map) {\r\n        Map map = (Map) javaObject;\r\n        for (Object entryObj : map.entrySet()) {\r\n            Map.Entry entry = (Map.Entry) entryObj;\r\n            Object key = entry.getKey();\r\n            if (key instanceof String) {\r\n                String path = parent.equals(\"/\") ? \"/\" + key : parent + \"/\" + key;\r\n                paths(paths, path, entry.getValue(), config);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    if (javaObject instanceof Collection) {\r\n        Collection collection = (Collection) javaObject;\r\n        int i = 0;\r\n        for (Object item : collection) {\r\n            String path = parent.equals(\"/\") ? \"/\" + i : parent + \"/\" + i;\r\n            paths(paths, path, item, config);\r\n            ++i;\r\n        }\r\n        return;\r\n    }\r\n    Class<?> clazz = javaObject.getClass();\r\n    if (clazz.isArray()) {\r\n        int len = Array.getLength(javaObject);\r\n        for (int i = 0; i < len; ++i) {\r\n            Object item = Array.get(javaObject, i);\r\n            String path = parent.equals(\"/\") ? \"/\" + i : parent + \"/\" + i;\r\n            paths(paths, path, item, config);\r\n            ++i;\r\n        }\r\n        return;\r\n    }\r\n    if (ParserConfig.isPrimitive(clazz) || clazz.isEnum()) {\r\n        return;\r\n    }\r\n    ObjectSerializer serializer = config.getObjectWriter(clazz);\r\n    if (serializer instanceof JavaBeanSerializer) {\r\n        JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) serializer;\r\n        try {\r\n            Map<String, Object> fieldValues = javaBeanSerializer.getFieldValuesMap(javaObject);\r\n            for (Map.Entry<String, Object> entry : fieldValues.entrySet()) {\r\n                String key = entry.getKey();\r\n                if (key instanceof String) {\r\n                    String path = parent.equals(\"/\") ? \"/\" + key : parent + \"/\" + key;\r\n                    paths(paths, path, entry.getValue(), config);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            throw new JSONException(\"toJSON error\", e);\r\n        }\r\n        return;\r\n    }\r\n    return;\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.paths", "qualified_signature": "com.alibaba.fastjson.JSONPath.paths(java.util.Map<java.lang.Object, java.lang.String>, java.lang.String, java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getPath", "return_type": "String", "signature": "getPath()", "body_content": "{\r\n    return path;\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.getPath", "qualified_signature": "com.alibaba.fastjson.JSONPath.getPath()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "next", "return_type": "void", "signature": "next()", "body_content": "{\r\n    ch = path.charAt(pos++);\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.next", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.next()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "isEOF", "return_type": "boolean", "signature": "isEOF()", "body_content": "{\r\n    return pos >= path.length();\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.isEOF", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.isEOF()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "readSegement", "return_type": "Segement", "signature": "readSegement()", "body_content": "{\r\n    if (level == 0 && path.length() == 1) {\r\n        if (isDigitFirst(ch)) {\r\n            int index = ch - '0';\r\n            return new ArrayAccessSegement(index);\r\n        } else if ((ch >= 'a' && ch <= 'z') || ((ch >= 'A' && ch <= 'Z'))) {\r\n            return new PropertySegement(Character.toString(ch), false);\r\n        }\r\n    }\r\n    while (!isEOF()) {\r\n        skipWhitespace();\r\n        if (ch == '$') {\r\n            next();\r\n            continue;\r\n        }\r\n        if (ch == '.' || ch == '/') {\r\n            int c0 = ch;\r\n            boolean deep = false;\r\n            next();\r\n            if (c0 == '.' && ch == '.') {\r\n                next();\r\n                deep = true;\r\n            }\r\n            if (ch == '*') {\r\n                if (!isEOF()) {\r\n                    next();\r\n                }\r\n                return WildCardSegement.instance;\r\n            }\r\n            if (isDigitFirst(ch)) {\r\n                return parseArrayAccess(false);\r\n            }\r\n            String propertyName = readName();\r\n            if (ch == '(') {\r\n                next();\r\n                if (ch == ')') {\r\n                    if (!isEOF()) {\r\n                        next();\r\n                    }\r\n                    if (\"size\".equals(propertyName)) {\r\n                        return SizeSegement.instance;\r\n                    }\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n                throw new UnsupportedOperationException();\r\n            }\r\n            return new PropertySegement(propertyName, deep);\r\n        }\r\n        if (ch == '[') {\r\n            return parseArrayAccess(true);\r\n        }\r\n        if (level == 0) {\r\n            String propertyName = readName();\r\n            return new PropertySegement(propertyName, false);\r\n        }\r\n        throw new UnsupportedOperationException();\r\n    }\r\n    return null;\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.readSegement", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.readSegement()", "qualified_return_type": "com.alibaba.fastjson.JSONPath.Segement"}
{"java_doc": "", "method_name": "skipWhitespace", "return_type": "void", "signature": "skipWhitespace()", "body_content": "{\r\n    for (; ; ) {\r\n        if (ch <= ' ' && (ch == ' ' || ch == '\\r' || ch == '\\n' || ch == '\\t' || ch == '\\f' || ch == '\\b')) {\r\n            next();\r\n            continue;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.skipWhitespace", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.skipWhitespace()", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "parseArrayAccess", "return_type": "Segement", "signature": "parseArrayAccess(boolean)", "body_content": "{\r\n    if (acceptBracket) {\r\n        accept('[');\r\n    }\r\n    boolean predicateFlag = false;\r\n    if (ch == '?') {\r\n        next();\r\n        accept('(');\r\n        if (ch == '@') {\r\n            next();\r\n            accept('.');\r\n        }\r\n        predicateFlag = true;\r\n    }\r\n    if (predicateFlag || IOUtils.firstIdentifier(ch)) {\r\n        String propertyName = readName();\r\n        skipWhitespace();\r\n        if (predicateFlag && ch == ')') {\r\n            next();\r\n            if (acceptBracket) {\r\n                accept(']');\r\n            }\r\n            return new FilterSegement(new NotNullSegement(propertyName));\r\n        }\r\n        if (acceptBracket && ch == ']') {\r\n            next();\r\n            return new FilterSegement(new NotNullSegement(propertyName));\r\n        }\r\n        Operator op = readOp();\r\n        skipWhitespace();\r\n        if (op == Operator.BETWEEN || op == Operator.NOT_BETWEEN) {\r\n            final boolean not = (op == Operator.NOT_BETWEEN);\r\n            Object startValue = readValue();\r\n            String name = readName();\r\n            if (!\"and\".equalsIgnoreCase(name)) {\r\n                throw new JSONPathException(path);\r\n            }\r\n            Object endValue = readValue();\r\n            if (startValue == null || endValue == null) {\r\n                throw new JSONPathException(path);\r\n            }\r\n            if (isInt(startValue.getClass()) && isInt(endValue.getClass())) {\r\n                Filter filter = new IntBetweenSegement(propertyName, ((Number) startValue).longValue(), ((Number) endValue).longValue(), not);\r\n                return new FilterSegement(filter);\r\n            }\r\n            throw new JSONPathException(path);\r\n        }\r\n        if (op == Operator.IN || op == Operator.NOT_IN) {\r\n            final boolean not = (op == Operator.NOT_IN);\r\n            accept('(');\r\n            List<Object> valueList = new JSONArray();\r\n            {\r\n                Object value = readValue();\r\n                valueList.add(value);\r\n                for (; ; ) {\r\n                    skipWhitespace();\r\n                    if (ch != ',') {\r\n                        break;\r\n                    }\r\n                    next();\r\n                    value = readValue();\r\n                    valueList.add(value);\r\n                }\r\n                accept(')');\r\n                if (predicateFlag) {\r\n                    accept(')');\r\n                }\r\n                if (acceptBracket) {\r\n                    accept(']');\r\n                }\r\n            }\r\n            boolean isInt = true;\r\n            boolean isIntObj = true;\r\n            boolean isString = true;\r\n            for (Object item : valueList) {\r\n                if (item == null) {\r\n                    if (isInt) {\r\n                        isInt = false;\r\n                    }\r\n                    continue;\r\n                }\r\n                Class<?> clazz = item.getClass();\r\n                if (isInt && !(clazz == Byte.class || clazz == Short.class || clazz == Integer.class || clazz == Long.class)) {\r\n                    isInt = false;\r\n                    isIntObj = false;\r\n                }\r\n                if (isString && clazz != String.class) {\r\n                    isString = false;\r\n                }\r\n            }\r\n            if (valueList.size() == 1 && valueList.get(0) == null) {\r\n                if (not) {\r\n                    return new FilterSegement(new NotNullSegement(propertyName));\r\n                } else {\r\n                    return new FilterSegement(new NullSegement(propertyName));\r\n                }\r\n            }\r\n            if (isInt) {\r\n                if (valueList.size() == 1) {\r\n                    long value = ((Number) valueList.get(0)).longValue();\r\n                    Operator intOp = not ? Operator.NE : Operator.EQ;\r\n                    return new FilterSegement(new IntOpSegement(propertyName, value, intOp));\r\n                }\r\n                long[] values = new long[valueList.size()];\r\n                for (int i = 0; i < values.length; ++i) {\r\n                    values[i] = ((Number) valueList.get(i)).longValue();\r\n                }\r\n                return new FilterSegement(new IntInSegement(propertyName, values, not));\r\n            }\r\n            if (isString) {\r\n                if (valueList.size() == 1) {\r\n                    String value = (String) valueList.get(0);\r\n                    Operator intOp = not ? Operator.NE : Operator.EQ;\r\n                    return new FilterSegement(new StringOpSegement(propertyName, value, intOp));\r\n                }\r\n                String[] values = new String[valueList.size()];\r\n                valueList.toArray(values);\r\n                return new FilterSegement(new StringInSegement(propertyName, values, not));\r\n            }\r\n            if (isIntObj) {\r\n                Long[] values = new Long[valueList.size()];\r\n                for (int i = 0; i < values.length; ++i) {\r\n                    Number item = (Number) valueList.get(i);\r\n                    if (item != null) {\r\n                        values[i] = item.longValue();\r\n                    }\r\n                }\r\n                return new FilterSegement(new IntObjInSegement(propertyName, values, not));\r\n            }\r\n            throw new UnsupportedOperationException();\r\n        }\r\n        if (ch == '\\'' || ch == '\"') {\r\n            String strValue = readString();\r\n            if (predicateFlag) {\r\n                accept(')');\r\n            }\r\n            if (acceptBracket) {\r\n                accept(']');\r\n            }\r\n            if (op == Operator.RLIKE) {\r\n                return new FilterSegement(new RlikeSegement(propertyName, strValue, false));\r\n            }\r\n            if (op == Operator.NOT_RLIKE) {\r\n                return new FilterSegement(new RlikeSegement(propertyName, strValue, true));\r\n            }\r\n            if (op == Operator.LIKE || op == Operator.NOT_LIKE) {\r\n                while (strValue.indexOf(\"%%\") != -1) {\r\n                    strValue = strValue.replaceAll(\"%%\", \"%\");\r\n                }\r\n                final boolean not = (op == Operator.NOT_LIKE);\r\n                int p0 = strValue.indexOf('%');\r\n                if (p0 == -1) {\r\n                    if (op == Operator.LIKE) {\r\n                        op = Operator.EQ;\r\n                    } else {\r\n                        op = Operator.NE;\r\n                    }\r\n                } else {\r\n                    String[] items = strValue.split(\"%\");\r\n                    String startsWithValue = null;\r\n                    String endsWithValue = null;\r\n                    String[] containsValues = null;\r\n                    if (p0 == 0) {\r\n                        if (strValue.charAt(strValue.length() - 1) == '%') {\r\n                            containsValues = new String[items.length - 1];\r\n                            System.arraycopy(items, 1, containsValues, 0, containsValues.length);\r\n                        } else {\r\n                            endsWithValue = items[items.length - 1];\r\n                            if (items.length > 2) {\r\n                                containsValues = new String[items.length - 2];\r\n                                System.arraycopy(items, 1, containsValues, 0, containsValues.length);\r\n                            }\r\n                        }\r\n                    } else if (strValue.charAt(strValue.length() - 1) == '%') {\r\n                        containsValues = items;\r\n                    } else {\r\n                        if (items.length == 1) {\r\n                            startsWithValue = items[0];\r\n                        } else if (items.length == 2) {\r\n                            startsWithValue = items[0];\r\n                            endsWithValue = items[1];\r\n                        } else {\r\n                            startsWithValue = items[0];\r\n                            endsWithValue = items[items.length - 1];\r\n                            containsValues = new String[items.length - 2];\r\n                            System.arraycopy(items, 1, containsValues, 0, containsValues.length);\r\n                        }\r\n                    }\r\n                    return new FilterSegement(new MatchSegement(propertyName, startsWithValue, endsWithValue, containsValues, not));\r\n                }\r\n            }\r\n            return new FilterSegement(new StringOpSegement(propertyName, strValue, op));\r\n        }\r\n        if (isDigitFirst(ch)) {\r\n            long value = readLongValue();\r\n            double doubleValue = 0D;\r\n            if (ch == '.') {\r\n                doubleValue = readDoubleValue(value);\r\n            }\r\n            if (predicateFlag) {\r\n                accept(')');\r\n            }\r\n            if (acceptBracket) {\r\n                accept(']');\r\n            }\r\n            if (doubleValue == 0) {\r\n                return new FilterSegement(new IntOpSegement(propertyName, value, op));\r\n            } else {\r\n                return new FilterSegement(new DoubleOpSegement(propertyName, doubleValue, op));\r\n            }\r\n        }\r\n        if (ch == 'n') {\r\n            String name = readName();\r\n            if (\"null\".equals(name)) {\r\n                if (predicateFlag) {\r\n                    accept(')');\r\n                }\r\n                accept(']');\r\n                if (op == Operator.EQ) {\r\n                    return new FilterSegement(new NullSegement(propertyName));\r\n                }\r\n                if (op == Operator.NE) {\r\n                    return new FilterSegement(new NotNullSegement(propertyName));\r\n                }\r\n                throw new UnsupportedOperationException();\r\n            }\r\n        } else if (ch == 't') {\r\n            String name = readName();\r\n            if (\"true\".equals(name)) {\r\n                if (predicateFlag) {\r\n                    accept(')');\r\n                }\r\n                accept(']');\r\n                if (op == Operator.EQ) {\r\n                    return new FilterSegement(new ValueSegment(propertyName, Boolean.TRUE, true));\r\n                }\r\n                if (op == Operator.NE) {\r\n                    return new FilterSegement(new ValueSegment(propertyName, Boolean.TRUE, false));\r\n                }\r\n                throw new UnsupportedOperationException();\r\n            }\r\n        } else if (ch == 'f') {\r\n            String name = readName();\r\n            if (\"false\".equals(name)) {\r\n                if (predicateFlag) {\r\n                    accept(')');\r\n                }\r\n                accept(']');\r\n                if (op == Operator.EQ) {\r\n                    return new FilterSegement(new ValueSegment(propertyName, Boolean.FALSE, true));\r\n                }\r\n                if (op == Operator.NE) {\r\n                    return new FilterSegement(new ValueSegment(propertyName, Boolean.FALSE, false));\r\n                }\r\n                throw new UnsupportedOperationException();\r\n            }\r\n        }\r\n        throw new UnsupportedOperationException();\r\n        // accept(')');\r\n    }\r\n    int start = pos - 1;\r\n    while (ch != ']' && ch != '/' && !isEOF()) {\r\n        if (// \r\n        ch == '.' && // \r\n        (!predicateFlag) && !predicateFlag) {\r\n            break;\r\n        }\r\n        if (ch == '\\\\') {\r\n            next();\r\n        }\r\n        next();\r\n    }\r\n    int end;\r\n    if (acceptBracket) {\r\n        end = pos - 1;\r\n    } else {\r\n        if (ch == '/' || ch == '.') {\r\n            end = pos - 1;\r\n        } else {\r\n            end = pos;\r\n        }\r\n    }\r\n    String text = path.substring(start, end);\r\n    if (text.indexOf(\"\\\\.\") != -1) {\r\n        String propName = text.replaceAll(\"\\\\\\\\\\\\.\", \"\\\\.\");\r\n        return new PropertySegement(propName, false);\r\n    }\r\n    Segement segment = buildArraySegement(text);\r\n    if (acceptBracket && !isEOF()) {\r\n        accept(']');\r\n    }\r\n    return segment;\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.parseArrayAccess", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.parseArrayAccess(boolean)", "qualified_return_type": "com.alibaba.fastjson.JSONPath.Segement"}
{"java_doc": "", "method_name": "readLongValue", "return_type": "long", "signature": "readLongValue()", "body_content": "{\r\n    int beginIndex = pos - 1;\r\n    if (ch == '+' || ch == '-') {\r\n        next();\r\n    }\r\n    while (ch >= '0' && ch <= '9') {\r\n        next();\r\n    }\r\n    int endIndex = pos - 1;\r\n    String text = path.substring(beginIndex, endIndex);\r\n    long value = Long.parseLong(text);\r\n    return value;\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.readLongValue", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.readLongValue()", "qualified_return_type": "long"}
{"java_doc": "", "method_name": "readDoubleValue", "return_type": "double", "signature": "readDoubleValue(long)", "body_content": "{\r\n    int beginIndex = pos - 1;\r\n    next();\r\n    while (ch >= '0' && ch <= '9') {\r\n        next();\r\n    }\r\n    int endIndex = pos - 1;\r\n    String text = path.substring(beginIndex, endIndex);\r\n    double value = Double.parseDouble(text);\r\n    value += longValue;\r\n    return value;\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.readDoubleValue", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.readDoubleValue(long)", "qualified_return_type": "double"}
{"java_doc": "", "method_name": "readValue", "return_type": "Object", "signature": "readValue()", "body_content": "{\r\n    skipWhitespace();\r\n    if (isDigitFirst(ch)) {\r\n        return readLongValue();\r\n    }\r\n    if (ch == '\"' || ch == '\\'') {\r\n        return readString();\r\n    }\r\n    if (ch == 'n') {\r\n        String name = readName();\r\n        if (\"null\".equals(name)) {\r\n            return null;\r\n        } else {\r\n            throw new JSONPathException(path);\r\n        }\r\n    }\r\n    throw new UnsupportedOperationException();\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.readValue", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.readValue()", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "isDigitFirst", "return_type": "boolean", "signature": "isDigitFirst(char)", "body_content": "{\r\n    return ch == '-' || ch == '+' || (ch >= '0' && ch <= '9');\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.isDigitFirst", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.isDigitFirst(char)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "readOp", "return_type": "Operator", "signature": "readOp()", "body_content": "{\r\n    Operator op = null;\r\n    if (ch == '=') {\r\n        next();\r\n        op = Operator.EQ;\r\n    } else if (ch == '!') {\r\n        next();\r\n        accept('=');\r\n        op = Operator.NE;\r\n    } else if (ch == '<') {\r\n        next();\r\n        if (ch == '=') {\r\n            next();\r\n            op = Operator.LE;\r\n        } else {\r\n            op = Operator.LT;\r\n        }\r\n    } else if (ch == '>') {\r\n        next();\r\n        if (ch == '=') {\r\n            next();\r\n            op = Operator.GE;\r\n        } else {\r\n            op = Operator.GT;\r\n        }\r\n    }\r\n    if (op == null) {\r\n        String name = readName();\r\n        if (\"not\".equalsIgnoreCase(name)) {\r\n            skipWhitespace();\r\n            name = readName();\r\n            if (\"like\".equalsIgnoreCase(name)) {\r\n                op = Operator.NOT_LIKE;\r\n            } else if (\"rlike\".equalsIgnoreCase(name)) {\r\n                op = Operator.NOT_RLIKE;\r\n            } else if (\"in\".equalsIgnoreCase(name)) {\r\n                op = Operator.NOT_IN;\r\n            } else if (\"between\".equalsIgnoreCase(name)) {\r\n                op = Operator.NOT_BETWEEN;\r\n            } else {\r\n                throw new UnsupportedOperationException();\r\n            }\r\n        } else {\r\n            if (\"like\".equalsIgnoreCase(name)) {\r\n                op = Operator.LIKE;\r\n            } else if (\"rlike\".equalsIgnoreCase(name)) {\r\n                op = Operator.RLIKE;\r\n            } else if (\"in\".equalsIgnoreCase(name)) {\r\n                op = Operator.IN;\r\n            } else if (\"between\".equalsIgnoreCase(name)) {\r\n                op = Operator.BETWEEN;\r\n            } else {\r\n                throw new UnsupportedOperationException();\r\n            }\r\n        }\r\n    }\r\n    return op;\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.readOp", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.readOp()", "qualified_return_type": "com.alibaba.fastjson.JSONPath.Operator"}
{"java_doc": "", "method_name": "readName", "return_type": "String", "signature": "readName()", "body_content": "{\r\n    skipWhitespace();\r\n    if (ch != '\\\\' && !IOUtils.firstIdentifier(ch)) {\r\n        throw new JSONPathException(\"illeal jsonpath syntax. \" + path);\r\n    }\r\n    StringBuilder buf = new StringBuilder();\r\n    while (!isEOF()) {\r\n        if (ch == '\\\\') {\r\n            next();\r\n            buf.append(ch);\r\n            if (isEOF()) {\r\n                break;\r\n            }\r\n            next();\r\n            continue;\r\n        }\r\n        boolean identifierFlag = IOUtils.isIdent(ch);\r\n        if (!identifierFlag) {\r\n            break;\r\n        }\r\n        buf.append(ch);\r\n        next();\r\n    }\r\n    if (isEOF() && IOUtils.isIdent(ch)) {\r\n        buf.append(ch);\r\n    }\r\n    String propertyName = buf.toString();\r\n    return propertyName;\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.readName", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.readName()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "readString", "return_type": "String", "signature": "readString()", "body_content": "{\r\n    char quoate = ch;\r\n    next();\r\n    int beginIndex = pos - 1;\r\n    while (ch != quoate && !isEOF()) {\r\n        next();\r\n    }\r\n    String strValue = path.substring(beginIndex, isEOF() ? pos : pos - 1);\r\n    accept(quoate);\r\n    return strValue;\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.readString", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.readString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "accept", "return_type": "void", "signature": "accept(char)", "body_content": "{\r\n    if (ch != expect) {\r\n        throw new JSONPathException(\"expect '\" + expect + \", but '\" + ch + \"'\");\r\n    }\r\n    if (!isEOF()) {\r\n        next();\r\n    }\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.accept", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.accept(char)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "explain", "return_type": "Segement[]", "signature": "explain()", "body_content": "{\r\n    if (path == null || path.isEmpty()) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n    Segement[] segements = new Segement[8];\r\n    for (; ; ) {\r\n        Segement segment = readSegement();\r\n        if (segment == null) {\r\n            break;\r\n        }\r\n        if (level == segements.length) {\r\n            Segement[] t = new Segement[level * 3 / 2];\r\n            System.arraycopy(segements, 0, t, 0, level);\r\n            segements = t;\r\n        }\r\n        segements[level++] = segment;\r\n    }\r\n    if (level == segements.length) {\r\n        return segements;\r\n    }\r\n    Segement[] result = new Segement[level];\r\n    System.arraycopy(segements, 0, result, 0, level);\r\n    return result;\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.explain", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.explain()", "qualified_return_type": "com.alibaba.fastjson.JSONPath.Segement[]"}
{"java_doc": "", "method_name": "buildArraySegement", "return_type": "Segement", "signature": "buildArraySegement(String)", "body_content": "{\r\n    final int indexTextLen = indexText.length();\r\n    final char firstChar = indexText.charAt(0);\r\n    final char lastChar = indexText.charAt(indexTextLen - 1);\r\n    int commaIndex = indexText.indexOf(',');\r\n    if (indexText.length() > 2 && firstChar == '\\'' && lastChar == '\\'') {\r\n        if (commaIndex == -1) {\r\n            String propertyName = indexText.substring(1, indexTextLen - 1);\r\n            return new PropertySegement(propertyName, false);\r\n        }\r\n        String[] indexesText = indexText.split(\",\");\r\n        String[] propertyNames = new String[indexesText.length];\r\n        for (int i = 0; i < indexesText.length; ++i) {\r\n            String indexesTextItem = indexesText[i];\r\n            propertyNames[i] = indexesTextItem.substring(1, indexesTextItem.length() - 1);\r\n        }\r\n        return new MultiPropertySegement(propertyNames);\r\n    }\r\n    int colonIndex = indexText.indexOf(':');\r\n    if (commaIndex == -1 && colonIndex == -1) {\r\n        int index = Integer.parseInt(indexText);\r\n        return new ArrayAccessSegement(index);\r\n    }\r\n    if (commaIndex != -1) {\r\n        String[] indexesText = indexText.split(\",\");\r\n        int[] indexes = new int[indexesText.length];\r\n        for (int i = 0; i < indexesText.length; ++i) {\r\n            indexes[i] = Integer.parseInt(indexesText[i]);\r\n        }\r\n        return new MultiIndexSegement(indexes);\r\n    }\r\n    if (colonIndex != -1) {\r\n        String[] indexesText = indexText.split(\":\");\r\n        int[] indexes = new int[indexesText.length];\r\n        for (int i = 0; i < indexesText.length; ++i) {\r\n            String str = indexesText[i];\r\n            if (str.isEmpty()) {\r\n                if (i == 0) {\r\n                    indexes[i] = 0;\r\n                } else {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            } else {\r\n                indexes[i] = Integer.parseInt(str);\r\n            }\r\n        }\r\n        int start = indexes[0];\r\n        int end;\r\n        if (indexes.length > 1) {\r\n            end = indexes[1];\r\n        } else {\r\n            end = -1;\r\n        }\r\n        int step;\r\n        if (indexes.length == 3) {\r\n            step = indexes[2];\r\n        } else {\r\n            step = 1;\r\n        }\r\n        if (end >= 0 && end < start) {\r\n            throw new UnsupportedOperationException(\"end must greater than or equals start. start \" + start + \",  end \" + end);\r\n        }\r\n        if (step <= 0) {\r\n            throw new UnsupportedOperationException(\"step must greater than zero : \" + step);\r\n        }\r\n        return new RangeSegement(start, end, step);\r\n    }\r\n    throw new UnsupportedOperationException();\r\n}", "class_name": "JSONPath.JSONPathParser", "qualified_method_name": "com.alibaba.fastjson.JSONPath.JSONPathParser.buildArraySegement", "qualified_signature": "com.alibaba.fastjson.JSONPath.JSONPathParser.buildArraySegement(java.lang.String)", "qualified_return_type": "com.alibaba.fastjson.JSONPath.Segement"}
{"java_doc": "", "method_name": "eval", "return_type": "Object", "signature": "eval(JSONPath, Object, Object)", "body_content": "", "class_name": "JSONPath.Segement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.Segement.eval", "qualified_signature": "com.alibaba.fastjson.JSONPath.Segement.eval(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "eval", "return_type": "Integer", "signature": "eval(JSONPath, Object, Object)", "body_content": "{\r\n    return path.evalSize(currentObject);\r\n}", "class_name": "JSONPath.SizeSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.SizeSegement.eval", "qualified_signature": "com.alibaba.fastjson.JSONPath.SizeSegement.eval(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object)", "qualified_return_type": "java.lang.Integer"}
{"java_doc": "", "method_name": "eval", "return_type": "Object", "signature": "eval(JSONPath, Object, Object)", "body_content": "{\r\n    if (deep) {\r\n        List<Object> results = new ArrayList<Object>();\r\n        path.deepScan(currentObject, propertyName, results);\r\n        return results;\r\n    } else {\r\n        return path.getPropertyValue(currentObject, propertyName, true);\r\n    }\r\n}", "class_name": "JSONPath.PropertySegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.PropertySegement.eval", "qualified_signature": "com.alibaba.fastjson.JSONPath.PropertySegement.eval(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "setValue", "return_type": "void", "signature": "setValue(JSONPath, Object, Object)", "body_content": "{\r\n    path.setPropertyValue(parent, propertyName, value);\r\n}", "class_name": "JSONPath.PropertySegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.PropertySegement.setValue", "qualified_signature": "com.alibaba.fastjson.JSONPath.PropertySegement.setValue(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "remove", "return_type": "boolean", "signature": "remove(JSONPath, Object)", "body_content": "{\r\n    return path.removePropertyValue(parent, propertyName);\r\n}", "class_name": "JSONPath.PropertySegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.PropertySegement.remove", "qualified_signature": "com.alibaba.fastjson.JSONPath.PropertySegement.remove(com.alibaba.fastjson.JSONPath, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "eval", "return_type": "Object", "signature": "eval(JSONPath, Object, Object)", "body_content": "{\r\n    List<Object> fieldValues = new ArrayList<Object>(propertyNames.length);\r\n    for (String propertyName : propertyNames) {\r\n        Object fieldValue = path.getPropertyValue(currentObject, propertyName, true);\r\n        fieldValues.add(fieldValue);\r\n    }\r\n    return fieldValues;\r\n}", "class_name": "JSONPath.MultiPropertySegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.MultiPropertySegement.eval", "qualified_signature": "com.alibaba.fastjson.JSONPath.MultiPropertySegement.eval(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "eval", "return_type": "Object", "signature": "eval(JSONPath, Object, Object)", "body_content": "{\r\n    return path.getPropertyValues(currentObject);\r\n}", "class_name": "JSONPath.WildCardSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.WildCardSegement.eval", "qualified_signature": "com.alibaba.fastjson.JSONPath.WildCardSegement.eval(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "eval", "return_type": "Object", "signature": "eval(JSONPath, Object, Object)", "body_content": "{\r\n    return path.getArrayItem(currentObject, index);\r\n}", "class_name": "JSONPath.ArrayAccessSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.ArrayAccessSegement.eval", "qualified_signature": "com.alibaba.fastjson.JSONPath.ArrayAccessSegement.eval(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "setValue", "return_type": "boolean", "signature": "setValue(JSONPath, Object, Object)", "body_content": "{\r\n    return path.setArrayItem(path, currentObject, index, value);\r\n}", "class_name": "JSONPath.ArrayAccessSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.ArrayAccessSegement.setValue", "qualified_signature": "com.alibaba.fastjson.JSONPath.ArrayAccessSegement.setValue(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "remove", "return_type": "boolean", "signature": "remove(JSONPath, Object)", "body_content": "{\r\n    return path.removeArrayItem(path, currentObject, index);\r\n}", "class_name": "JSONPath.ArrayAccessSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.ArrayAccessSegement.remove", "qualified_signature": "com.alibaba.fastjson.JSONPath.ArrayAccessSegement.remove(com.alibaba.fastjson.JSONPath, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "eval", "return_type": "Object", "signature": "eval(JSONPath, Object, Object)", "body_content": "{\r\n    List<Object> items = new ArrayList<Object>(indexes.length);\r\n    for (int i = 0; i < indexes.length; ++i) {\r\n        Object item = path.getArrayItem(currentObject, indexes[i]);\r\n        items.add(item);\r\n    }\r\n    return items;\r\n}", "class_name": "JSONPath.MultiIndexSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.MultiIndexSegement.eval", "qualified_signature": "com.alibaba.fastjson.JSONPath.MultiIndexSegement.eval(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "eval", "return_type": "Object", "signature": "eval(JSONPath, Object, Object)", "body_content": "{\r\n    int size = SizeSegement.instance.eval(path, rootObject, currentObject);\r\n    int start = this.start >= 0 ? this.start : this.start + size;\r\n    int end = this.end >= 0 ? this.end : this.end + size;\r\n    int array_size = (end - start) / step + 1;\r\n    if (array_size == -1) {\r\n        return null;\r\n    }\r\n    List<Object> items = new ArrayList<Object>(array_size);\r\n    for (int i = start; i <= end && i < size; i += step) {\r\n        Object item = path.getArrayItem(currentObject, i);\r\n        items.add(item);\r\n    }\r\n    return items;\r\n}", "class_name": "JSONPath.RangeSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.RangeSegement.eval", "qualified_signature": "com.alibaba.fastjson.JSONPath.RangeSegement.eval(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONPath, Object, Object, Object)", "body_content": "{\r\n    Object propertyValue = path.getPropertyValue(item, propertyName, false);\r\n    return propertyValue != null;\r\n}", "class_name": "JSONPath.NotNullSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.NotNullSegement.apply", "qualified_signature": "com.alibaba.fastjson.JSONPath.NotNullSegement.apply(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONPath, Object, Object, Object)", "body_content": "{\r\n    Object propertyValue = path.getPropertyValue(item, propertyName, false);\r\n    return propertyValue == null;\r\n}", "class_name": "JSONPath.NullSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.NullSegement.apply", "qualified_signature": "com.alibaba.fastjson.JSONPath.NullSegement.apply(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONPath, Object, Object, Object)", "body_content": "{\r\n    Object propertyValue = path.getPropertyValue(item, propertyName, false);\r\n    boolean result = value.equals(propertyValue);\r\n    if (!eq) {\r\n        result = !result;\r\n    }\r\n    return result;\r\n}", "class_name": "JSONPath.ValueSegment", "qualified_method_name": "com.alibaba.fastjson.JSONPath.ValueSegment.apply", "qualified_signature": "com.alibaba.fastjson.JSONPath.ValueSegment.apply(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONPath, Object, Object, Object)", "body_content": "{\r\n    Object propertyValue = path.getPropertyValue(item, propertyName, false);\r\n    if (propertyValue == null) {\r\n        return false;\r\n    }\r\n    if (propertyValue instanceof Number) {\r\n        long longPropertyValue = ((Number) propertyValue).longValue();\r\n        for (long value : values) {\r\n            if (value == longPropertyValue) {\r\n                return !not;\r\n            }\r\n        }\r\n    }\r\n    return not;\r\n}", "class_name": "JSONPath.IntInSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.IntInSegement.apply", "qualified_signature": "com.alibaba.fastjson.JSONPath.IntInSegement.apply(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONPath, Object, Object, Object)", "body_content": "{\r\n    Object propertyValue = path.getPropertyValue(item, propertyName, false);\r\n    if (propertyValue == null) {\r\n        return false;\r\n    }\r\n    if (propertyValue instanceof Number) {\r\n        long longPropertyValue = ((Number) propertyValue).longValue();\r\n        if (longPropertyValue >= startValue && longPropertyValue <= endValue) {\r\n            return !not;\r\n        }\r\n    }\r\n    return not;\r\n}", "class_name": "JSONPath.IntBetweenSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.IntBetweenSegement.apply", "qualified_signature": "com.alibaba.fastjson.JSONPath.IntBetweenSegement.apply(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONPath, Object, Object, Object)", "body_content": "{\r\n    Object propertyValue = path.getPropertyValue(item, propertyName, false);\r\n    if (propertyValue == null) {\r\n        for (Long value : values) {\r\n            if (value == null) {\r\n                return !not;\r\n            }\r\n        }\r\n        return not;\r\n    }\r\n    if (propertyValue instanceof Number) {\r\n        long longPropertyValue = ((Number) propertyValue).longValue();\r\n        for (Long value : values) {\r\n            if (value == null) {\r\n                continue;\r\n            }\r\n            if (value.longValue() == longPropertyValue) {\r\n                return !not;\r\n            }\r\n        }\r\n    }\r\n    return not;\r\n}", "class_name": "JSONPath.IntObjInSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.IntObjInSegement.apply", "qualified_signature": "com.alibaba.fastjson.JSONPath.IntObjInSegement.apply(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONPath, Object, Object, Object)", "body_content": "{\r\n    Object propertyValue = path.getPropertyValue(item, propertyName, false);\r\n    for (String value : values) {\r\n        if (value == propertyValue) {\r\n            return !not;\r\n        } else if (value != null && value.equals(propertyValue)) {\r\n            return !not;\r\n        }\r\n    }\r\n    return not;\r\n}", "class_name": "JSONPath.StringInSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.StringInSegement.apply", "qualified_signature": "com.alibaba.fastjson.JSONPath.StringInSegement.apply(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONPath, Object, Object, Object)", "body_content": "{\r\n    Object propertyValue = path.getPropertyValue(item, propertyName, false);\r\n    if (propertyValue == null) {\r\n        return false;\r\n    }\r\n    if (!(propertyValue instanceof Number)) {\r\n        return false;\r\n    }\r\n    long longValue = ((Number) propertyValue).longValue();\r\n    if (op == Operator.EQ) {\r\n        return longValue == value;\r\n    } else if (op == Operator.NE) {\r\n        return longValue != value;\r\n    } else if (op == Operator.GE) {\r\n        return longValue >= value;\r\n    } else if (op == Operator.GT) {\r\n        return longValue > value;\r\n    } else if (op == Operator.LE) {\r\n        return longValue <= value;\r\n    } else if (op == Operator.LT) {\r\n        return longValue < value;\r\n    }\r\n    return false;\r\n}", "class_name": "JSONPath.IntOpSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.IntOpSegement.apply", "qualified_signature": "com.alibaba.fastjson.JSONPath.IntOpSegement.apply(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONPath, Object, Object, Object)", "body_content": "{\r\n    Object propertyValue = path.getPropertyValue(item, propertyName, false);\r\n    if (propertyValue == null) {\r\n        return false;\r\n    }\r\n    if (!(propertyValue instanceof Number)) {\r\n        return false;\r\n    }\r\n    double doubleValue = ((Number) propertyValue).doubleValue();\r\n    if (op == Operator.EQ) {\r\n        return doubleValue == value;\r\n    } else if (op == Operator.NE) {\r\n        return doubleValue != value;\r\n    } else if (op == Operator.GE) {\r\n        return doubleValue >= value;\r\n    } else if (op == Operator.GT) {\r\n        return doubleValue > value;\r\n    } else if (op == Operator.LE) {\r\n        return doubleValue <= value;\r\n    } else if (op == Operator.LT) {\r\n        return doubleValue < value;\r\n    }\r\n    return false;\r\n}", "class_name": "JSONPath.DoubleOpSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.DoubleOpSegement.apply", "qualified_signature": "com.alibaba.fastjson.JSONPath.DoubleOpSegement.apply(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONPath, Object, Object, Object)", "body_content": "{\r\n    Object propertyValue = path.getPropertyValue(item, propertyName, false);\r\n    if (propertyValue == null) {\r\n        return false;\r\n    }\r\n    final String strPropertyValue = propertyValue.toString();\r\n    if (strPropertyValue.length() < minLength) {\r\n        return not;\r\n    }\r\n    int start = 0;\r\n    if (startsWithValue != null) {\r\n        if (!strPropertyValue.startsWith(startsWithValue)) {\r\n            return not;\r\n        }\r\n        start += startsWithValue.length();\r\n    }\r\n    if (containsValues != null) {\r\n        for (String containsValue : containsValues) {\r\n            int index = strPropertyValue.indexOf(containsValue, start);\r\n            if (index == -1) {\r\n                return not;\r\n            }\r\n            start = index + containsValue.length();\r\n        }\r\n    }\r\n    if (endsWithValue != null) {\r\n        if (!strPropertyValue.endsWith(endsWithValue)) {\r\n            return not;\r\n        }\r\n    }\r\n    return !not;\r\n}", "class_name": "JSONPath.MatchSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.MatchSegement.apply", "qualified_signature": "com.alibaba.fastjson.JSONPath.MatchSegement.apply(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONPath, Object, Object, Object)", "body_content": "{\r\n    Object propertyValue = path.getPropertyValue(item, propertyName, false);\r\n    if (propertyValue == null) {\r\n        return false;\r\n    }\r\n    String strPropertyValue = propertyValue.toString();\r\n    Matcher m = pattern.matcher(strPropertyValue);\r\n    boolean match = m.matches();\r\n    if (not) {\r\n        match = !match;\r\n    }\r\n    return match;\r\n}", "class_name": "JSONPath.RlikeSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.RlikeSegement.apply", "qualified_signature": "com.alibaba.fastjson.JSONPath.RlikeSegement.apply(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONPath, Object, Object, Object)", "body_content": "{\r\n    Object propertyValue = path.getPropertyValue(item, propertyName, false);\r\n    if (op == Operator.EQ) {\r\n        return value.equals(propertyValue);\r\n    } else if (op == Operator.NE) {\r\n        return !value.equals(propertyValue);\r\n    }\r\n    if (propertyValue == null) {\r\n        return false;\r\n    }\r\n    int compareResult = value.compareTo(propertyValue.toString());\r\n    if (op == Operator.GE) {\r\n        return compareResult <= 0;\r\n    } else if (op == Operator.GT) {\r\n        return compareResult < 0;\r\n    } else if (op == Operator.LE) {\r\n        return compareResult >= 0;\r\n    } else if (op == Operator.LT) {\r\n        return compareResult > 0;\r\n    }\r\n    return false;\r\n}", "class_name": "JSONPath.StringOpSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.StringOpSegement.apply", "qualified_signature": "com.alibaba.fastjson.JSONPath.StringOpSegement.apply(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "eval", "return_type": "Object", "signature": "eval(JSONPath, Object, Object)", "body_content": "{\r\n    if (currentObject == null) {\r\n        return null;\r\n    }\r\n    List<Object> items = new JSONArray();\r\n    if (currentObject instanceof Iterable) {\r\n        Iterator it = ((Iterable) currentObject).iterator();\r\n        while (it.hasNext()) {\r\n            Object item = it.next();\r\n            if (filter.apply(path, rootObject, currentObject, item)) {\r\n                items.add(item);\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n    if (filter.apply(path, rootObject, currentObject, currentObject)) {\r\n        return currentObject;\r\n    }\r\n    return null;\r\n}", "class_name": "JSONPath.FilterSegement", "qualified_method_name": "com.alibaba.fastjson.JSONPath.FilterSegement.eval", "qualified_signature": "com.alibaba.fastjson.JSONPath.FilterSegement.eval(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "apply", "return_type": "boolean", "signature": "apply(JSONPath, Object, Object, Object)", "body_content": "", "class_name": "JSONPath.Filter", "qualified_method_name": "com.alibaba.fastjson.JSONPath.Filter.apply", "qualified_signature": "com.alibaba.fastjson.JSONPath.Filter.apply(com.alibaba.fastjson.JSONPath, java.lang.Object, java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getArrayItem", "return_type": "Object", "signature": "getArrayItem(Object, int)", "body_content": "{\r\n    if (currentObject == null) {\r\n        return null;\r\n    }\r\n    if (currentObject instanceof List) {\r\n        List list = (List) currentObject;\r\n        if (index >= 0) {\r\n            if (index < list.size()) {\r\n                return list.get(index);\r\n            }\r\n            return null;\r\n        } else {\r\n            if (Math.abs(index) <= list.size()) {\r\n                return list.get(list.size() + index);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    if (currentObject.getClass().isArray()) {\r\n        int arrayLenth = Array.getLength(currentObject);\r\n        if (index >= 0) {\r\n            if (index < arrayLenth) {\r\n                return Array.get(currentObject, index);\r\n            }\r\n            return null;\r\n        } else {\r\n            if (Math.abs(index) <= arrayLenth) {\r\n                return Array.get(currentObject, arrayLenth + index);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    throw new UnsupportedOperationException();\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.getArrayItem", "qualified_signature": "com.alibaba.fastjson.JSONPath.getArrayItem(java.lang.Object, int)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "setArrayItem", "return_type": "boolean", "signature": "setArrayItem(JSONPath, Object, int, Object)", "body_content": "{\r\n    if (currentObject instanceof List) {\r\n        List list = (List) currentObject;\r\n        if (index >= 0) {\r\n            list.set(index, value);\r\n        } else {\r\n            list.set(list.size() + index, value);\r\n        }\r\n        return true;\r\n    }\r\n    Class<?> clazz = currentObject.getClass();\r\n    if (clazz.isArray()) {\r\n        int arrayLenth = Array.getLength(currentObject);\r\n        if (index >= 0) {\r\n            if (index < arrayLenth) {\r\n                Array.set(currentObject, index, value);\r\n            }\r\n        } else {\r\n            if (Math.abs(index) <= arrayLenth) {\r\n                Array.set(currentObject, arrayLenth + index, value);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    throw new JSONPathException(\"unsupported set operation.\" + clazz);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.setArrayItem", "qualified_signature": "com.alibaba.fastjson.JSONPath.setArrayItem(com.alibaba.fastjson.JSONPath, java.lang.Object, int, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "removeArrayItem", "return_type": "boolean", "signature": "removeArrayItem(JSONPath, Object, int)", "body_content": "{\r\n    if (currentObject instanceof List) {\r\n        List list = (List) currentObject;\r\n        if (index >= 0) {\r\n            if (index >= list.size()) {\r\n                return false;\r\n            }\r\n            list.remove(index);\r\n        } else {\r\n            int newIndex = list.size() + index;\r\n            if (newIndex < 0) {\r\n                return false;\r\n            }\r\n            list.remove(newIndex);\r\n        }\r\n        return true;\r\n    }\r\n    Class<?> clazz = currentObject.getClass();\r\n    throw new JSONPathException(\"unsupported set operation.\" + clazz);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.removeArrayItem", "qualified_signature": "com.alibaba.fastjson.JSONPath.removeArrayItem(com.alibaba.fastjson.JSONPath, java.lang.Object, int)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getPropertyValues", "return_type": "Collection<Object>", "signature": "getPropertyValues(Object)", "body_content": "{\r\n    final Class<?> currentClass = currentObject.getClass();\r\n    JavaBeanSerializer beanSerializer = getJavaBeanSerializer(currentClass);\r\n    if (beanSerializer != null) {\r\n        try {\r\n            return beanSerializer.getFieldValues(currentObject);\r\n        } catch (Exception e) {\r\n            throw new JSONPathException(\"jsonpath error, path \" + path, e);\r\n        }\r\n    }\r\n    if (currentObject instanceof Map) {\r\n        Map map = (Map) currentObject;\r\n        return map.values();\r\n    }\r\n    throw new UnsupportedOperationException();\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.getPropertyValues", "qualified_signature": "com.alibaba.fastjson.JSONPath.getPropertyValues(java.lang.Object)", "qualified_return_type": "java.util.Collection<java.lang.Object>"}
{"java_doc": "", "method_name": "eq", "return_type": "boolean", "signature": "eq(Object, Object)", "body_content": "{\r\n    if (a == b) {\r\n        return true;\r\n    }\r\n    if (a == null || b == null) {\r\n        return false;\r\n    }\r\n    if (a.getClass() == b.getClass()) {\r\n        return a.equals(b);\r\n    }\r\n    if (a instanceof Number) {\r\n        if (b instanceof Number) {\r\n            return eqNotNull((Number) a, (Number) b);\r\n        }\r\n        return false;\r\n    }\r\n    return a.equals(b);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.eq", "qualified_signature": "com.alibaba.fastjson.JSONPath.eq(java.lang.Object, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "eqNotNull", "return_type": "boolean", "signature": "eqNotNull(Number, Number)", "body_content": "{\r\n    Class clazzA = a.getClass();\r\n    boolean isIntA = isInt(clazzA);\r\n    Class clazzB = b.getClass();\r\n    boolean isIntB = isInt(clazzB);\r\n    if (a instanceof BigDecimal) {\r\n        BigDecimal decimalA = (BigDecimal) a;\r\n        if (isIntB) {\r\n            return decimalA.equals(BigDecimal.valueOf(b.longValue()));\r\n        }\r\n    }\r\n    if (isIntA) {\r\n        if (isIntB) {\r\n            return a.longValue() == b.longValue();\r\n        }\r\n        if (b instanceof BigInteger) {\r\n            BigInteger bigIntB = (BigInteger) a;\r\n            BigInteger bigIntA = BigInteger.valueOf(a.longValue());\r\n            return bigIntA.equals(bigIntB);\r\n        }\r\n    }\r\n    if (isIntB) {\r\n        if (a instanceof BigInteger) {\r\n            BigInteger bigIntA = (BigInteger) a;\r\n            BigInteger bigIntB = BigInteger.valueOf(b.longValue());\r\n            return bigIntA.equals(bigIntB);\r\n        }\r\n    }\r\n    boolean isDoubleA = isDouble(clazzA);\r\n    boolean isDoubleB = isDouble(clazzB);\r\n    if ((isDoubleA && isDoubleB) || (isDoubleA && isIntB) || (isDoubleB && isIntA)) {\r\n        return a.doubleValue() == b.doubleValue();\r\n    }\r\n    return false;\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.eqNotNull", "qualified_signature": "com.alibaba.fastjson.JSONPath.eqNotNull(java.lang.Number, java.lang.Number)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isDouble", "return_type": "boolean", "signature": "isDouble(Class)", "body_content": "{\r\n    return clazzA == Float.class || clazzA == Double.class;\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.isDouble", "qualified_signature": "com.alibaba.fastjson.JSONPath.isDouble(java.lang.Class<?>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "isInt", "return_type": "boolean", "signature": "isInt(Class)", "body_content": "{\r\n    return clazzA == Byte.class || clazzA == Short.class || clazzA == Integer.class || clazzA == Long.class;\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.isInt", "qualified_signature": "com.alibaba.fastjson.JSONPath.isInt(java.lang.Class<?>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getPropertyValue", "return_type": "Object", "signature": "getPropertyValue(Object, String, boolean)", "body_content": "{\r\n    if (currentObject == null) {\r\n        return null;\r\n    }\r\n    if (currentObject instanceof Map) {\r\n        Map map = (Map) currentObject;\r\n        Object val = map.get(propertyName);\r\n        if (val == null && \"size\".equals(propertyName)) {\r\n            val = map.size();\r\n        }\r\n        return val;\r\n    }\r\n    final Class<?> currentClass = currentObject.getClass();\r\n    JavaBeanSerializer beanSerializer = getJavaBeanSerializer(currentClass);\r\n    if (beanSerializer != null) {\r\n        try {\r\n            return beanSerializer.getFieldValue(currentObject, propertyName);\r\n        } catch (Exception e) {\r\n            throw new JSONPathException(\"jsonpath error, path \" + path + \", segement \" + propertyName, e);\r\n        }\r\n    }\r\n    if (currentObject instanceof List) {\r\n        List list = (List) currentObject;\r\n        if (\"size\".equals(propertyName)) {\r\n            return list.size();\r\n        }\r\n        List<Object> fieldValues = new JSONArray(list.size());\r\n        for (int i = 0; i < list.size(); ++i) {\r\n            Object obj = list.get(i);\r\n            Object itemValue = getPropertyValue(obj, propertyName, strictMode);\r\n            fieldValues.add(itemValue);\r\n        }\r\n        return fieldValues;\r\n    }\r\n    if (currentObject instanceof Enum) {\r\n        Enum e = (Enum) currentObject;\r\n        if (\"name\".equals(propertyName)) {\r\n            return e.name();\r\n        }\r\n        if (\"ordinal\".equals(propertyName)) {\r\n            return e.ordinal();\r\n        }\r\n    }\r\n    if (currentObject instanceof Calendar) {\r\n        Calendar e = (Calendar) currentObject;\r\n        if (\"year\".equals(propertyName)) {\r\n            return e.get(Calendar.YEAR);\r\n        }\r\n        if (\"month\".equals(propertyName)) {\r\n            return e.get(Calendar.MONTH);\r\n        }\r\n        if (\"day\".equals(propertyName)) {\r\n            return e.get(Calendar.DAY_OF_MONTH);\r\n        }\r\n        if (\"hour\".equals(propertyName)) {\r\n            return e.get(Calendar.HOUR_OF_DAY);\r\n        }\r\n        if (\"minute\".equals(propertyName)) {\r\n            return e.get(Calendar.MINUTE);\r\n        }\r\n        if (\"second\".equals(propertyName)) {\r\n            return e.get(Calendar.SECOND);\r\n        }\r\n    }\r\n    throw new JSONPathException(\"jsonpath error, path \" + path + \", segement \" + propertyName);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.getPropertyValue", "qualified_signature": "com.alibaba.fastjson.JSONPath.getPropertyValue(java.lang.Object, java.lang.String, boolean)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "deepScan", "return_type": "void", "signature": "deepScan(Object, String, List)", "body_content": "{\r\n    if (currentObject == null) {\r\n        return;\r\n    }\r\n    if (currentObject instanceof Map) {\r\n        Map<?, ?> map = (Map<?, ?>) currentObject;\r\n        if (map.containsKey(propertyName)) {\r\n            Object val = map.get(propertyName);\r\n            results.add(val);\r\n            return;\r\n        }\r\n        for (Object val : map.values()) {\r\n            deepScan(val, propertyName, results);\r\n        }\r\n        return;\r\n    }\r\n    final Class<?> currentClass = currentObject.getClass();\r\n    JavaBeanSerializer beanSerializer = getJavaBeanSerializer(currentClass);\r\n    if (beanSerializer != null) {\r\n        try {\r\n            FieldSerializer fieldDeser = beanSerializer.getFieldSerializer(propertyName);\r\n            if (fieldDeser != null) {\r\n                try {\r\n                    Object val = fieldDeser.getPropertyValue(currentObject);\r\n                    results.add(val);\r\n                } catch (InvocationTargetException ex) {\r\n                    throw new JSONException(\"getFieldValue error.\" + propertyName, ex);\r\n                } catch (IllegalAccessException ex) {\r\n                    throw new JSONException(\"getFieldValue error.\" + propertyName, ex);\r\n                }\r\n                return;\r\n            }\r\n            List<Object> fieldValues = beanSerializer.getFieldValues(currentObject);\r\n            for (Object val : fieldValues) {\r\n                deepScan(val, propertyName, results);\r\n            }\r\n            return;\r\n        } catch (Exception e) {\r\n            throw new JSONPathException(\"jsonpath error, path \" + path + \", segement \" + propertyName, e);\r\n        }\r\n    }\r\n    if (currentObject instanceof List) {\r\n        List list = (List) currentObject;\r\n        for (int i = 0; i < list.size(); ++i) {\r\n            Object val = list.get(i);\r\n            deepScan(val, propertyName, results);\r\n        }\r\n        return;\r\n    }\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.deepScan", "qualified_signature": "com.alibaba.fastjson.JSONPath.deepScan(java.lang.Object, java.lang.String, java.util.List<java.lang.Object>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setPropertyValue", "return_type": "boolean", "signature": "setPropertyValue(Object, String, Object)", "body_content": "{\r\n    if (parent instanceof Map) {\r\n        ((Map) parent).put(name, value);\r\n        return true;\r\n    }\r\n    if (parent instanceof List) {\r\n        for (Object element : (List) parent) {\r\n            if (element == null) {\r\n                continue;\r\n            }\r\n            setPropertyValue(element, name, value);\r\n        }\r\n        return true;\r\n    }\r\n    ObjectDeserializer derializer = parserConfig.getDeserializer(parent.getClass());\r\n    JavaBeanDeserializer beanDerializer = null;\r\n    if (derializer instanceof JavaBeanDeserializer) {\r\n        beanDerializer = (JavaBeanDeserializer) derializer;\r\n    }\r\n    if (beanDerializer != null) {\r\n        FieldDeserializer fieldDeserializer = beanDerializer.getFieldDeserializer(name);\r\n        if (fieldDeserializer == null) {\r\n            return false;\r\n        }\r\n        fieldDeserializer.setValue(parent, value);\r\n        return true;\r\n    }\r\n    throw new UnsupportedOperationException();\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.setPropertyValue", "qualified_signature": "com.alibaba.fastjson.JSONPath.setPropertyValue(java.lang.Object, java.lang.String, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "removePropertyValue", "return_type": "boolean", "signature": "removePropertyValue(Object, String)", "body_content": "{\r\n    if (parent instanceof Map) {\r\n        Object origin = ((Map) parent).remove(name);\r\n        return origin != null;\r\n    }\r\n    ObjectDeserializer derializer = parserConfig.getDeserializer(parent.getClass());\r\n    JavaBeanDeserializer beanDerializer = null;\r\n    if (derializer instanceof JavaBeanDeserializer) {\r\n        beanDerializer = (JavaBeanDeserializer) derializer;\r\n    }\r\n    if (beanDerializer != null) {\r\n        FieldDeserializer fieldDeserializer = beanDerializer.getFieldDeserializer(name);\r\n        if (fieldDeserializer == null) {\r\n            return false;\r\n        }\r\n        fieldDeserializer.setValue(parent, null);\r\n        return true;\r\n    }\r\n    throw new UnsupportedOperationException();\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.removePropertyValue", "qualified_signature": "com.alibaba.fastjson.JSONPath.removePropertyValue(java.lang.Object, java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "getJavaBeanSerializer", "return_type": "JavaBeanSerializer", "signature": "getJavaBeanSerializer(Class)", "body_content": "{\r\n    JavaBeanSerializer beanSerializer = null;\r\n    {\r\n        ObjectSerializer serializer = serializeConfig.getObjectWriter(currentClass);\r\n        if (serializer instanceof JavaBeanSerializer) {\r\n            beanSerializer = (JavaBeanSerializer) serializer;\r\n        }\r\n    }\r\n    return beanSerializer;\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.getJavaBeanSerializer", "qualified_signature": "com.alibaba.fastjson.JSONPath.getJavaBeanSerializer(java.lang.Class<?>)", "qualified_return_type": "com.alibaba.fastjson.serializer.JavaBeanSerializer"}
{"java_doc": "", "method_name": "evalSize", "return_type": "int", "signature": "evalSize(Object)", "body_content": "{\r\n    if (currentObject == null) {\r\n        return -1;\r\n    }\r\n    if (currentObject instanceof Collection) {\r\n        return ((Collection) currentObject).size();\r\n    }\r\n    if (currentObject instanceof Object[]) {\r\n        return ((Object[]) currentObject).length;\r\n    }\r\n    if (currentObject.getClass().isArray()) {\r\n        return Array.getLength(currentObject);\r\n    }\r\n    if (currentObject instanceof Map) {\r\n        int count = 0;\r\n        for (Object value : ((Map) currentObject).values()) {\r\n            if (value != null) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n    JavaBeanSerializer beanSerializer = getJavaBeanSerializer(currentObject.getClass());\r\n    if (beanSerializer == null) {\r\n        return -1;\r\n    }\r\n    try {\r\n        return beanSerializer.getSize(currentObject);\r\n    } catch (Exception e) {\r\n        throw new JSONPathException(\"evalSize error : \" + path, e);\r\n    }\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.evalSize", "qualified_signature": "com.alibaba.fastjson.JSONPath.evalSize(java.lang.Object)", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "toJSONString", "return_type": "String", "signature": "toJSONString()", "body_content": "{\r\n    return JSON.toJSONString(path);\r\n}", "class_name": "JSONPath", "qualified_method_name": "com.alibaba.fastjson.JSONPath.toJSONString", "qualified_signature": "com.alibaba.fastjson.JSONPath.toJSONString()", "qualified_return_type": "java.lang.String"}
{"java_doc": "\r\n@return the fastJsonConfig.\r\n@since 1.2.11\r\n", "method_name": "getFastJsonConfig", "return_type": "FastJsonConfig", "signature": "getFastJsonConfig()", "body_content": "{\r\n    return fastJsonConfig;\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.getFastJsonConfig", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.getFastJsonConfig()", "qualified_return_type": "com.alibaba.fastjson.support.config.FastJsonConfig"}
{"java_doc": "\r\n@param fastJsonConfig the fastJsonConfig to set.\r\n@since 1.2.11\r\n", "method_name": "setFastJsonConfig", "return_type": "void", "signature": "setFastJsonConfig(FastJsonConfig)", "body_content": "{\r\n    this.fastJsonConfig = fastJsonConfig;\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.setFastJsonConfig", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.setFastJsonConfig(com.alibaba.fastjson.support.config.FastJsonConfig)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getCharset", "return_type": "Charset", "signature": "getCharset()", "body_content": "{\r\n    return this.fastJsonConfig.getCharset();\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.getCharset", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.getCharset()", "qualified_return_type": "java.nio.charset.Charset"}
{"java_doc": "", "method_name": "setCharset", "return_type": "void", "signature": "setCharset(Charset)", "body_content": "{\r\n    this.fastJsonConfig.setCharset(charset);\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.setCharset", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.setCharset(java.nio.charset.Charset)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getDateFormat", "return_type": "String", "signature": "getDateFormat()", "body_content": "{\r\n    return this.fastJsonConfig.getDateFormat();\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.getDateFormat", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.getDateFormat()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "setDateFormat", "return_type": "void", "signature": "setDateFormat(String)", "body_content": "{\r\n    this.fastJsonConfig.setDateFormat(dateFormat);\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.setDateFormat", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.setDateFormat(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getFeatures", "return_type": "SerializerFeature[]", "signature": "getFeatures()", "body_content": "{\r\n    return this.fastJsonConfig.getSerializerFeatures();\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.getFeatures", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.getFeatures()", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializerFeature[]"}
{"java_doc": "", "method_name": "setFeatures", "return_type": "void", "signature": "setFeatures(SerializerFeature[])", "body_content": "{\r\n    this.fastJsonConfig.setSerializerFeatures(features);\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.setFeatures", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.setFeatures(com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getFilters", "return_type": "SerializeFilter[]", "signature": "getFilters()", "body_content": "{\r\n    return this.fastJsonConfig.getSerializeFilters();\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.getFilters", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.getFilters()", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializeFilter[]"}
{"java_doc": "", "method_name": "setFilters", "return_type": "void", "signature": "setFilters(SerializeFilter[])", "body_content": "{\r\n    this.fastJsonConfig.setSerializeFilters(filters);\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.setFilters", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.setFilters(com.alibaba.fastjson.serializer.SerializeFilter...)", "qualified_return_type": "void"}
{"java_doc": "Check whether a class can be serialized or deserialized. It can check\r\nbased on packages, annotations on entities or explicit classes.\r\n\r\n@param type class need to check\r\n@return true if valid\r\n", "method_name": "isValidType", "return_type": "boolean", "signature": "isValidType(Class, Annotation[])", "body_content": "{\r\n    if (type == null)\r\n        return false;\r\n    if (clazzes != null) {\r\n        for (Class<?> cls : clazzes) {\r\n            // must strictly equal. Don't check\r\n            // inheritance\r\n            if (cls == type)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    return true;\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.isValidType", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.isValidType(java.lang.Class<?>, java.lang.annotation.Annotation[])", "qualified_return_type": "boolean"}
{"java_doc": "Check media type like \"application/json\".\r\n\r\n@param mediaType media type\r\n@return true if the media type is valid\r\n", "method_name": "hasMatchingMediaType", "return_type": "boolean", "signature": "hasMatchingMediaType(MediaType)", "body_content": "{\r\n    if (mediaType != null) {\r\n        String subtype = mediaType.getSubtype();\r\n        return (// \r\n        (\"json\".equalsIgnoreCase(subtype)) || // \r\n        (subtype.endsWith(\"+json\")) || // \r\n        (\"javascript\".equals(subtype)) || // \r\n        (\"x-javascript\".equals(subtype)) || // \r\n        (\"x-json\".equals(subtype)) || // \r\n        (\"x-www-form-urlencoded\".equalsIgnoreCase(subtype)) || (subtype.endsWith(\"x-www-form-urlencoded\")));\r\n    }\r\n    return true;\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.hasMatchingMediaType", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.hasMatchingMediaType(javax.ws.rs.core.MediaType)", "qualified_return_type": "boolean"}
{"java_doc": "Method that JAX-RS container calls to try to check whether given value\r\n(of specified type) can be serialized by this provider.\r\n", "method_name": "// \r\nisWriteable", "return_type": "// \r\nboolean", "signature": "isWriteable(Class, Type, Annotation[], MediaType)", "body_content": "{\r\n    if (!hasMatchingMediaType(mediaType)) {\r\n        return false;\r\n    }\r\n    return isValidType(type, annotations);\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.isWriteable", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.isWriteable(java.lang.Class<?>, java.lang.reflect.Type, java.lang.annotation.Annotation[], javax.ws.rs.core.MediaType)", "qualified_return_type": "boolean"}
{"java_doc": "Method that JAX-RS container calls to try to figure out serialized length\r\nof given value. always return -1 to denote \"not known\".\r\n", "method_name": "// \r\ngetSize", "return_type": "// \r\nlong", "signature": "getSize(Object, Class, Type, Annotation[], MediaType)", "body_content": "{\r\n    return -1;\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.getSize", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.getSize(java.lang.Object, java.lang.Class<?>, java.lang.reflect.Type, java.lang.annotation.Annotation[], javax.ws.rs.core.MediaType)", "qualified_return_type": "long"}
{"java_doc": "Method that JAX-RS container calls to serialize given value.\r\n", "method_name": "// \r\nwriteTo", "return_type": "// \r\nvoid", "signature": "writeTo(Object, Class, Type, Annotation[], MediaType, MultivaluedMap, OutputStream)", "body_content": "{\r\n    SerializerFeature[] serializerFeatures = fastJsonConfig.getSerializerFeatures();\r\n    if (uriInfo != null && uriInfo.getQueryParameters().containsKey(\"pretty\")) {\r\n        if (serializerFeatures == null)\r\n            serializerFeatures = new SerializerFeature[] { SerializerFeature.PrettyFormat };\r\n        else {\r\n            List<SerializerFeature> featureList = new ArrayList<SerializerFeature>(Arrays.asList(serializerFeatures));\r\n            featureList.add(SerializerFeature.PrettyFormat);\r\n            serializerFeatures = featureList.toArray(serializerFeatures);\r\n        }\r\n        fastJsonConfig.setSerializerFeatures(serializerFeatures);\r\n    }\r\n    int len = // \r\n    JSON.// \r\n    writeJSONString(// \r\n    entityStream, // \r\n    fastJsonConfig.getCharset(), // \r\n    obj, // \r\n    fastJsonConfig.getSerializeConfig(), // \r\n    fastJsonConfig.getSerializeFilters(), // \r\n    fastJsonConfig.getDateFormat(), // \r\n    JSON.DEFAULT_GENERATE_FEATURE, fastJsonConfig.getSerializerFeatures());\r\n    // add Content-Length\r\n    httpHeaders.add(\"Content-Length\", len);\r\n    entityStream.flush();\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.writeTo", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.writeTo(java.lang.Object, java.lang.Class<?>, java.lang.reflect.Type, java.lang.annotation.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.Object>, java.io.OutputStream)", "qualified_return_type": "void"}
{"java_doc": "Method that JAX-RS container calls to try to check whether values of\r\ngiven type (and media type) can be deserialized by this provider.\r\n", "method_name": "// \r\nisReadable", "return_type": "// \r\nboolean", "signature": "isReadable(Class, Type, Annotation[], MediaType)", "body_content": "{\r\n    if (!hasMatchingMediaType(mediaType)) {\r\n        return false;\r\n    }\r\n    return isValidType(type, annotations);\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.isReadable", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.isReadable(java.lang.Class<?>, java.lang.reflect.Type, java.lang.annotation.Annotation[], javax.ws.rs.core.MediaType)", "qualified_return_type": "boolean"}
{"java_doc": "Method that JAX-RS container calls to deserialize given value.\r\n", "method_name": "// \r\nreadFrom", "return_type": "// \r\nObject", "signature": "readFrom(Class, Type, Annotation[], MediaType, MultivaluedMap, InputStream)", "body_content": "{\r\n    return JSON.parseObject(entityStream, fastJsonConfig.getCharset(), genericType, fastJsonConfig.getFeatures());\r\n}", "class_name": "FastJsonProvider", "qualified_method_name": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.readFrom", "qualified_signature": "com.alibaba.fastjson.support.jaxrs.FastJsonProvider.readFrom(java.lang.Class<java.lang.Object>, java.lang.reflect.Type, java.lang.annotation.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String>, java.io.InputStream)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "setValue", "return_type": "void", "signature": "setValue(Object, Object)", "body_content": "{\r\n    if (map != null) {\r\n        map.put(key, value);\r\n        return;\r\n    }\r\n    if (collection != null) {\r\n        collection.add(value);\r\n        return;\r\n    }\r\n    list.set(index, value);\r\n    if (list instanceof JSONArray) {\r\n        JSONArray jsonArray = (JSONArray) list;\r\n        Object array = jsonArray.getRelatedArray();\r\n        if (array != null) {\r\n            int arrayLength = Array.getLength(array);\r\n            if (arrayLength > index) {\r\n                Object item;\r\n                if (jsonArray.getComponentType() != null) {\r\n                    item = TypeUtils.cast(value, jsonArray.getComponentType(), parser.getConfig());\r\n                } else {\r\n                    item = value;\r\n                }\r\n                Array.set(array, index, item);\r\n            }\r\n        }\r\n    }\r\n}", "class_name": "ResolveFieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer.setValue", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer.setValue(java.lang.Object, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "parseField", "return_type": "void", "signature": "parseField(DefaultJSONParser, Object, Type, Map)", "body_content": "{\r\n}", "class_name": "ResolveFieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer.parseField", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer.parseField(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.Object, java.lang.reflect.Type, java.util.Map<java.lang.String, java.lang.Object>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "process", "return_type": "Object", "signature": "process(BeanContext, Object, String, Object)", "body_content": "", "class_name": "ContextValueFilter", "qualified_method_name": "com.alibaba.fastjson.serializer.ContextValueFilter.process", "qualified_signature": "com.alibaba.fastjson.serializer.ContextValueFilter.process(com.alibaba.fastjson.serializer.BeanContext, java.lang.Object, java.lang.String, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "parseField", "return_type": "void", "signature": "parseField(DefaultJSONParser, Object, Type, Map)", "body_content": "", "class_name": "FieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.parseField", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.parseField(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.Object, java.lang.reflect.Type, java.util.Map<java.lang.String, java.lang.Object>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getFastMatchToken", "return_type": "int", "signature": "getFastMatchToken()", "body_content": "{\r\n    return 0;\r\n}", "class_name": "FieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.getFastMatchToken", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.getFastMatchToken()", "qualified_return_type": "int"}
{"java_doc": "", "method_name": "setValue", "return_type": "void", "signature": "setValue(Object, boolean)", "body_content": "{\r\n    setValue(object, Boolean.valueOf(value));\r\n}", "class_name": "FieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue(java.lang.Object, boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setValue", "return_type": "void", "signature": "setValue(Object, int)", "body_content": "{\r\n    setValue(object, Integer.valueOf(value));\r\n}", "class_name": "FieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue(java.lang.Object, int)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setValue", "return_type": "void", "signature": "setValue(Object, long)", "body_content": "{\r\n    setValue(object, Long.valueOf(value));\r\n}", "class_name": "FieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue(java.lang.Object, long)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setValue", "return_type": "void", "signature": "setValue(Object, String)", "body_content": "{\r\n    setValue(object, (Object) value);\r\n}", "class_name": "FieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue(java.lang.Object, java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setValue", "return_type": "void", "signature": "setValue(Object, Object)", "body_content": "{\r\n    if (// \r\n    value == null && fieldInfo.fieldClass.isPrimitive()) {\r\n        return;\r\n    }\r\n    try {\r\n        Method method = fieldInfo.method;\r\n        if (method != null) {\r\n            if (fieldInfo.getOnly) {\r\n                if (fieldInfo.fieldClass == AtomicInteger.class) {\r\n                    AtomicInteger atomic = (AtomicInteger) method.invoke(object);\r\n                    if (atomic != null) {\r\n                        atomic.set(((AtomicInteger) value).get());\r\n                    }\r\n                } else if (fieldInfo.fieldClass == AtomicLong.class) {\r\n                    AtomicLong atomic = (AtomicLong) method.invoke(object);\r\n                    if (atomic != null) {\r\n                        atomic.set(((AtomicLong) value).get());\r\n                    }\r\n                } else if (fieldInfo.fieldClass == AtomicBoolean.class) {\r\n                    AtomicBoolean atomic = (AtomicBoolean) method.invoke(object);\r\n                    if (atomic != null) {\r\n                        atomic.set(((AtomicBoolean) value).get());\r\n                    }\r\n                } else if (Map.class.isAssignableFrom(method.getReturnType())) {\r\n                    Map map = (Map) method.invoke(object);\r\n                    if (map != null) {\r\n                        map.putAll((Map) value);\r\n                    }\r\n                } else {\r\n                    Collection collection = (Collection) method.invoke(object);\r\n                    if (collection != null) {\r\n                        collection.addAll((Collection) value);\r\n                    }\r\n                }\r\n            } else {\r\n                method.invoke(object, value);\r\n            }\r\n            return;\r\n        } else {\r\n            final Field field = fieldInfo.field;\r\n            if (fieldInfo.getOnly) {\r\n                if (fieldInfo.fieldClass == AtomicInteger.class) {\r\n                    AtomicInteger atomic = (AtomicInteger) field.get(object);\r\n                    if (atomic != null) {\r\n                        atomic.set(((AtomicInteger) value).get());\r\n                    }\r\n                } else if (fieldInfo.fieldClass == AtomicLong.class) {\r\n                    AtomicLong atomic = (AtomicLong) field.get(object);\r\n                    if (atomic != null) {\r\n                        atomic.set(((AtomicLong) value).get());\r\n                    }\r\n                } else if (fieldInfo.fieldClass == AtomicBoolean.class) {\r\n                    AtomicBoolean atomic = (AtomicBoolean) field.get(object);\r\n                    if (atomic != null) {\r\n                        atomic.set(((AtomicBoolean) value).get());\r\n                    }\r\n                } else if (Map.class.isAssignableFrom(fieldInfo.fieldClass)) {\r\n                    Map map = (Map) field.get(object);\r\n                    if (map != null) {\r\n                        map.putAll((Map) value);\r\n                    }\r\n                } else {\r\n                    Collection collection = (Collection) field.get(object);\r\n                    if (collection != null) {\r\n                        collection.addAll((Collection) value);\r\n                    }\r\n                }\r\n            } else {\r\n                if (field != null) {\r\n                    field.set(object, value);\r\n                }\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        throw new JSONException(\"set property error, \" + fieldInfo.name, e);\r\n    }\r\n}", "class_name": "FieldDeserializer", "qualified_method_name": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue", "qualified_signature": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue(java.lang.Object, java.lang.Object)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "name", "return_type": "String", "signature": "name(int)", "body_content": "{\r\n    switch(value) {\r\n        case ERROR:\r\n            return \"error\";\r\n        case LITERAL_INT:\r\n            return \"int\";\r\n        case LITERAL_FLOAT:\r\n            return \"float\";\r\n        case LITERAL_STRING:\r\n            return \"string\";\r\n        case LITERAL_ISO8601_DATE:\r\n            return \"iso8601\";\r\n        case TRUE:\r\n            return \"true\";\r\n        case FALSE:\r\n            return \"false\";\r\n        case NULL:\r\n            return \"null\";\r\n        case NEW:\r\n            return \"new\";\r\n        case LPAREN:\r\n            return \"(\";\r\n        case RPAREN:\r\n            return \")\";\r\n        case LBRACE:\r\n            return \"{\";\r\n        case RBRACE:\r\n            return \"}\";\r\n        case LBRACKET:\r\n            return \"[\";\r\n        case RBRACKET:\r\n            return \"]\";\r\n        case COMMA:\r\n            return \",\";\r\n        case COLON:\r\n            return \":\";\r\n        case IDENTIFIER:\r\n            return \"ident\";\r\n        case FIELD_NAME:\r\n            return \"fieldName\";\r\n        case EOF:\r\n            return \"EOF\";\r\n        case SET:\r\n            return \"Set\";\r\n        case TREE_SET:\r\n            return \"TreeSet\";\r\n        case UNDEFINED:\r\n            return \"undefined\";\r\n        default:\r\n            return \"Unknown\";\r\n    }\r\n}", "class_name": "JSONToken", "qualified_method_name": "com.alibaba.fastjson.parser.JSONToken.name", "qualified_signature": "com.alibaba.fastjson.parser.JSONToken.name(int)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "getGlobalInstance", "return_type": "ParserConfig", "signature": "getGlobalInstance()", "body_content": "{\r\n    return global;\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.getGlobalInstance", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.getGlobalInstance()", "qualified_return_type": "com.alibaba.fastjson.parser.ParserConfig"}
{"java_doc": "", "method_name": "splitItemsFormProperty", "return_type": "String[]", "signature": "splitItemsFormProperty(String)", "body_content": "{\r\n    if (property != null && property.length() > 0) {\r\n        return property.split(\",\");\r\n    }\r\n    return null;\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.splitItemsFormProperty", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.splitItemsFormProperty(java.lang.String)", "qualified_return_type": "java.lang.String[]"}
{"java_doc": "", "method_name": "configFromPropety", "return_type": "void", "signature": "configFromPropety(Properties)", "body_content": "{\r\n    String property = properties.getProperty(DENY_PROPERTY);\r\n    String[] items = splitItemsFormProperty(property);\r\n    addItemsToDeny(items);\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.configFromPropety", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.configFromPropety(java.util.Properties)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "addItemsToDeny", "return_type": "void", "signature": "addItemsToDeny(String[])", "body_content": "{\r\n    if (items != null) {\r\n        for (int i = 0; i < items.length; ++i) {\r\n            String item = items[i];\r\n            this.addDeny(item);\r\n        }\r\n    }\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.addItemsToDeny", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.addItemsToDeny(java.lang.String[])", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "readSystemDenyPropety", "return_type": "String[]", "signature": "readSystemDenyPropety()", "body_content": "{\r\n    String property = IOUtils.getStringProperty(DENY_PROPERTY);\r\n    return splitItemsFormProperty(property);\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.readSystemDenyPropety", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.readSystemDenyPropety()", "qualified_return_type": "java.lang.String[]"}
{"java_doc": "", "method_name": "isAsmEnable", "return_type": "boolean", "signature": "isAsmEnable()", "body_content": "{\r\n    return asmEnable;\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.isAsmEnable", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.isAsmEnable()", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "setAsmEnable", "return_type": "void", "signature": "setAsmEnable(boolean)", "body_content": "{\r\n    this.asmEnable = asmEnable;\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.setAsmEnable", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.setAsmEnable(boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getDerializers", "return_type": "IdentityHashMap<Type, ObjectDeserializer>", "signature": "getDerializers()", "body_content": "{\r\n    return derializers;\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.getDerializers", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.getDerializers()", "qualified_return_type": "com.alibaba.fastjson.util.IdentityHashMap<java.lang.reflect.Type, com.alibaba.fastjson.parser.deserializer.ObjectDeserializer>"}
{"java_doc": "", "method_name": "getDeserializer", "return_type": "ObjectDeserializer", "signature": "getDeserializer(Type)", "body_content": "{\r\n    ObjectDeserializer derializer = this.derializers.get(type);\r\n    if (derializer != null) {\r\n        return derializer;\r\n    }\r\n    if (type instanceof Class<?>) {\r\n        return getDeserializer((Class<?>) type, type);\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        Type rawType = ((ParameterizedType) type).getRawType();\r\n        if (rawType instanceof Class<?>) {\r\n            return getDeserializer((Class<?>) rawType, type);\r\n        } else {\r\n            return getDeserializer(rawType);\r\n        }\r\n    }\r\n    return JavaObjectDeserializer.instance;\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.getDeserializer", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.getDeserializer(java.lang.reflect.Type)", "qualified_return_type": "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer"}
{"java_doc": "", "method_name": "getDeserializer", "return_type": "ObjectDeserializer", "signature": "getDeserializer(Class, Type)", "body_content": "{\r\n    ObjectDeserializer derializer = derializers.get(type);\r\n    if (derializer != null) {\r\n        return derializer;\r\n    }\r\n    if (type == null) {\r\n        type = clazz;\r\n    }\r\n    derializer = derializers.get(type);\r\n    if (derializer != null) {\r\n        return derializer;\r\n    }\r\n    {\r\n        JSONType annotation = clazz.getAnnotation(JSONType.class);\r\n        if (annotation != null) {\r\n            Class<?> mappingTo = annotation.mappingTo();\r\n            if (mappingTo != Void.class) {\r\n                return getDeserializer(mappingTo, mappingTo);\r\n            }\r\n        }\r\n    }\r\n    if (type instanceof WildcardType || type instanceof TypeVariable || type instanceof ParameterizedType) {\r\n        derializer = derializers.get(clazz);\r\n    }\r\n    if (derializer != null) {\r\n        return derializer;\r\n    }\r\n    String className = clazz.getName();\r\n    className = className.replace('$', '.');\r\n    for (int i = 0; i < denyList.length; ++i) {\r\n        String deny = denyList[i];\r\n        if (className.startsWith(deny)) {\r\n            throw new JSONException(\"parser deny : \" + className);\r\n        }\r\n    }\r\n    if (// \r\n    className.startsWith(\"java.awt.\") && AwtCodec.support(clazz)) {\r\n        if (!awtError) {\r\n            try {\r\n                derializers.put(Class.forName(\"java.awt.Point\"), AwtCodec.instance);\r\n                derializers.put(Class.forName(\"java.awt.Font\"), AwtCodec.instance);\r\n                derializers.put(Class.forName(\"java.awt.Rectangle\"), AwtCodec.instance);\r\n                derializers.put(Class.forName(\"java.awt.Color\"), AwtCodec.instance);\r\n            } catch (Throwable e) {\r\n                // skip\r\n                awtError = true;\r\n            }\r\n            derializer = AwtCodec.instance;\r\n        }\r\n    }\r\n    if (!jdk8Error) {\r\n        try {\r\n            if (className.startsWith(\"java.time.\")) {\r\n                derializers.put(Class.forName(\"java.time.LocalDateTime\"), Jdk8DateCodec.instance);\r\n                derializers.put(Class.forName(\"java.time.LocalDate\"), Jdk8DateCodec.instance);\r\n                derializers.put(Class.forName(\"java.time.LocalTime\"), Jdk8DateCodec.instance);\r\n                derializers.put(Class.forName(\"java.time.ZonedDateTime\"), Jdk8DateCodec.instance);\r\n                derializers.put(Class.forName(\"java.time.OffsetDateTime\"), Jdk8DateCodec.instance);\r\n                derializers.put(Class.forName(\"java.time.OffsetTime\"), Jdk8DateCodec.instance);\r\n                derializers.put(Class.forName(\"java.time.ZoneOffset\"), Jdk8DateCodec.instance);\r\n                derializers.put(Class.forName(\"java.time.ZoneRegion\"), Jdk8DateCodec.instance);\r\n                derializers.put(Class.forName(\"java.time.ZoneId\"), Jdk8DateCodec.instance);\r\n                derializers.put(Class.forName(\"java.time.Period\"), Jdk8DateCodec.instance);\r\n                derializers.put(Class.forName(\"java.time.Duration\"), Jdk8DateCodec.instance);\r\n                derializers.put(Class.forName(\"java.time.Instant\"), Jdk8DateCodec.instance);\r\n                derializer = derializers.get(clazz);\r\n            } else if (className.startsWith(\"java.util.Optional\")) {\r\n                derializers.put(Class.forName(\"java.util.Optional\"), OptionalCodec.instance);\r\n                derializers.put(Class.forName(\"java.util.OptionalDouble\"), OptionalCodec.instance);\r\n                derializers.put(Class.forName(\"java.util.OptionalInt\"), OptionalCodec.instance);\r\n                derializers.put(Class.forName(\"java.util.OptionalLong\"), OptionalCodec.instance);\r\n                derializer = derializers.get(clazz);\r\n            }\r\n        } catch (Throwable e) {\r\n            // skip\r\n            jdk8Error = true;\r\n        }\r\n    }\r\n    if (className.equals(\"java.nio.file.Path\")) {\r\n        derializers.put(clazz, MiscCodec.instance);\r\n    }\r\n    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\r\n    try {\r\n        for (AutowiredObjectDeserializer autowired : ServiceLoader.load(AutowiredObjectDeserializer.class, classLoader)) {\r\n            for (Type forType : autowired.getAutowiredFor()) {\r\n                derializers.put(forType, autowired);\r\n            }\r\n        }\r\n    } catch (Exception ex) {\r\n        // skip\r\n    }\r\n    if (derializer == null) {\r\n        derializer = derializers.get(type);\r\n    }\r\n    if (derializer != null) {\r\n        return derializer;\r\n    }\r\n    if (clazz.isEnum()) {\r\n        derializer = new EnumDeserializer(clazz);\r\n    } else if (clazz.isArray()) {\r\n        derializer = ObjectArrayCodec.instance;\r\n    } else if (clazz == Set.class || clazz == HashSet.class || clazz == Collection.class || clazz == List.class || clazz == ArrayList.class) {\r\n        derializer = CollectionCodec.instance;\r\n    } else if (Collection.class.isAssignableFrom(clazz)) {\r\n        derializer = CollectionCodec.instance;\r\n    } else if (Map.class.isAssignableFrom(clazz)) {\r\n        derializer = MapDeserializer.instance;\r\n    } else if (Throwable.class.isAssignableFrom(clazz)) {\r\n        derializer = new ThrowableDeserializer(this, clazz);\r\n    } else {\r\n        derializer = createJavaBeanDeserializer(clazz, type);\r\n    }\r\n    putDeserializer(type, derializer);\r\n    return derializer;\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.getDeserializer", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.getDeserializer(java.lang.Class<?>, java.lang.reflect.Type)", "qualified_return_type": "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer"}
{"java_doc": "", "method_name": "createJavaBeanDeserializer", "return_type": "ObjectDeserializer", "signature": "createJavaBeanDeserializer(Class, Type)", "body_content": "{\r\n    boolean asmEnable = this.asmEnable;\r\n    if (asmEnable) {\r\n        JSONType jsonType = clazz.getAnnotation(JSONType.class);\r\n        if (jsonType != null) {\r\n            Class<?> deserializerClass = jsonType.deserializer();\r\n            if (deserializerClass != Void.class) {\r\n                try {\r\n                    Object deseralizer = deserializerClass.newInstance();\r\n                    if (deseralizer instanceof ObjectDeserializer) {\r\n                        return (ObjectDeserializer) deseralizer;\r\n                    }\r\n                } catch (Throwable e) {\r\n                    // skip\r\n                }\r\n            }\r\n            asmEnable = jsonType.asm();\r\n        }\r\n        if (asmEnable) {\r\n            Class<?> superClass = JavaBeanInfo.getBuilderClass(jsonType);\r\n            if (superClass == null) {\r\n                superClass = clazz;\r\n            }\r\n            for (; ; ) {\r\n                if (!Modifier.isPublic(superClass.getModifiers())) {\r\n                    asmEnable = false;\r\n                    break;\r\n                }\r\n                superClass = superClass.getSuperclass();\r\n                if (superClass == Object.class || superClass == null) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (clazz.getTypeParameters().length != 0) {\r\n        asmEnable = false;\r\n    }\r\n    if (asmEnable && asmFactory != null && asmFactory.classLoader.isExternalClass(clazz)) {\r\n        asmEnable = false;\r\n    }\r\n    if (asmEnable) {\r\n        asmEnable = ASMUtils.checkName(clazz.getSimpleName());\r\n    }\r\n    if (asmEnable) {\r\n        if (clazz.isInterface()) {\r\n            asmEnable = false;\r\n        }\r\n        JavaBeanInfo beanInfo = JavaBeanInfo.build(clazz, type, propertyNamingStrategy);\r\n        if (asmEnable && beanInfo.fields.length > 200) {\r\n            asmEnable = false;\r\n        }\r\n        Constructor<?> defaultConstructor = beanInfo.defaultConstructor;\r\n        if (asmEnable && defaultConstructor == null && !clazz.isInterface()) {\r\n            asmEnable = false;\r\n        }\r\n        for (FieldInfo fieldInfo : beanInfo.fields) {\r\n            if (fieldInfo.getOnly) {\r\n                asmEnable = false;\r\n                break;\r\n            }\r\n            Class<?> fieldClass = fieldInfo.fieldClass;\r\n            if (!Modifier.isPublic(fieldClass.getModifiers())) {\r\n                asmEnable = false;\r\n                break;\r\n            }\r\n            if (fieldClass.isMemberClass() && !Modifier.isStatic(fieldClass.getModifiers())) {\r\n                asmEnable = false;\r\n                break;\r\n            }\r\n            if (// \r\n            fieldInfo.getMember() != null && !ASMUtils.checkName(fieldInfo.getMember().getName())) {\r\n                asmEnable = false;\r\n                break;\r\n            }\r\n            JSONField annotation = fieldInfo.getAnnotation();\r\n            if (// \r\n            annotation != null && (// \r\n            (!ASMUtils.checkName(annotation.name())) || // \r\n            annotation.format().length() != 0 || annotation.deserializeUsing() != Void.class)) {\r\n                asmEnable = false;\r\n                break;\r\n            }\r\n            if (fieldClass.isEnum()) {\r\n                // EnumDeserializer\r\n                ObjectDeserializer fieldDeser = this.getDeserializer(fieldClass);\r\n                if (!(fieldDeser instanceof EnumDeserializer)) {\r\n                    asmEnable = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (asmEnable) {\r\n        if (clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers())) {\r\n            asmEnable = false;\r\n        }\r\n    }\r\n    if (!asmEnable) {\r\n        return new JavaBeanDeserializer(this, clazz, type);\r\n    }\r\n    JavaBeanInfo beanInfo = JavaBeanInfo.build(clazz, type, propertyNamingStrategy);\r\n    try {\r\n        return asmFactory.createJavaBeanDeserializer(this, beanInfo);\r\n        // } catch (VerifyError e) {\r\n        // e.printStackTrace();\r\n        // return new JavaBeanDeserializer(this, clazz, type);\r\n    } catch (NoSuchMethodException ex) {\r\n        return new JavaBeanDeserializer(this, clazz, type);\r\n    } catch (JSONException asmError) {\r\n        return new JavaBeanDeserializer(this, beanInfo);\r\n    } catch (Exception e) {\r\n        throw new JSONException(\"create asm deserializer error, \" + clazz.getName(), e);\r\n    }\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.createJavaBeanDeserializer", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.createJavaBeanDeserializer(java.lang.Class<?>, java.lang.reflect.Type)", "qualified_return_type": "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer"}
{"java_doc": "", "method_name": "// \r\ncreateFieldDeserializer", "return_type": "// \r\nFieldDeserializer", "signature": "createFieldDeserializer(ParserConfig, JavaBeanInfo, FieldInfo)", "body_content": "{\r\n    Class<?> clazz = beanInfo.clazz;\r\n    Class<?> fieldClass = fieldInfo.fieldClass;\r\n    Class<?> deserializeUsing = null;\r\n    JSONField annotation = fieldInfo.getAnnotation();\r\n    if (annotation != null) {\r\n        deserializeUsing = annotation.deserializeUsing();\r\n        if (deserializeUsing == Void.class) {\r\n            deserializeUsing = null;\r\n        }\r\n    }\r\n    if (deserializeUsing == null && (fieldClass == List.class || fieldClass == ArrayList.class)) {\r\n        return new ArrayListTypeFieldDeserializer(mapping, clazz, fieldInfo);\r\n    }\r\n    return new DefaultFieldDeserializer(mapping, clazz, fieldInfo);\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.createFieldDeserializer", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.createFieldDeserializer(com.alibaba.fastjson.parser.ParserConfig, com.alibaba.fastjson.util.JavaBeanInfo, com.alibaba.fastjson.util.FieldInfo)", "qualified_return_type": "com.alibaba.fastjson.parser.deserializer.FieldDeserializer"}
{"java_doc": "", "method_name": "putDeserializer", "return_type": "void", "signature": "putDeserializer(Type, ObjectDeserializer)", "body_content": "{\r\n    derializers.put(type, deserializer);\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.putDeserializer", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.putDeserializer(java.lang.reflect.Type, com.alibaba.fastjson.parser.deserializer.ObjectDeserializer)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getDeserializer", "return_type": "ObjectDeserializer", "signature": "getDeserializer(FieldInfo)", "body_content": "{\r\n    return getDeserializer(fieldInfo.fieldClass, fieldInfo.fieldType);\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.getDeserializer", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.getDeserializer(com.alibaba.fastjson.util.FieldInfo)", "qualified_return_type": "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer"}
{"java_doc": "", "method_name": "isPrimitive", "return_type": "boolean", "signature": "isPrimitive(Class)", "body_content": "{\r\n    return // \r\n    clazz.isPrimitive() || // \r\n    clazz == Boolean.class || // \r\n    clazz == Character.class || // \r\n    clazz == Byte.class || // \r\n    clazz == Short.class || // \r\n    clazz == Integer.class || // \r\n    clazz == Long.class || // \r\n    clazz == Float.class || // \r\n    clazz == Double.class || // \r\n    clazz == BigInteger.class || // \r\n    clazz == BigDecimal.class || // \r\n    clazz == String.class || // \r\n    clazz == java.util.Date.class || // \r\n    clazz == java.sql.Date.class || // \r\n    clazz == java.sql.Time.class || // \r\n    clazz == java.sql.Timestamp.class || // \r\n    clazz.isEnum();\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.isPrimitive", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.isPrimitive(java.lang.Class<?>)", "qualified_return_type": "boolean"}
{"java_doc": "fieldName,field ，先生成fieldName的快照，减少之后的findField的轮询\r\n\r\n@param clazz\r\n@param fieldCacheMap :map&lt;fieldName ,Field&gt;\r\n", "method_name": "parserAllFieldToCache", "return_type": "void", "signature": "parserAllFieldToCache(Class, Map)", "body_content": "{\r\n    Field[] fields = clazz.getDeclaredFields();\r\n    for (Field field : fields) {\r\n        String fieldName = field.getName();\r\n        if (!fieldCacheMap.containsKey(fieldName)) {\r\n            fieldCacheMap.put(fieldName, field);\r\n        }\r\n    }\r\n    if (clazz.getSuperclass() != null && clazz.getSuperclass() != Object.class) {\r\n        parserAllFieldToCache(clazz.getSuperclass(), fieldCacheMap);\r\n    }\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.parserAllFieldToCache", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.parserAllFieldToCache(java.lang.Class<?>, java.util.Map<java.lang.String, java.lang.reflect.Field>)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getFieldFromCache", "return_type": "Field", "signature": "getFieldFromCache(String, Map)", "body_content": "{\r\n    Field field = fieldCacheMap.get(fieldName);\r\n    if (field == null) {\r\n        field = fieldCacheMap.get(\"_\" + fieldName);\r\n    }\r\n    if (field == null) {\r\n        field = fieldCacheMap.get(\"m_\" + fieldName);\r\n    }\r\n    return field;\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.getFieldFromCache", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.getFieldFromCache(java.lang.String, java.util.Map<java.lang.String, java.lang.reflect.Field>)", "qualified_return_type": "java.lang.reflect.Field"}
{"java_doc": "", "method_name": "getDefaultClassLoader", "return_type": "ClassLoader", "signature": "getDefaultClassLoader()", "body_content": "{\r\n    return defaultClassLoader;\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.getDefaultClassLoader", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.getDefaultClassLoader()", "qualified_return_type": "java.lang.ClassLoader"}
{"java_doc": "", "method_name": "setDefaultClassLoader", "return_type": "void", "signature": "setDefaultClassLoader(ClassLoader)", "body_content": "{\r\n    this.defaultClassLoader = defaultClassLoader;\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.setDefaultClassLoader", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.setDefaultClassLoader(java.lang.ClassLoader)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "addDeny", "return_type": "void", "signature": "addDeny(String)", "body_content": "{\r\n    if (name == null || name.length() == 0) {\r\n        return;\r\n    }\r\n    String[] denyList = new String[this.denyList.length + 1];\r\n    System.arraycopy(this.denyList, 0, denyList, 0, this.denyList.length);\r\n    denyList[denyList.length - 1] = name;\r\n    this.denyList = denyList;\r\n}", "class_name": "ParserConfig", "qualified_method_name": "com.alibaba.fastjson.parser.ParserConfig.addDeny", "qualified_signature": "com.alibaba.fastjson.parser.ParserConfig.addDeny(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "supports", "return_type": "boolean", "signature": "supports(MethodParameter, Class)", "body_content": "{\r\n    return FastJsonpHttpMessageConverter4.class.isAssignableFrom(converterType);\r\n}", "class_name": "FastJsonpResponseBodyAdvice", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice.supports", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice.supports(org.springframework.core.MethodParameter, java.lang.Class<? extends org.springframework.http.converter.HttpMessageConverter<?>>)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "beforeBodyWrite", "return_type": "Object", "signature": "beforeBodyWrite(Object, MethodParameter, MediaType, Class, ServerHttpRequest, ServerHttpResponse)", "body_content": "{\r\n    MappingFastJsonValue container = getOrCreateContainer(body);\r\n    beforeBodyWriteInternal(container, selectedContentType, returnType, request, response);\r\n    return container;\r\n}", "class_name": "FastJsonpResponseBodyAdvice", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice.beforeBodyWrite", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice.beforeBodyWrite(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.http.MediaType, java.lang.Class<? extends org.springframework.http.converter.HttpMessageConverter<?>>, org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "Wrap the body in a {@link MappingFastJsonValue} value container (for providing\r\nadditional serialization instructions) or simply cast it if already wrapped.\r\n", "method_name": "getOrCreateContainer", "return_type": "MappingFastJsonValue", "signature": "getOrCreateContainer(Object)", "body_content": "{\r\n    return (body instanceof MappingFastJsonValue ? (MappingFastJsonValue) body : new MappingFastJsonValue(body));\r\n}", "class_name": "FastJsonpResponseBodyAdvice", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice.getOrCreateContainer", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice.getOrCreateContainer(java.lang.Object)", "qualified_return_type": "com.alibaba.fastjson.support.spring.MappingFastJsonValue"}
{"java_doc": "Invoked only if the converter type is {@code FastJsonpHttpMessageConverter4}.\r\n", "method_name": "beforeBodyWriteInternal", "return_type": "void", "signature": "beforeBodyWriteInternal(MappingFastJsonValue, MediaType, MethodParameter, ServerHttpRequest, ServerHttpResponse)", "body_content": "{\r\n    HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest();\r\n    for (String name : this.jsonpQueryParamNames) {\r\n        String value = servletRequest.getParameter(name);\r\n        if (value != null) {\r\n            if (!isValidJsonpQueryParam(value)) {\r\n                continue;\r\n            }\r\n            MediaType contentTypeToUse = getContentType(contentType, request, response);\r\n            response.getHeaders().setContentType(contentTypeToUse);\r\n            bodyContainer.setJsonpFunction(value);\r\n            break;\r\n        }\r\n    }\r\n}", "class_name": "FastJsonpResponseBodyAdvice", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice.beforeBodyWriteInternal", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice.beforeBodyWriteInternal(com.alibaba.fastjson.support.spring.MappingFastJsonValue, org.springframework.http.MediaType, org.springframework.core.MethodParameter, org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse)", "qualified_return_type": "void"}
{"java_doc": "Validate the jsonp query parameter value. The default implementation\r\nreturns true if it consists of digits, letters, or \"_\" and \".\".\r\nInvalid parameter values are ignored.\r\n\r\n@param value the query param value, never {@code null}\r\n", "method_name": "isValidJsonpQueryParam", "return_type": "boolean", "signature": "isValidJsonpQueryParam(String)", "body_content": "{\r\n    return CALLBACK_PARAM_PATTERN.matcher(value).matches();\r\n}", "class_name": "FastJsonpResponseBodyAdvice", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice.isValidJsonpQueryParam", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice.isValidJsonpQueryParam(java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "Return the content type to set the response to.\r\nThis implementation always returns \"application/javascript\".\r\n\r\n@param contentType the content type selected through content negotiation\r\n@param request the current request\r\n@param response the current response\r\n@return the content type to set the response to\r\n", "method_name": "getContentType", "return_type": "MediaType", "signature": "getContentType(MediaType, ServerHttpRequest, ServerHttpResponse)", "body_content": "{\r\n    return new MediaType(\"application\", \"javascript\");\r\n}", "class_name": "FastJsonpResponseBodyAdvice", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice.getContentType", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice.getContentType(org.springframework.http.MediaType, org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse)", "qualified_return_type": "org.springframework.http.MediaType"}
{"java_doc": "\r\n@return the fastJsonConfig.\r\n@since 1.2.11\r\n", "method_name": "getFastJsonConfig", "return_type": "FastJsonConfig", "signature": "getFastJsonConfig()", "body_content": "{\r\n    return fastJsonConfig;\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.getFastJsonConfig", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.getFastJsonConfig()", "qualified_return_type": "com.alibaba.fastjson.support.config.FastJsonConfig"}
{"java_doc": "\r\n@param fastJsonConfig the fastJsonConfig to set.\r\n@since 1.2.11\r\n", "method_name": "setFastJsonConfig", "return_type": "void", "signature": "setFastJsonConfig(FastJsonConfig)", "body_content": "{\r\n    this.fastJsonConfig = fastJsonConfig;\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setFastJsonConfig", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setFastJsonConfig(com.alibaba.fastjson.support.config.FastJsonConfig)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "setSerializerFeature", "return_type": "void", "signature": "setSerializerFeature(SerializerFeature[])", "body_content": "{\r\n    this.fastJsonConfig.setSerializerFeatures(features);\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setSerializerFeature", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setSerializerFeature(com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getCharset", "return_type": "Charset", "signature": "getCharset()", "body_content": "{\r\n    return this.fastJsonConfig.getCharset();\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.getCharset", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.getCharset()", "qualified_return_type": "java.nio.charset.Charset"}
{"java_doc": "", "method_name": "setCharset", "return_type": "void", "signature": "setCharset(Charset)", "body_content": "{\r\n    this.fastJsonConfig.setCharset(charset);\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setCharset", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setCharset(java.nio.charset.Charset)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getDateFormat", "return_type": "String", "signature": "getDateFormat()", "body_content": "{\r\n    return this.fastJsonConfig.getDateFormat();\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.getDateFormat", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.getDateFormat()", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "setDateFormat", "return_type": "void", "signature": "setDateFormat(String)", "body_content": "{\r\n    this.fastJsonConfig.setDateFormat(dateFormat);\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setDateFormat", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setDateFormat(java.lang.String)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getFeatures", "return_type": "SerializerFeature[]", "signature": "getFeatures()", "body_content": "{\r\n    return this.fastJsonConfig.getSerializerFeatures();\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.getFeatures", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.getFeatures()", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializerFeature[]"}
{"java_doc": "", "method_name": "setFeatures", "return_type": "void", "signature": "setFeatures(SerializerFeature[])", "body_content": "{\r\n    this.fastJsonConfig.setSerializerFeatures(features);\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setFeatures", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setFeatures(com.alibaba.fastjson.serializer.SerializerFeature...)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "getFilters", "return_type": "SerializeFilter[]", "signature": "getFilters()", "body_content": "{\r\n    return this.fastJsonConfig.getSerializeFilters();\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.getFilters", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.getFilters()", "qualified_return_type": "com.alibaba.fastjson.serializer.SerializeFilter[]"}
{"java_doc": "", "method_name": "setFilters", "return_type": "void", "signature": "setFilters(SerializeFilter[])", "body_content": "{\r\n    this.fastJsonConfig.setSerializeFilters(filters);\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setFilters", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setFilters(com.alibaba.fastjson.serializer.SerializeFilter...)", "qualified_return_type": "void"}
{"java_doc": "Set renderedAttributes.\r\n\r\n@param renderedAttributes renderedAttributes\r\n", "method_name": "setRenderedAttributes", "return_type": "void", "signature": "setRenderedAttributes(Set)", "body_content": "{\r\n    this.renderedAttributes = renderedAttributes;\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setRenderedAttributes", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setRenderedAttributes(java.util.Set<java.lang.String>)", "qualified_return_type": "void"}
{"java_doc": "Check extractValueFromSingleKeyModel.\r\n\r\n@return extractValueFromSingleKeyModel\r\n", "method_name": "isExtractValueFromSingleKeyModel", "return_type": "boolean", "signature": "isExtractValueFromSingleKeyModel()", "body_content": "{\r\n    return extractValueFromSingleKeyModel;\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.isExtractValueFromSingleKeyModel", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.isExtractValueFromSingleKeyModel()", "qualified_return_type": "boolean"}
{"java_doc": "Set extractValueFromSingleKeyModel.\r\n\r\n@param extractValueFromSingleKeyModel\r\n", "method_name": "setExtractValueFromSingleKeyModel", "return_type": "void", "signature": "setExtractValueFromSingleKeyModel(boolean)", "body_content": "{\r\n    this.extractValueFromSingleKeyModel = extractValueFromSingleKeyModel;\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setExtractValueFromSingleKeyModel", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setExtractValueFromSingleKeyModel(boolean)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "// \r\nrenderMergedOutputModel", "return_type": "// \r\nvoid", "signature": "renderMergedOutputModel(Map, HttpServletRequest, HttpServletResponse)", "body_content": "{\r\n    Object value = filterModel(model);\r\n    ByteArrayOutputStream outnew = new ByteArrayOutputStream();\r\n    int len = // \r\n    JSON.// \r\n    writeJSONString(// \r\n    outnew, // \r\n    fastJsonConfig.getCharset(), // \r\n    value, // \r\n    fastJsonConfig.getSerializeConfig(), // \r\n    fastJsonConfig.getSerializeFilters(), // \r\n    fastJsonConfig.getDateFormat(), // \r\n    JSON.DEFAULT_GENERATE_FEATURE, fastJsonConfig.getSerializerFeatures());\r\n    if (this.updateContentLength) {\r\n        // Write content length (determined via byte array).\r\n        response.setContentLength(len);\r\n    }\r\n    // Flush byte array to servlet output stream.\r\n    ServletOutputStream out = response.getOutputStream();\r\n    outnew.writeTo(out);\r\n    outnew.close();\r\n    out.flush();\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.renderMergedOutputModel", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.renderMergedOutputModel(java.util.Map<java.lang.String, java.lang.Object>, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "// \r\nprepareResponse", "return_type": "// \r\nvoid", "signature": "prepareResponse(HttpServletRequest, HttpServletResponse)", "body_content": "{\r\n    setResponseContentType(request, response);\r\n    response.setCharacterEncoding(fastJsonConfig.getCharset().name());\r\n    if (this.disableCaching) {\r\n        response.addHeader(\"Pragma\", \"no-cache\");\r\n        response.addHeader(\"Cache-Control\", \"no-cache, no-store, max-age=0\");\r\n        response.addDateHeader(\"Expires\", 1L);\r\n    }\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.prepareResponse", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.prepareResponse(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "qualified_return_type": "void"}
{"java_doc": "Disables caching of the generated JSON.\r\n<p>\r\nDefault is {@code true}, which will prevent the client from caching the\r\ngenerated JSON.\r\n", "method_name": "setDisableCaching", "return_type": "void", "signature": "setDisableCaching(boolean)", "body_content": "{\r\n    this.disableCaching = disableCaching;\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setDisableCaching", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setDisableCaching(boolean)", "qualified_return_type": "void"}
{"java_doc": "Whether to update the 'Content-Length' header of the response. When set\r\nto {@code true}, the response is buffered in order to determine the\r\ncontent length and set the 'Content-Length' header of the response.\r\n<p>\r\nThe default setting is {@code false}.\r\n", "method_name": "setUpdateContentLength", "return_type": "void", "signature": "setUpdateContentLength(boolean)", "body_content": "{\r\n    this.updateContentLength = updateContentLength;\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setUpdateContentLength", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.setUpdateContentLength(boolean)", "qualified_return_type": "void"}
{"java_doc": "Filters out undesired attributes from the given model. The return value\r\ncan be either another {@link Map}, or a single value object.\r\n<p>\r\nDefault implementation removes {@link BindingResult} instances and\r\nentries not included in the {@link #setRenderedAttributes(Set)\r\nrenderedAttributes} property.\r\n\r\n@param model the model, as passed on to {@link #renderMergedOutputModel}\r\n@return the object to be rendered\r\n", "method_name": "filterModel", "return_type": "Object", "signature": "filterModel(Map)", "body_content": "{\r\n    Map<String, Object> result = new HashMap<String, Object>(model.size());\r\n    Set<String> renderedAttributes = // \r\n    !CollectionUtils.isEmpty(this.renderedAttributes) ? // \r\n    this.renderedAttributes : model.keySet();\r\n    for (Map.Entry<String, Object> entry : model.entrySet()) {\r\n        if (!(entry.getValue() instanceof BindingResult) && renderedAttributes.contains(entry.getKey())) {\r\n            result.put(entry.getKey(), entry.getValue());\r\n        }\r\n    }\r\n    if (extractValueFromSingleKeyModel) {\r\n        if (result.size() == 1) {\r\n            for (Map.Entry<String, Object> entry : result.entrySet()) {\r\n                return entry.getValue();\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}", "class_name": "FastJsonJsonView", "qualified_method_name": "com.alibaba.fastjson.support.spring.FastJsonJsonView.filterModel", "qualified_signature": "com.alibaba.fastjson.support.spring.FastJsonJsonView.filterModel(java.util.Map<java.lang.String, java.lang.Object>)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "", "method_name": "getBeforeFilters", "return_type": "List<BeforeFilter>", "signature": "getBeforeFilters()", "body_content": "{\r\n    if (beforeFilters == null) {\r\n        beforeFilters = new ArrayList<BeforeFilter>();\r\n        writeDirect = false;\r\n    }\r\n    return beforeFilters;\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.getBeforeFilters", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.getBeforeFilters()", "qualified_return_type": "java.util.List<com.alibaba.fastjson.serializer.BeforeFilter>"}
{"java_doc": "", "method_name": "getAfterFilters", "return_type": "List<AfterFilter>", "signature": "getAfterFilters()", "body_content": "{\r\n    if (afterFilters == null) {\r\n        afterFilters = new ArrayList<AfterFilter>();\r\n        writeDirect = false;\r\n    }\r\n    return afterFilters;\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.getAfterFilters", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.getAfterFilters()", "qualified_return_type": "java.util.List<com.alibaba.fastjson.serializer.AfterFilter>"}
{"java_doc": "", "method_name": "getNameFilters", "return_type": "List<NameFilter>", "signature": "getNameFilters()", "body_content": "{\r\n    if (nameFilters == null) {\r\n        nameFilters = new ArrayList<NameFilter>();\r\n        writeDirect = false;\r\n    }\r\n    return nameFilters;\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.getNameFilters", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.getNameFilters()", "qualified_return_type": "java.util.List<com.alibaba.fastjson.serializer.NameFilter>"}
{"java_doc": "", "method_name": "getPropertyPreFilters", "return_type": "List<PropertyPreFilter>", "signature": "getPropertyPreFilters()", "body_content": "{\r\n    if (propertyPreFilters == null) {\r\n        propertyPreFilters = new ArrayList<PropertyPreFilter>();\r\n        writeDirect = false;\r\n    }\r\n    return propertyPreFilters;\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.getPropertyPreFilters", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.getPropertyPreFilters()", "qualified_return_type": "java.util.List<com.alibaba.fastjson.serializer.PropertyPreFilter>"}
{"java_doc": "", "method_name": "getLabelFilters", "return_type": "List<LabelFilter>", "signature": "getLabelFilters()", "body_content": "{\r\n    if (labelFilters == null) {\r\n        labelFilters = new ArrayList<LabelFilter>();\r\n        writeDirect = false;\r\n    }\r\n    return labelFilters;\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.getLabelFilters", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.getLabelFilters()", "qualified_return_type": "java.util.List<com.alibaba.fastjson.serializer.LabelFilter>"}
{"java_doc": "", "method_name": "getPropertyFilters", "return_type": "List<PropertyFilter>", "signature": "getPropertyFilters()", "body_content": "{\r\n    if (propertyFilters == null) {\r\n        propertyFilters = new ArrayList<PropertyFilter>();\r\n        writeDirect = false;\r\n    }\r\n    return propertyFilters;\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.getPropertyFilters", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.getPropertyFilters()", "qualified_return_type": "java.util.List<com.alibaba.fastjson.serializer.PropertyFilter>"}
{"java_doc": "", "method_name": "getContextValueFilters", "return_type": "List<ContextValueFilter>", "signature": "getContextValueFilters()", "body_content": "{\r\n    if (contextValueFilters == null) {\r\n        contextValueFilters = new ArrayList<ContextValueFilter>();\r\n        writeDirect = false;\r\n    }\r\n    return contextValueFilters;\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.getContextValueFilters", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.getContextValueFilters()", "qualified_return_type": "java.util.List<com.alibaba.fastjson.serializer.ContextValueFilter>"}
{"java_doc": "", "method_name": "getValueFilters", "return_type": "List<ValueFilter>", "signature": "getValueFilters()", "body_content": "{\r\n    if (valueFilters == null) {\r\n        valueFilters = new ArrayList<ValueFilter>();\r\n        writeDirect = false;\r\n    }\r\n    return valueFilters;\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.getValueFilters", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.getValueFilters()", "qualified_return_type": "java.util.List<com.alibaba.fastjson.serializer.ValueFilter>"}
{"java_doc": "", "method_name": "addFilter", "return_type": "void", "signature": "addFilter(SerializeFilter)", "body_content": "{\r\n    if (filter == null) {\r\n        return;\r\n    }\r\n    if (filter instanceof PropertyPreFilter) {\r\n        this.getPropertyPreFilters().add((PropertyPreFilter) filter);\r\n    }\r\n    if (filter instanceof NameFilter) {\r\n        this.getNameFilters().add((NameFilter) filter);\r\n    }\r\n    if (filter instanceof ValueFilter) {\r\n        this.getValueFilters().add((ValueFilter) filter);\r\n    }\r\n    if (filter instanceof ContextValueFilter) {\r\n        this.getContextValueFilters().add((ContextValueFilter) filter);\r\n    }\r\n    if (filter instanceof PropertyFilter) {\r\n        this.getPropertyFilters().add((PropertyFilter) filter);\r\n    }\r\n    if (filter instanceof BeforeFilter) {\r\n        this.getBeforeFilters().add((BeforeFilter) filter);\r\n    }\r\n    if (filter instanceof AfterFilter) {\r\n        this.getAfterFilters().add((AfterFilter) filter);\r\n    }\r\n    if (filter instanceof LabelFilter) {\r\n        this.getLabelFilters().add((LabelFilter) filter);\r\n    }\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.addFilter", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.addFilter(com.alibaba.fastjson.serializer.SerializeFilter)", "qualified_return_type": "void"}
{"java_doc": "", "method_name": "// \r\napplyName", "return_type": "// \r\nboolean", "signature": "applyName(JSONSerializer, Object, String)", "body_content": "{\r\n    if (jsonBeanDeser.propertyPreFilters != null) {\r\n        for (PropertyPreFilter filter : jsonBeanDeser.propertyPreFilters) {\r\n            if (!filter.apply(jsonBeanDeser, object, key)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    if (this.propertyPreFilters != null) {\r\n        for (PropertyPreFilter filter : this.propertyPreFilters) {\r\n            if (!filter.apply(jsonBeanDeser, object, key)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.applyName", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.applyName(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.String)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "// \r\napply", "return_type": "// \r\nboolean", "signature": "apply(JSONSerializer, Object, String, Object)", "body_content": "{\r\n    if (jsonBeanDeser.propertyFilters != null) {\r\n        for (PropertyFilter propertyFilter : jsonBeanDeser.propertyFilters) {\r\n            if (!propertyFilter.apply(object, key, propertyValue)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    if (this.propertyFilters != null) {\r\n        for (PropertyFilter propertyFilter : this.propertyFilters) {\r\n            if (!propertyFilter.apply(object, key, propertyValue)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.apply", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.apply(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.String, java.lang.Object)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "// \r\nprocessKey", "return_type": "// \r\nString", "signature": "processKey(JSONSerializer, Object, String, Object)", "body_content": "{\r\n    if (jsonBeanDeser.nameFilters != null) {\r\n        for (NameFilter nameFilter : jsonBeanDeser.nameFilters) {\r\n            key = nameFilter.process(object, key, propertyValue);\r\n        }\r\n    }\r\n    if (this.nameFilters != null) {\r\n        for (NameFilter nameFilter : this.nameFilters) {\r\n            key = nameFilter.process(object, key, propertyValue);\r\n        }\r\n    }\r\n    return key;\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.processKey", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.processKey(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.String, java.lang.Object)", "qualified_return_type": "java.lang.String"}
{"java_doc": "", "method_name": "// \r\nprocessValue", "return_type": "// \r\nObject", "signature": "processValue(JSONSerializer, BeanContext, Object, String, Object)", "body_content": "{\r\n    if (propertyValue != null) {\r\n        if (// \r\n        jsonBeanDeser.out.writeNonStringValueAsString && (propertyValue instanceof Number || propertyValue instanceof Boolean)) {\r\n            propertyValue = propertyValue.toString();\r\n        } else if (beanContext != null && beanContext.isJsonDirect()) {\r\n            String jsonStr = (String) propertyValue;\r\n            propertyValue = JSON.parse(jsonStr);\r\n        }\r\n    }\r\n    if (jsonBeanDeser.valueFilters != null) {\r\n        for (ValueFilter valueFilter : jsonBeanDeser.valueFilters) {\r\n            propertyValue = valueFilter.process(object, key, propertyValue);\r\n        }\r\n    }\r\n    List<ValueFilter> valueFilters = this.valueFilters;\r\n    if (valueFilters != null) {\r\n        for (ValueFilter valueFilter : valueFilters) {\r\n            propertyValue = valueFilter.process(object, key, propertyValue);\r\n        }\r\n    }\r\n    if (jsonBeanDeser.contextValueFilters != null) {\r\n        for (ContextValueFilter valueFilter : jsonBeanDeser.contextValueFilters) {\r\n            propertyValue = valueFilter.process(beanContext, object, key, propertyValue);\r\n        }\r\n    }\r\n    if (this.contextValueFilters != null) {\r\n        for (ContextValueFilter valueFilter : this.contextValueFilters) {\r\n            propertyValue = valueFilter.process(beanContext, object, key, propertyValue);\r\n        }\r\n    }\r\n    return propertyValue;\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.processValue", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.processValue(com.alibaba.fastjson.serializer.JSONSerializer, com.alibaba.fastjson.serializer.BeanContext, java.lang.Object, java.lang.String, java.lang.Object)", "qualified_return_type": "java.lang.Object"}
{"java_doc": "only invoke by asm byte\r\n\r\n@return\r\n", "method_name": "writeDirect", "return_type": "boolean", "signature": "writeDirect(JSONSerializer)", "body_content": "{\r\n    return // \r\n    jsonBeanDeser.out.writeDirect && // \r\n    this.writeDirect && jsonBeanDeser.writeDirect;\r\n}", "class_name": "SerializeFilterable", "qualified_method_name": "com.alibaba.fastjson.serializer.SerializeFilterable.writeDirect", "qualified_signature": "com.alibaba.fastjson.serializer.SerializeFilterable.writeDirect(com.alibaba.fastjson.serializer.JSONSerializer)", "qualified_return_type": "boolean"}
{"java_doc": "", "method_name": "write", "return_type": "void", "signature": "write(JSONSerializer, Object, Object, Type, int)", "body_content": "{\r\n    SerializeWriter out = serializer.out;\r\n    if (object == null) {\r\n        out.writeNull();\r\n        return;\r\n    }\r\n    String strVal = object.toString();\r\n    out.writeString(strVal);\r\n}", "class_name": "ToStringSerializer", "qualified_method_name": "com.alibaba.fastjson.serializer.ToStringSerializer.write", "qualified_signature": "com.alibaba.fastjson.serializer.ToStringSerializer.write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int)", "qualified_return_type": "void"}
